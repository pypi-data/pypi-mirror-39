===========================
ORM для работы с БД SQLite
===========================

Описание
===================

Проект представляет из себя ORM, позволяющий взаимодейстовать с БД SQLite и выполнять основные операции,
такие как UPDATE, SELECT, INSERT, JOIN, может удалять и создавать таблицы, описанные в схеме.
На данный момент поддерживает работу с данными только INTEGER типа.

Установка
===================

    pip install otus_orm_ht

Функциональные модули
===================

models.py
-------------------------
 
Основной модуль программы

Предоставляет основной класс Base для создания и управления таблицами. В данный момент поддерживает работу только с
целочисленными типами. Для инициализации новой таблицы, небходимо унаследоваться от этого класса, описать поля таблицы, 
как методы класса. Первым аргументом при инициализации является тип поля, а вторым обязательное поле ('not null') или пустая 
строка, в случае если поле необязательное.

В переменной __relationships__ мы указываем все внешние связи с другими таблицами. Инициализируется в виде кортежа кортежей,
каждый из которых содержит переменные в следующей последовательности (Ключ в сводной таблице, название сводной таблицы,
ключ в родной таблице)

В переменной __tablename__ мы указываем название таблице в БД. В случае, если данная переменная не будет определенна, 
название таблицы будет совпадать с названием класса.



	class Posts(Base):
		__tablename__ = 'posts'
		id = ('INTEGER', 'not null')
		postname = ('INTEGER', '')
		user_id = ('INTEGER', 'not null')
		__relationships__ = (('user_id', 'users', 'id'),)


errors.py
-------------------------

Модуль с типовыми ошибками ORM

Ошибка, возникающая при передачи в ORM несуществующей колонки.

	UknownColumn


Ошибка, возникающая при вызове метода UPDATE или INSERT без входных параметров

	EmptyArguments



examples.py
-------------------------

Модуль с примерами




















