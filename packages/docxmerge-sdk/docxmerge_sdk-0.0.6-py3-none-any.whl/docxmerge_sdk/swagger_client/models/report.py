# coding: utf-8

"""
    DocxMerge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Report(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'dict(str, object)',
        'template_file': 'AppFile',
        'template_file_id': 'str',
        'result_file': 'AppFile',
        'result_file_id': 'str',
        'template_version_file': 'TemplateVersionFile',
        'id': 'str',
        'created': 'datetime',
        'modified': 'datetime',
        'tenant': 'Tenant',
        'tenant_id': 'str'
    }

    attribute_map = {
        'data': 'data',
        'template_file': 'templateFile',
        'template_file_id': 'templateFileId',
        'result_file': 'resultFile',
        'result_file_id': 'resultFileId',
        'template_version_file': 'templateVersionFile',
        'id': 'id',
        'created': 'created',
        'modified': 'modified',
        'tenant': 'tenant',
        'tenant_id': 'tenantId'
    }

    def __init__(self, data=None, template_file=None, template_file_id=None, result_file=None, result_file_id=None, template_version_file=None, id=None, created=None, modified=None, tenant=None, tenant_id=None):  # noqa: E501
        """Report - a model defined in OpenAPI"""  # noqa: E501

        self._data = None
        self._template_file = None
        self._template_file_id = None
        self._result_file = None
        self._result_file_id = None
        self._template_version_file = None
        self._id = None
        self._created = None
        self._modified = None
        self._tenant = None
        self._tenant_id = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if template_file is not None:
            self.template_file = template_file
        if template_file_id is not None:
            self.template_file_id = template_file_id
        if result_file is not None:
            self.result_file = result_file
        if result_file_id is not None:
            self.result_file_id = result_file_id
        if template_version_file is not None:
            self.template_version_file = template_version_file
        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if tenant is not None:
            self.tenant = tenant
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def data(self):
        """Gets the data of this Report.  # noqa: E501


        :return: The data of this Report.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Report.


        :param data: The data of this Report.  # noqa: E501
        :type: dict(str, object)
        """

        self._data = data

    @property
    def template_file(self):
        """Gets the template_file of this Report.  # noqa: E501


        :return: The template_file of this Report.  # noqa: E501
        :rtype: AppFile
        """
        return self._template_file

    @template_file.setter
    def template_file(self, template_file):
        """Sets the template_file of this Report.


        :param template_file: The template_file of this Report.  # noqa: E501
        :type: AppFile
        """

        self._template_file = template_file

    @property
    def template_file_id(self):
        """Gets the template_file_id of this Report.  # noqa: E501


        :return: The template_file_id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._template_file_id

    @template_file_id.setter
    def template_file_id(self, template_file_id):
        """Sets the template_file_id of this Report.


        :param template_file_id: The template_file_id of this Report.  # noqa: E501
        :type: str
        """

        self._template_file_id = template_file_id

    @property
    def result_file(self):
        """Gets the result_file of this Report.  # noqa: E501


        :return: The result_file of this Report.  # noqa: E501
        :rtype: AppFile
        """
        return self._result_file

    @result_file.setter
    def result_file(self, result_file):
        """Sets the result_file of this Report.


        :param result_file: The result_file of this Report.  # noqa: E501
        :type: AppFile
        """

        self._result_file = result_file

    @property
    def result_file_id(self):
        """Gets the result_file_id of this Report.  # noqa: E501


        :return: The result_file_id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._result_file_id

    @result_file_id.setter
    def result_file_id(self, result_file_id):
        """Sets the result_file_id of this Report.


        :param result_file_id: The result_file_id of this Report.  # noqa: E501
        :type: str
        """

        self._result_file_id = result_file_id

    @property
    def template_version_file(self):
        """Gets the template_version_file of this Report.  # noqa: E501


        :return: The template_version_file of this Report.  # noqa: E501
        :rtype: TemplateVersionFile
        """
        return self._template_version_file

    @template_version_file.setter
    def template_version_file(self, template_version_file):
        """Sets the template_version_file of this Report.


        :param template_version_file: The template_version_file of this Report.  # noqa: E501
        :type: TemplateVersionFile
        """

        self._template_version_file = template_version_file

    @property
    def id(self):
        """Gets the id of this Report.  # noqa: E501


        :return: The id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.


        :param id: The id of this Report.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this Report.  # noqa: E501


        :return: The created of this Report.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Report.


        :param created: The created of this Report.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Report.  # noqa: E501


        :return: The modified of this Report.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Report.


        :param modified: The modified of this Report.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def tenant(self):
        """Gets the tenant of this Report.  # noqa: E501


        :return: The tenant of this Report.  # noqa: E501
        :rtype: Tenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this Report.


        :param tenant: The tenant of this Report.  # noqa: E501
        :type: Tenant
        """

        self._tenant = tenant

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Report.  # noqa: E501


        :return: The tenant_id of this Report.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Report.


        :param tenant_id: The tenant_id of this Report.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
