# coding: utf-8

"""
    DocxMerge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created': 'datetime',
        'modified': 'datetime',
        'sub_id': 'str',
        'email': 'str',
        'tenant_users': 'list[TenantUser]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'modified': 'modified',
        'sub_id': 'subId',
        'email': 'email',
        'tenant_users': 'tenantUsers'
    }

    def __init__(self, id=None, created=None, modified=None, sub_id=None, email=None, tenant_users=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created = None
        self._modified = None
        self._sub_id = None
        self._email = None
        self._tenant_users = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if sub_id is not None:
            self.sub_id = sub_id
        if email is not None:
            self.email = email
        if tenant_users is not None:
            self.tenant_users = tenant_users

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this User.  # noqa: E501


        :return: The created of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.


        :param created: The created of this User.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this User.  # noqa: E501


        :return: The modified of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this User.


        :param modified: The modified of this User.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def sub_id(self):
        """Gets the sub_id of this User.  # noqa: E501


        :return: The sub_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this User.


        :param sub_id: The sub_id of this User.  # noqa: E501
        :type: str
        """

        self._sub_id = sub_id

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def tenant_users(self):
        """Gets the tenant_users of this User.  # noqa: E501


        :return: The tenant_users of this User.  # noqa: E501
        :rtype: list[TenantUser]
        """
        return self._tenant_users

    @tenant_users.setter
    def tenant_users(self, tenant_users):
        """Sets the tenant_users of this User.


        :param tenant_users: The tenant_users of this User.  # noqa: E501
        :type: list[TenantUser]
        """

        self._tenant_users = tenant_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
