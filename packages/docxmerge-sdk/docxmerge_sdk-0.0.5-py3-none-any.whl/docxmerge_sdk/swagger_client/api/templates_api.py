# coding: utf-8

"""
    DocxMerge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from docxmerge_sdk.swagger_client.api_client import ApiClient


class TemplatesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_by_tenant_convert_post(self, tenant, document, **kwargs):  # noqa: E501
        """Converts and generates a file with json.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_convert_post(tenant, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param file document: Template file (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_convert_post_with_http_info(tenant, document, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_convert_post_with_http_info(tenant, document, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_convert_post_with_http_info(self, tenant, document, **kwargs):  # noqa: E501
        """Converts and generates a file with json.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_convert_post_with_http_info(tenant, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param file document: Template file (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tenant', 'document']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_convert_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_convert_post`")  # noqa: E501
        # verify the required parameter 'document' is set
        if ('document' not in local_var_params or
                local_var_params['document'] is None):
            raise ValueError("Missing the required parameter `document` when calling `api_by_tenant_convert_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'document' in local_var_params:
            local_var_files['document'] = local_var_params['document']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/convert', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_example_post(self, tenant, document, **kwargs):  # noqa: E501
        """Get json example from file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_example_post(tenant, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param file document: Template document (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_example_post_with_http_info(tenant, document, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_example_post_with_http_info(tenant, document, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_example_post_with_http_info(self, tenant, document, **kwargs):  # noqa: E501
        """Get json example from file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_example_post_with_http_info(tenant, document, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param file document: Template document (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tenant', 'document']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_example_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_example_post`")  # noqa: E501
        # verify the required parameter 'document' is set
        if ('document' not in local_var_params or
                local_var_params['document'] is None):
            raise ValueError("Missing the required parameter `document` when calling `api_by_tenant_example_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'document' in local_var_params:
            local_var_files['document'] = local_var_params['document']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/example', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_merge_post(self, tenant, document, data, **kwargs):  # noqa: E501
        """api_by_tenant_merge_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_merge_post(tenant, document, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param file document: (required)
        :param file data: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_merge_post_with_http_info(tenant, document, data, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_merge_post_with_http_info(tenant, document, data, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_merge_post_with_http_info(self, tenant, document, data, **kwargs):  # noqa: E501
        """api_by_tenant_merge_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_merge_post_with_http_info(tenant, document, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param file document: (required)
        :param file data: (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tenant', 'document', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_merge_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_merge_post`")  # noqa: E501
        # verify the required parameter 'document' is set
        if ('document' not in local_var_params or
                local_var_params['document'] is None):
            raise ValueError("Missing the required parameter `document` when calling `api_by_tenant_merge_post`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in local_var_params or
                local_var_params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `api_by_tenant_merge_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'document' in local_var_params:
            local_var_files['document'] = local_var_params['document']  # noqa: E501
        if 'data' in local_var_params:
            local_var_files['data'] = local_var_params['data']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/merge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_print_post(self, tenant, document, data, **kwargs):  # noqa: E501
        """Converts and generates a file with json.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_print_post(tenant, document, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param file document: Template file (required)
        :param file data: Json data (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_print_post_with_http_info(tenant, document, data, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_print_post_with_http_info(tenant, document, data, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_print_post_with_http_info(self, tenant, document, data, **kwargs):  # noqa: E501
        """Converts and generates a file with json.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_print_post_with_http_info(tenant, document, data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param file document: Template file (required)
        :param file data: Json data (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tenant', 'document', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_print_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_print_post`")  # noqa: E501
        # verify the required parameter 'document' is set
        if ('document' not in local_var_params or
                local_var_params['document'] is None):
            raise ValueError("Missing the required parameter `document` when calling `api_by_tenant_print_post`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in local_var_params or
                local_var_params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `api_by_tenant_print_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'document' in local_var_params:
            local_var_files['document'] = local_var_params['document']  # noqa: E501
        if 'data' in local_var_params:
            local_var_files['data'] = local_var_params['data']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/print', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_reports_by_id_get(self, id, tenant, **kwargs):  # noqa: E501
        """Get report file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_reports_by_id_get(id, tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Report id (required)
        :param str tenant: Tenant id (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_reports_by_id_get_with_http_info(id, tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_reports_by_id_get_with_http_info(id, tenant, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_reports_by_id_get_with_http_info(self, id, tenant, **kwargs):  # noqa: E501
        """Get report file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_reports_by_id_get_with_http_info(id, tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Report id (required)
        :param str tenant: Tenant id (required)
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_reports_by_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_reports_by_id_get`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_reports_by_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/reports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_delete(self, tenant, id, **kwargs):  # noqa: E501
        """Deletes template by the id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_delete(tenant, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: Tenant id (required)
        :param str id: Template id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_delete_with_http_info(tenant, id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_delete_with_http_info(tenant, id, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_delete_with_http_info(self, tenant, id, **kwargs):  # noqa: E501
        """Deletes template by the id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_delete_with_http_info(tenant, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: Tenant id (required)
        :param str id: Template id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tenant', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_delete`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_delete(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """Delete file belonging to a template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_delete(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Template id (required)
        :param str tenant: Tenant id (required)
        :param str file_id: File id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_delete_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_delete_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_delete_with_http_info(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """Delete file belonging to a template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_delete_with_http_info(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Template id (required)
        :param str tenant: Tenant id (required)
        :param str file_id: File id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_delete`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_delete`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_download_get(self, id, file_id, tenant, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_files_by_file_id_download_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_download_get(id, file_id, tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str file_id: (required)
        :param str tenant: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_download_get_with_http_info(id, file_id, tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_download_get_with_http_info(id, file_id, tenant, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_download_get_with_http_info(self, id, file_id, tenant, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_files_by_file_id_download_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_download_get_with_http_info(id, file_id, tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str file_id: (required)
        :param str tenant: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'file_id', 'tenant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_download_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_download_get`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_download_get`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_download_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}/download', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_example_get(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_files_by_file_id_example_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_example_get(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_example_get_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_example_get_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_example_get_with_http_info(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_files_by_file_id_example_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_example_get_with_http_info(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_example_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_example_get`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_example_get`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_example_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}/example', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_get(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """Get file by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_get(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :return: TemplateVersionFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_get_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_get_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_get_with_http_info(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """Get file by id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_get_with_http_info(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :return: TemplateVersionFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_get`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_get`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateVersionFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_patch(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """Updates a file with attributes, file, and status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_patch(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :param file file: 
        :param str status:
        :param list[str] attributes:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_patch_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_patch_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_patch_with_http_info(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """Updates a file with attributes, file, and status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_patch_with_http_info(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :param file file: 
        :param str status:
        :param list[str] attributes:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant', 'file_id', 'file', 'status', 'attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_patch`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_patch`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'status' in local_var_params:
            form_params.append(('Status', local_var_params['status']))  # noqa: E501
        if 'attributes' in local_var_params:
            form_params.append(('Attributes', local_var_params['attributes']))  # noqa: E501
            collection_formats['Attributes'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_render_post(self, id, tenant, file_id, request_body, **kwargs):  # noqa: E501
        """Render template with json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_render_post(id, tenant, file_id, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :param dict(str, object) request_body: (required)
        :param int version:
        :param list[str] attributes:
        :param bool debug:
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_render_post_with_http_info(id, tenant, file_id, request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_render_post_with_http_info(id, tenant, file_id, request_body, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_render_post_with_http_info(self, id, tenant, file_id, request_body, **kwargs):  # noqa: E501
        """Render template with json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_render_post_with_http_info(id, tenant, file_id, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :param dict(str, object) request_body: (required)
        :param int version:
        :param list[str] attributes:
        :param bool debug:
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant', 'file_id', 'request_body', 'version', 'attributes', 'debug']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_render_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_render_post`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_render_post`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_render_post`")  # noqa: E501
        # verify the required parameter 'request_body' is set
        if ('request_body' not in local_var_params or
                local_var_params['request_body'] is None):
            raise ValueError("Missing the required parameter `request_body` when calling `api_by_tenant_templates_by_id_files_by_file_id_render_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501

        query_params = []
        if 'version' in local_var_params:
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 'attributes' in local_var_params:
            query_params.append(('attributes', local_var_params['attributes']))  # noqa: E501
            collection_formats['attributes'] = 'multi'  # noqa: E501
        if 'debug' in local_var_params:
            query_params.append(('debug', local_var_params['debug']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}/render', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Report',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_reports_get(self, id, file_id, tenant, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_files_by_file_id_reports_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_reports_get(id, file_id, tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str file_id: (required)
        :param str tenant: (required)
        :param int page:
        :param int size:
        :return: ReportListResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_reports_get_with_http_info(id, file_id, tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_reports_get_with_http_info(id, file_id, tenant, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_reports_get_with_http_info(self, id, file_id, tenant, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_files_by_file_id_reports_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_reports_get_with_http_info(id, file_id, tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str file_id: (required)
        :param str tenant: (required)
        :param int page:
        :param int size:
        :return: ReportListResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'file_id', 'tenant', 'page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_reports_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_reports_get`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_reports_get`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_reports_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'size' in local_var_params:
            query_params.append(('size', local_var_params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReportListResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_samples_get(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_files_by_file_id_samples_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_samples_get(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :return: CodeSamplesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_samples_get_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_samples_get_with_http_info(id, tenant, file_id, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_samples_get_with_http_info(self, id, tenant, file_id, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_files_by_file_id_samples_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_samples_get_with_http_info(id, tenant, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :return: CodeSamplesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_samples_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_samples_get`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_samples_get`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_samples_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CodeSamplesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_by_file_id_status_post(self, id, tenant, file_id, status, **kwargs):  # noqa: E501
        """Set template status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_status_post(id, tenant, file_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :param str status: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_by_file_id_status_post_with_http_info(id, tenant, file_id, status, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_by_file_id_status_post_with_http_info(id, tenant, file_id, status, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_by_file_id_status_post_with_http_info(self, id, tenant, file_id, status, **kwargs):  # noqa: E501
        """Set template status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_by_file_id_status_post_with_http_info(id, tenant, file_id, status, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param str file_id: (required)
        :param str status: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant', 'file_id', 'status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_by_file_id_status_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_by_file_id_status_post`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_by_file_id_status_post`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if ('file_id' not in local_var_params or
                local_var_params['file_id'] is None):
            raise ValueError("Missing the required parameter `file_id` when calling `api_by_tenant_templates_by_id_files_by_file_id_status_post`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in local_var_params or
                local_var_params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `api_by_tenant_templates_by_id_files_by_file_id_status_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501
        if 'file_id' in local_var_params:
            path_params['fileId'] = local_var_params['file_id']  # noqa: E501

        query_params = []
        if 'status' in local_var_params:
            query_params.append(('status', local_var_params['status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files/{fileId}/status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_files_post(self, id, tenant, file, **kwargs):  # noqa: E501
        """Creates a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_post(id, tenant, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param file file:  (required)
        :param list[str] attributes:
        :return: TemplateVersionFile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_files_post_with_http_info(id, tenant, file, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_files_post_with_http_info(id, tenant, file, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_files_post_with_http_info(self, id, tenant, file, **kwargs):  # noqa: E501
        """Creates a file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_files_post_with_http_info(id, tenant, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :param file file:  (required)
        :param list[str] attributes:
        :return: TemplateVersionFile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant', 'file', 'attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_files_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_files_post`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_files_post`")  # noqa: E501
        # verify the required parameter 'file' is set
        if ('file' not in local_var_params or
                local_var_params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `api_by_tenant_templates_by_id_files_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in local_var_params:
            local_var_files['file'] = local_var_params['file']  # noqa: E501
        if 'attributes' in local_var_params:
            form_params.append(('Attributes', local_var_params['attributes']))  # noqa: E501
            collection_formats['Attributes'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateVersionFile',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_id_get(self, id, tenant, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_get(id, tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_id_get_with_http_info(id, tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_id_get_with_http_info(id, tenant, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_id_get_with_http_info(self, id, tenant, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_id_get_with_http_info(id, tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str tenant: (required)
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'tenant']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_by_tenant_templates_by_id_get`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Template',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_by_template_name_render_post(self, template_name, tenant, request_body, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_template_name_render_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_template_name_render_post(template_name, tenant, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_name: (required)
        :param str tenant: (required)
        :param dict(str, object) request_body: (required)
        :param int version:
        :param bool debug:
        :param object query_attributes:
        :param str env:
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_by_template_name_render_post_with_http_info(template_name, tenant, request_body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_by_template_name_render_post_with_http_info(template_name, tenant, request_body, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_by_template_name_render_post_with_http_info(self, template_name, tenant, request_body, **kwargs):  # noqa: E501
        """api_by_tenant_templates_by_template_name_render_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_by_template_name_render_post_with_http_info(template_name, tenant, request_body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str template_name: (required)
        :param str tenant: (required)
        :param dict(str, object) request_body: (required)
        :param int version:
        :param bool debug:
        :param object query_attributes:
        :param str env:
        :return: Report
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['template_name', 'tenant', 'request_body', 'version', 'debug', 'query_attributes', 'env']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_by_template_name_render_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'template_name' is set
        if ('template_name' not in local_var_params or
                local_var_params['template_name'] is None):
            raise ValueError("Missing the required parameter `template_name` when calling `api_by_tenant_templates_by_template_name_render_post`")  # noqa: E501
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_by_template_name_render_post`")  # noqa: E501
        # verify the required parameter 'request_body' is set
        if ('request_body' not in local_var_params or
                local_var_params['request_body'] is None):
            raise ValueError("Missing the required parameter `request_body` when calling `api_by_tenant_templates_by_template_name_render_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_name' in local_var_params:
            path_params['templateName'] = local_var_params['template_name']  # noqa: E501
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []
        if 'version' in local_var_params:
            query_params.append(('version', local_var_params['version']))  # noqa: E501
        if 'debug' in local_var_params:
            query_params.append(('debug', local_var_params['debug']))  # noqa: E501
        if 'query_attributes' in local_var_params:
            query_params.append(('queryAttributes', local_var_params['query_attributes']))  # noqa: E501
        if 'env' in local_var_params:
            query_params.append(('env', local_var_params['env']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/{templateName}/render', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Report',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_get(self, tenant, **kwargs):  # noqa: E501
        """Get all templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_get(tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param int size:
        :param int page:
        :return: TemplateListResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_get_with_http_info(tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_get_with_http_info(tenant, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_get_with_http_info(self, tenant, **kwargs):  # noqa: E501
        """Get all templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_get_with_http_info(tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param int size:
        :param int page:
        :return: TemplateListResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tenant', 'size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []
        if 'size' in local_var_params:
            query_params.append(('size', local_var_params['size']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateListResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_id_put(self, tenant, **kwargs):  # noqa: E501
        """Updates the template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_id_put(tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param str id:
        :param TemplateRequestModel template_request_model:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_id_put_with_http_info(tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_id_put_with_http_info(tenant, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_id_put_with_http_info(self, tenant, **kwargs):  # noqa: E501
        """Updates the template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_id_put_with_http_info(tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param str id:
        :param TemplateRequestModel template_request_model:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tenant', 'id', 'template_request_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_id_put" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_id_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []
        if 'id' in local_var_params:
            query_params.append(('id', local_var_params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_request_model' in local_var_params:
            body_params = local_var_params['template_request_model']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates/id', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_by_tenant_templates_post(self, tenant, **kwargs):  # noqa: E501
        """api_by_tenant_templates_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_post(tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param TemplateRequestModel template_request_model:
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_by_tenant_templates_post_with_http_info(tenant, **kwargs)  # noqa: E501
        else:
            (data) = self.api_by_tenant_templates_post_with_http_info(tenant, **kwargs)  # noqa: E501
            return data

    def api_by_tenant_templates_post_with_http_info(self, tenant, **kwargs):  # noqa: E501
        """api_by_tenant_templates_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_by_tenant_templates_post_with_http_info(tenant, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant: (required)
        :param TemplateRequestModel template_request_model:
        :return: Template
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['tenant', 'template_request_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_by_tenant_templates_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'tenant' is set
        if ('tenant' not in local_var_params or
                local_var_params['tenant'] is None):
            raise ValueError("Missing the required parameter `tenant` when calling `api_by_tenant_templates_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tenant' in local_var_params:
            path_params['tenant'] = local_var_params['tenant']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'template_request_model' in local_var_params:
            body_params = local_var_params['template_request_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/{tenant}/templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Template',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
