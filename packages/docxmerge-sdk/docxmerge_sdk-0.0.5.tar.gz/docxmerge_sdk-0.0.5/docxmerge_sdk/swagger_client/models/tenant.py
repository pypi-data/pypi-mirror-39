# coding: utf-8

"""
    DocxMerge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Tenant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created': 'datetime',
        'modified': 'datetime',
        'name': 'str',
        'api_key': 'str',
        'users': 'list[TenantUser]',
        'invitations': 'list[Invitation]'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'modified': 'modified',
        'name': 'name',
        'api_key': 'apiKey',
        'users': 'users',
        'invitations': 'invitations'
    }

    def __init__(self, id=None, created=None, modified=None, name=None, api_key=None, users=None, invitations=None):  # noqa: E501
        """Tenant - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created = None
        self._modified = None
        self._name = None
        self._api_key = None
        self._users = None
        self._invitations = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if name is not None:
            self.name = name
        if api_key is not None:
            self.api_key = api_key
        if users is not None:
            self.users = users
        if invitations is not None:
            self.invitations = invitations

    @property
    def id(self):
        """Gets the id of this Tenant.  # noqa: E501


        :return: The id of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tenant.


        :param id: The id of this Tenant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this Tenant.  # noqa: E501


        :return: The created of this Tenant.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Tenant.


        :param created: The created of this Tenant.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Tenant.  # noqa: E501


        :return: The modified of this Tenant.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Tenant.


        :param modified: The modified of this Tenant.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Tenant.  # noqa: E501


        :return: The name of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Tenant.


        :param name: The name of this Tenant.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def api_key(self):
        """Gets the api_key of this Tenant.  # noqa: E501


        :return: The api_key of this Tenant.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Tenant.


        :param api_key: The api_key of this Tenant.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def users(self):
        """Gets the users of this Tenant.  # noqa: E501


        :return: The users of this Tenant.  # noqa: E501
        :rtype: list[TenantUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Tenant.


        :param users: The users of this Tenant.  # noqa: E501
        :type: list[TenantUser]
        """

        self._users = users

    @property
    def invitations(self):
        """Gets the invitations of this Tenant.  # noqa: E501


        :return: The invitations of this Tenant.  # noqa: E501
        :rtype: list[Invitation]
        """
        return self._invitations

    @invitations.setter
    def invitations(self, invitations):
        """Sets the invitations of this Tenant.


        :param invitations: The invitations of this Tenant.  # noqa: E501
        :type: list[Invitation]
        """

        self._invitations = invitations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tenant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
