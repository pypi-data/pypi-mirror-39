# coding: utf-8

"""
    DocxMerge

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InvitationMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sub_id': 'str',
        'result_url': 'str',
        'ticket_url': 'str',
        'role': 'str',
        'permissions': 'list[str]'
    }

    attribute_map = {
        'sub_id': 'subId',
        'result_url': 'resultUrl',
        'ticket_url': 'ticketUrl',
        'role': 'role',
        'permissions': 'permissions'
    }

    def __init__(self, sub_id=None, result_url=None, ticket_url=None, role=None, permissions=None):  # noqa: E501
        """InvitationMetadata - a model defined in OpenAPI"""  # noqa: E501

        self._sub_id = None
        self._result_url = None
        self._ticket_url = None
        self._role = None
        self._permissions = None
        self.discriminator = None

        self.sub_id = sub_id
        self.result_url = result_url
        self.ticket_url = ticket_url
        self.role = role
        if permissions is not None:
            self.permissions = permissions

    @property
    def sub_id(self):
        """Gets the sub_id of this InvitationMetadata.  # noqa: E501


        :return: The sub_id of this InvitationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._sub_id

    @sub_id.setter
    def sub_id(self, sub_id):
        """Sets the sub_id of this InvitationMetadata.


        :param sub_id: The sub_id of this InvitationMetadata.  # noqa: E501
        :type: str
        """
        if sub_id is None:
            raise ValueError("Invalid value for `sub_id`, must not be `None`")  # noqa: E501

        self._sub_id = sub_id

    @property
    def result_url(self):
        """Gets the result_url of this InvitationMetadata.  # noqa: E501


        :return: The result_url of this InvitationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url):
        """Sets the result_url of this InvitationMetadata.


        :param result_url: The result_url of this InvitationMetadata.  # noqa: E501
        :type: str
        """
        if result_url is None:
            raise ValueError("Invalid value for `result_url`, must not be `None`")  # noqa: E501

        self._result_url = result_url

    @property
    def ticket_url(self):
        """Gets the ticket_url of this InvitationMetadata.  # noqa: E501


        :return: The ticket_url of this InvitationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._ticket_url

    @ticket_url.setter
    def ticket_url(self, ticket_url):
        """Sets the ticket_url of this InvitationMetadata.


        :param ticket_url: The ticket_url of this InvitationMetadata.  # noqa: E501
        :type: str
        """
        if ticket_url is None:
            raise ValueError("Invalid value for `ticket_url`, must not be `None`")  # noqa: E501

        self._ticket_url = ticket_url

    @property
    def role(self):
        """Gets the role of this InvitationMetadata.  # noqa: E501


        :return: The role of this InvitationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this InvitationMetadata.


        :param role: The role of this InvitationMetadata.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def permissions(self):
        """Gets the permissions of this InvitationMetadata.  # noqa: E501


        :return: The permissions of this InvitationMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this InvitationMetadata.


        :param permissions: The permissions of this InvitationMetadata.  # noqa: E501
        :type: list[str]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvitationMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
