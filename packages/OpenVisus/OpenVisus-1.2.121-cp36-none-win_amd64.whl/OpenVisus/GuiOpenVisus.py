# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GuiOpenVisus')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GuiOpenVisus')
    _GuiOpenVisus = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GuiOpenVisus', [dirname(__file__)])
        except ImportError:
            import _GuiOpenVisus
            return _GuiOpenVisus
        try:
            _mod = imp.load_module('_GuiOpenVisus', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GuiOpenVisus = swig_import_helper()
    del swig_import_helper
else:
    import _GuiOpenVisus
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GuiOpenVisus.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _GuiOpenVisus.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GuiOpenVisus.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GuiOpenVisus.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GuiOpenVisus.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GuiOpenVisus.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GuiOpenVisus.SwigPyIterator_copy(self)

    def next(self):
        return _GuiOpenVisus.SwigPyIterator_next(self)

    def __next__(self):
        return _GuiOpenVisus.SwigPyIterator___next__(self)

    def previous(self):
        return _GuiOpenVisus.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GuiOpenVisus.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GuiOpenVisus.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GuiOpenVisus.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GuiOpenVisus.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GuiOpenVisus.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GuiOpenVisus.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GuiOpenVisus.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GuiOpenVisus.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _GuiOpenVisus.new_PairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _GuiOpenVisus.PairDoubleDouble_first_set
    __swig_getmethods__["first"] = _GuiOpenVisus.PairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_GuiOpenVisus.PairDoubleDouble_first_get, _GuiOpenVisus.PairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _GuiOpenVisus.PairDoubleDouble_second_set
    __swig_getmethods__["second"] = _GuiOpenVisus.PairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_GuiOpenVisus.PairDoubleDouble_second_get, _GuiOpenVisus.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _GuiOpenVisus.delete_PairDoubleDouble
    __del__ = lambda self: None
PairDoubleDouble_swigregister = _GuiOpenVisus.PairDoubleDouble_swigregister
PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _GuiOpenVisus.new_PairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _GuiOpenVisus.PairIntDouble_first_set
    __swig_getmethods__["first"] = _GuiOpenVisus.PairIntDouble_first_get
    if _newclass:
        first = _swig_property(_GuiOpenVisus.PairIntDouble_first_get, _GuiOpenVisus.PairIntDouble_first_set)
    __swig_setmethods__["second"] = _GuiOpenVisus.PairIntDouble_second_set
    __swig_getmethods__["second"] = _GuiOpenVisus.PairIntDouble_second_get
    if _newclass:
        second = _swig_property(_GuiOpenVisus.PairIntDouble_second_get, _GuiOpenVisus.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _GuiOpenVisus.delete_PairIntDouble
    __del__ = lambda self: None
PairIntDouble_swigregister = _GuiOpenVisus.PairIntDouble_swigregister
PairIntDouble_swigregister(PairIntDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GuiOpenVisus.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GuiOpenVisus.VectorString___nonzero__(self)

    def __bool__(self):
        return _GuiOpenVisus.VectorString___bool__(self)

    def __len__(self):
        return _GuiOpenVisus.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _GuiOpenVisus.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GuiOpenVisus.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GuiOpenVisus.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GuiOpenVisus.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GuiOpenVisus.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GuiOpenVisus.VectorString___setitem__(self, *args)

    def pop(self):
        return _GuiOpenVisus.VectorString_pop(self)

    def append(self, x):
        return _GuiOpenVisus.VectorString_append(self, x)

    def empty(self):
        return _GuiOpenVisus.VectorString_empty(self)

    def size(self):
        return _GuiOpenVisus.VectorString_size(self)

    def swap(self, v):
        return _GuiOpenVisus.VectorString_swap(self, v)

    def begin(self):
        return _GuiOpenVisus.VectorString_begin(self)

    def end(self):
        return _GuiOpenVisus.VectorString_end(self)

    def rbegin(self):
        return _GuiOpenVisus.VectorString_rbegin(self)

    def rend(self):
        return _GuiOpenVisus.VectorString_rend(self)

    def clear(self):
        return _GuiOpenVisus.VectorString_clear(self)

    def get_allocator(self):
        return _GuiOpenVisus.VectorString_get_allocator(self)

    def pop_back(self):
        return _GuiOpenVisus.VectorString_pop_back(self)

    def erase(self, *args):
        return _GuiOpenVisus.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _GuiOpenVisus.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GuiOpenVisus.VectorString_push_back(self, x)

    def front(self):
        return _GuiOpenVisus.VectorString_front(self)

    def back(self):
        return _GuiOpenVisus.VectorString_back(self)

    def assign(self, n, x):
        return _GuiOpenVisus.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _GuiOpenVisus.VectorString_resize(self, *args)

    def insert(self, *args):
        return _GuiOpenVisus.VectorString_insert(self, *args)

    def reserve(self, n):
        return _GuiOpenVisus.VectorString_reserve(self, n)

    def capacity(self):
        return _GuiOpenVisus.VectorString_capacity(self)
    __swig_destroy__ = _GuiOpenVisus.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _GuiOpenVisus.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GuiOpenVisus.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GuiOpenVisus.VectorInt___nonzero__(self)

    def __bool__(self):
        return _GuiOpenVisus.VectorInt___bool__(self)

    def __len__(self):
        return _GuiOpenVisus.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _GuiOpenVisus.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GuiOpenVisus.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GuiOpenVisus.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GuiOpenVisus.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GuiOpenVisus.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GuiOpenVisus.VectorInt___setitem__(self, *args)

    def pop(self):
        return _GuiOpenVisus.VectorInt_pop(self)

    def append(self, x):
        return _GuiOpenVisus.VectorInt_append(self, x)

    def empty(self):
        return _GuiOpenVisus.VectorInt_empty(self)

    def size(self):
        return _GuiOpenVisus.VectorInt_size(self)

    def swap(self, v):
        return _GuiOpenVisus.VectorInt_swap(self, v)

    def begin(self):
        return _GuiOpenVisus.VectorInt_begin(self)

    def end(self):
        return _GuiOpenVisus.VectorInt_end(self)

    def rbegin(self):
        return _GuiOpenVisus.VectorInt_rbegin(self)

    def rend(self):
        return _GuiOpenVisus.VectorInt_rend(self)

    def clear(self):
        return _GuiOpenVisus.VectorInt_clear(self)

    def get_allocator(self):
        return _GuiOpenVisus.VectorInt_get_allocator(self)

    def pop_back(self):
        return _GuiOpenVisus.VectorInt_pop_back(self)

    def erase(self, *args):
        return _GuiOpenVisus.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _GuiOpenVisus.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GuiOpenVisus.VectorInt_push_back(self, x)

    def front(self):
        return _GuiOpenVisus.VectorInt_front(self)

    def back(self):
        return _GuiOpenVisus.VectorInt_back(self)

    def assign(self, n, x):
        return _GuiOpenVisus.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _GuiOpenVisus.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _GuiOpenVisus.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _GuiOpenVisus.VectorInt_reserve(self, n)

    def capacity(self):
        return _GuiOpenVisus.VectorInt_capacity(self)
    __swig_destroy__ = _GuiOpenVisus.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _GuiOpenVisus.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GuiOpenVisus.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GuiOpenVisus.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _GuiOpenVisus.VectorDouble___bool__(self)

    def __len__(self):
        return _GuiOpenVisus.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _GuiOpenVisus.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GuiOpenVisus.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GuiOpenVisus.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GuiOpenVisus.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GuiOpenVisus.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GuiOpenVisus.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _GuiOpenVisus.VectorDouble_pop(self)

    def append(self, x):
        return _GuiOpenVisus.VectorDouble_append(self, x)

    def empty(self):
        return _GuiOpenVisus.VectorDouble_empty(self)

    def size(self):
        return _GuiOpenVisus.VectorDouble_size(self)

    def swap(self, v):
        return _GuiOpenVisus.VectorDouble_swap(self, v)

    def begin(self):
        return _GuiOpenVisus.VectorDouble_begin(self)

    def end(self):
        return _GuiOpenVisus.VectorDouble_end(self)

    def rbegin(self):
        return _GuiOpenVisus.VectorDouble_rbegin(self)

    def rend(self):
        return _GuiOpenVisus.VectorDouble_rend(self)

    def clear(self):
        return _GuiOpenVisus.VectorDouble_clear(self)

    def get_allocator(self):
        return _GuiOpenVisus.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _GuiOpenVisus.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _GuiOpenVisus.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _GuiOpenVisus.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GuiOpenVisus.VectorDouble_push_back(self, x)

    def front(self):
        return _GuiOpenVisus.VectorDouble_front(self)

    def back(self):
        return _GuiOpenVisus.VectorDouble_back(self)

    def assign(self, n, x):
        return _GuiOpenVisus.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _GuiOpenVisus.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _GuiOpenVisus.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _GuiOpenVisus.VectorDouble_reserve(self, n)

    def capacity(self):
        return _GuiOpenVisus.VectorDouble_capacity(self)
    __swig_destroy__ = _GuiOpenVisus.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _GuiOpenVisus.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GuiOpenVisus.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GuiOpenVisus.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _GuiOpenVisus.VectorFloat___bool__(self)

    def __len__(self):
        return _GuiOpenVisus.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _GuiOpenVisus.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _GuiOpenVisus.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _GuiOpenVisus.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _GuiOpenVisus.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _GuiOpenVisus.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _GuiOpenVisus.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _GuiOpenVisus.VectorFloat_pop(self)

    def append(self, x):
        return _GuiOpenVisus.VectorFloat_append(self, x)

    def empty(self):
        return _GuiOpenVisus.VectorFloat_empty(self)

    def size(self):
        return _GuiOpenVisus.VectorFloat_size(self)

    def swap(self, v):
        return _GuiOpenVisus.VectorFloat_swap(self, v)

    def begin(self):
        return _GuiOpenVisus.VectorFloat_begin(self)

    def end(self):
        return _GuiOpenVisus.VectorFloat_end(self)

    def rbegin(self):
        return _GuiOpenVisus.VectorFloat_rbegin(self)

    def rend(self):
        return _GuiOpenVisus.VectorFloat_rend(self)

    def clear(self):
        return _GuiOpenVisus.VectorFloat_clear(self)

    def get_allocator(self):
        return _GuiOpenVisus.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _GuiOpenVisus.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _GuiOpenVisus.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _GuiOpenVisus.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _GuiOpenVisus.VectorFloat_push_back(self, x)

    def front(self):
        return _GuiOpenVisus.VectorFloat_front(self)

    def back(self):
        return _GuiOpenVisus.VectorFloat_back(self)

    def assign(self, n, x):
        return _GuiOpenVisus.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _GuiOpenVisus.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _GuiOpenVisus.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _GuiOpenVisus.VectorFloat_reserve(self, n)

    def capacity(self):
        return _GuiOpenVisus.VectorFloat_capacity(self)
    __swig_destroy__ = _GuiOpenVisus.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _GuiOpenVisus.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _GuiOpenVisus.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _GuiOpenVisus.MapStringString___nonzero__(self)

    def __bool__(self):
        return _GuiOpenVisus.MapStringString___bool__(self)

    def __len__(self):
        return _GuiOpenVisus.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _GuiOpenVisus.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _GuiOpenVisus.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _GuiOpenVisus.MapStringString_has_key(self, key)

    def keys(self):
        return _GuiOpenVisus.MapStringString_keys(self)

    def values(self):
        return _GuiOpenVisus.MapStringString_values(self)

    def items(self):
        return _GuiOpenVisus.MapStringString_items(self)

    def __contains__(self, key):
        return _GuiOpenVisus.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _GuiOpenVisus.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _GuiOpenVisus.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _GuiOpenVisus.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _GuiOpenVisus.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _GuiOpenVisus.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _GuiOpenVisus.MapStringString_empty(self)

    def size(self):
        return _GuiOpenVisus.MapStringString_size(self)

    def swap(self, v):
        return _GuiOpenVisus.MapStringString_swap(self, v)

    def begin(self):
        return _GuiOpenVisus.MapStringString_begin(self)

    def end(self):
        return _GuiOpenVisus.MapStringString_end(self)

    def rbegin(self):
        return _GuiOpenVisus.MapStringString_rbegin(self)

    def rend(self):
        return _GuiOpenVisus.MapStringString_rend(self)

    def clear(self):
        return _GuiOpenVisus.MapStringString_clear(self)

    def get_allocator(self):
        return _GuiOpenVisus.MapStringString_get_allocator(self)

    def count(self, x):
        return _GuiOpenVisus.MapStringString_count(self, x)

    def erase(self, *args):
        return _GuiOpenVisus.MapStringString_erase(self, *args)

    def find(self, x):
        return _GuiOpenVisus.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _GuiOpenVisus.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _GuiOpenVisus.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _GuiOpenVisus.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _GuiOpenVisus.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

import NonGuiOpenVisus
class GuiModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _GuiOpenVisus.GuiModule_bAttached_set
    __swig_getmethods__["bAttached"] = _GuiOpenVisus.GuiModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_GuiOpenVisus.GuiModule_bAttached_get, _GuiOpenVisus.GuiModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_GuiOpenVisus.GuiModule_attach)
    else:
        attach = _GuiOpenVisus.GuiModule_attach
    if _newclass:
        detach = staticmethod(_GuiOpenVisus.GuiModule_detach)
    else:
        detach = _GuiOpenVisus.GuiModule_detach
    if _newclass:
        createApplication = staticmethod(_GuiOpenVisus.GuiModule_createApplication)
    else:
        createApplication = _GuiOpenVisus.GuiModule_createApplication
    if _newclass:
        execApplication = staticmethod(_GuiOpenVisus.GuiModule_execApplication)
    else:
        execApplication = _GuiOpenVisus.GuiModule_execApplication
    if _newclass:
        destroyApplication = staticmethod(_GuiOpenVisus.GuiModule_destroyApplication)
    else:
        destroyApplication = _GuiOpenVisus.GuiModule_destroyApplication

    def __init__(self):
        this = _GuiOpenVisus.new_GuiModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_GuiModule
    __del__ = lambda self: None
GuiModule_swigregister = _GuiOpenVisus.GuiModule_swigregister
GuiModule_swigregister(GuiModule)
cvar = _GuiOpenVisus.cvar

def GuiModule_attach():
    return _GuiOpenVisus.GuiModule_attach()
GuiModule_attach = _GuiOpenVisus.GuiModule_attach

def GuiModule_detach():
    return _GuiOpenVisus.GuiModule_detach()
GuiModule_detach = _GuiOpenVisus.GuiModule_detach

def GuiModule_createApplication():
    return _GuiOpenVisus.GuiModule_createApplication()
GuiModule_createApplication = _GuiOpenVisus.GuiModule_createApplication

def GuiModule_execApplication():
    return _GuiOpenVisus.GuiModule_execApplication()
GuiModule_execApplication = _GuiOpenVisus.GuiModule_execApplication

def GuiModule_destroyApplication():
    return _GuiOpenVisus.GuiModule_destroyApplication()
GuiModule_destroyApplication = _GuiOpenVisus.GuiModule_destroyApplication


def cstring(*args):
    return _GuiOpenVisus.cstring(*args)
cstring = _GuiOpenVisus.cstring

def cdouble(*args):
    return _GuiOpenVisus.cdouble(*args)
cdouble = _GuiOpenVisus.cdouble

def cint(*args):
    return _GuiOpenVisus.cint(*args)
cint = _GuiOpenVisus.cint
class GLObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.GLObject_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.GLObject_getVisusClassName
    __swig_destroy__ = _GuiOpenVisus.delete_GLObject
    __del__ = lambda self: None

    def glRender(self, gl):
        return _GuiOpenVisus.GLObject_glRender(self, gl)

    def glGetRenderQueue(self):
        return _GuiOpenVisus.GLObject_glGetRenderQueue(self)

    def glSetRenderQueue(self, value):
        return _GuiOpenVisus.GLObject_glSetRenderQueue(self, value)

    def assign(self, other):
        return _GuiOpenVisus.GLObject_assign(self, other)

    def glMousePressEvent(self, map, evt):
        return _GuiOpenVisus.GLObject_glMousePressEvent(self, map, evt)

    def glMouseMoveEvent(self, map, evt):
        return _GuiOpenVisus.GLObject_glMouseMoveEvent(self, map, evt)

    def glMouseReleaseEvent(self, map, evt):
        return _GuiOpenVisus.GLObject_glMouseReleaseEvent(self, map, evt)

    def glWheelEvent(self, map, evt):
        return _GuiOpenVisus.GLObject_glWheelEvent(self, map, evt)
GLObject_swigregister = _GuiOpenVisus.GLObject_swigregister
GLObject_swigregister(GLObject)

def GLObject_getVisusClassName():
    return _GuiOpenVisus.GLObject_getVisusClassName()
GLObject_getVisusClassName = _GuiOpenVisus.GLObject_getVisusClassName

class GLBatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLBatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLBatch, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.GLBatch_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.GLBatch_getVisusClassName
    __swig_setmethods__["vertices"] = _GuiOpenVisus.GLBatch_vertices_set
    __swig_getmethods__["vertices"] = _GuiOpenVisus.GLBatch_vertices_get
    if _newclass:
        vertices = _swig_property(_GuiOpenVisus.GLBatch_vertices_get, _GuiOpenVisus.GLBatch_vertices_set)
    __swig_setmethods__["normals"] = _GuiOpenVisus.GLBatch_normals_set
    __swig_getmethods__["normals"] = _GuiOpenVisus.GLBatch_normals_get
    if _newclass:
        normals = _swig_property(_GuiOpenVisus.GLBatch_normals_get, _GuiOpenVisus.GLBatch_normals_set)
    __swig_setmethods__["colors"] = _GuiOpenVisus.GLBatch_colors_set
    __swig_getmethods__["colors"] = _GuiOpenVisus.GLBatch_colors_get
    if _newclass:
        colors = _swig_property(_GuiOpenVisus.GLBatch_colors_get, _GuiOpenVisus.GLBatch_colors_set)
    __swig_setmethods__["texcoords"] = _GuiOpenVisus.GLBatch_texcoords_set
    __swig_getmethods__["texcoords"] = _GuiOpenVisus.GLBatch_texcoords_get
    if _newclass:
        texcoords = _swig_property(_GuiOpenVisus.GLBatch_texcoords_get, _GuiOpenVisus.GLBatch_texcoords_set)

    def getNumberOfVertices(self):
        return _GuiOpenVisus.GLBatch_getNumberOfVertices(self)

    def __init__(self):
        this = _GuiOpenVisus.new_GLBatch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_GLBatch
    __del__ = lambda self: None
GLBatch_swigregister = _GuiOpenVisus.GLBatch_swigregister
GLBatch_swigregister(GLBatch)

def GLBatch_getVisusClassName():
    return _GuiOpenVisus.GLBatch_getVisusClassName()
GLBatch_getVisusClassName = _GuiOpenVisus.GLBatch_getVisusClassName

class GLMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLMesh, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.GLMesh_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.GLMesh_getVisusClassName

    def __init__(self):
        this = _GuiOpenVisus.new_GLMesh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def begin(self, primitive, vertices_per_batch=0):
        return _GuiOpenVisus.GLMesh_begin(self, primitive, vertices_per_batch)

    def end(self):
        return _GuiOpenVisus.GLMesh_end(self)

    def vertex(self, *args):
        return _GuiOpenVisus.GLMesh_vertex(self, *args)

    def normal(self, *args):
        return _GuiOpenVisus.GLMesh_normal(self, *args)

    def color(self, *args):
        return _GuiOpenVisus.GLMesh_color(self, *args)

    def texcoord2(self, *args):
        return _GuiOpenVisus.GLMesh_texcoord2(self, *args)

    def texcoord3(self, *args):
        return _GuiOpenVisus.GLMesh_texcoord3(self, *args)

    def hasColorAttribute(self):
        return _GuiOpenVisus.GLMesh_hasColorAttribute(self)
    if _newclass:
        WireBox = staticmethod(_GuiOpenVisus.GLMesh_WireBox)
    else:
        WireBox = _GuiOpenVisus.GLMesh_WireBox
    if _newclass:
        SolidBox = staticmethod(_GuiOpenVisus.GLMesh_SolidBox)
    else:
        SolidBox = _GuiOpenVisus.GLMesh_SolidBox
    if _newclass:
        WireCircle = staticmethod(_GuiOpenVisus.GLMesh_WireCircle)
    else:
        WireCircle = _GuiOpenVisus.GLMesh_WireCircle
    if _newclass:
        SolidCircle = staticmethod(_GuiOpenVisus.GLMesh_SolidCircle)
    else:
        SolidCircle = _GuiOpenVisus.GLMesh_SolidCircle
    if _newclass:
        SolidSphere = staticmethod(_GuiOpenVisus.GLMesh_SolidSphere)
    else:
        SolidSphere = _GuiOpenVisus.GLMesh_SolidSphere
    if _newclass:
        ColoredAxis = staticmethod(_GuiOpenVisus.GLMesh_ColoredAxis)
    else:
        ColoredAxis = _GuiOpenVisus.GLMesh_ColoredAxis
    if _newclass:
        ViewDependentUnitVolume = staticmethod(_GuiOpenVisus.GLMesh_ViewDependentUnitVolume)
    else:
        ViewDependentUnitVolume = _GuiOpenVisus.GLMesh_ViewDependentUnitVolume
    if _newclass:
        AxisAlignedUnitVolume = staticmethod(_GuiOpenVisus.GLMesh_AxisAlignedUnitVolume)
    else:
        AxisAlignedUnitVolume = _GuiOpenVisus.GLMesh_AxisAlignedUnitVolume
    __swig_destroy__ = _GuiOpenVisus.delete_GLMesh
    __del__ = lambda self: None
GLMesh_swigregister = _GuiOpenVisus.GLMesh_swigregister
GLMesh_swigregister(GLMesh)

def GLMesh_getVisusClassName():
    return _GuiOpenVisus.GLMesh_getVisusClassName()
GLMesh_getVisusClassName = _GuiOpenVisus.GLMesh_getVisusClassName

def GLMesh_WireBox(box):
    return _GuiOpenVisus.GLMesh_WireBox(box)
GLMesh_WireBox = _GuiOpenVisus.GLMesh_WireBox

def GLMesh_SolidBox(box, bNormal=True):
    return _GuiOpenVisus.GLMesh_SolidBox(box, bNormal)
GLMesh_SolidBox = _GuiOpenVisus.GLMesh_SolidBox

def GLMesh_WireCircle(N=32):
    return _GuiOpenVisus.GLMesh_WireCircle(N)
GLMesh_WireCircle = _GuiOpenVisus.GLMesh_WireCircle

def GLMesh_SolidCircle(N=32):
    return _GuiOpenVisus.GLMesh_SolidCircle(N)
GLMesh_SolidCircle = _GuiOpenVisus.GLMesh_SolidCircle

def GLMesh_SolidSphere(N=32):
    return _GuiOpenVisus.GLMesh_SolidSphere(N)
GLMesh_SolidSphere = _GuiOpenVisus.GLMesh_SolidSphere

def GLMesh_ColoredAxis(box):
    return _GuiOpenVisus.GLMesh_ColoredAxis(box)
GLMesh_ColoredAxis = _GuiOpenVisus.GLMesh_ColoredAxis

def GLMesh_ViewDependentUnitVolume(frustum, nslices):
    return _GuiOpenVisus.GLMesh_ViewDependentUnitVolume(frustum, nslices)
GLMesh_ViewDependentUnitVolume = _GuiOpenVisus.GLMesh_ViewDependentUnitVolume

def GLMesh_AxisAlignedUnitVolume(*args):
    return _GuiOpenVisus.GLMesh_AxisAlignedUnitVolume(*args)
GLMesh_AxisAlignedUnitVolume = _GuiOpenVisus.GLMesh_AxisAlignedUnitVolume

class GLModelview(GLObject):
    __swig_setmethods__ = {}
    for _s in [GLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLModelview, name, value)
    __swig_getmethods__ = {}
    for _s in [GLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLModelview, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.GLModelview_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.GLModelview_getVisusClassName
    __swig_setmethods__["T"] = _GuiOpenVisus.GLModelview_T_set
    __swig_getmethods__["T"] = _GuiOpenVisus.GLModelview_T_get
    if _newclass:
        T = _swig_property(_GuiOpenVisus.GLModelview_T_get, _GuiOpenVisus.GLModelview_T_set)

    def __init__(self, *args):
        this = _GuiOpenVisus.new_GLModelview(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_GLModelview
    __del__ = lambda self: None

    def glRender(self, gl):
        return _GuiOpenVisus.GLModelview_glRender(self, gl)
GLModelview_swigregister = _GuiOpenVisus.GLModelview_swigregister
GLModelview_swigregister(GLModelview)

def GLModelview_getVisusClassName():
    return _GuiOpenVisus.GLModelview_getVisusClassName()
GLModelview_getVisusClassName = _GuiOpenVisus.GLModelview_getVisusClassName

class GLPhongObject(GLObject):
    __swig_setmethods__ = {}
    for _s in [GLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLPhongObject, name, value)
    __swig_getmethods__ = {}
    for _s in [GLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLPhongObject, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.GLPhongObject_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.GLPhongObject_getVisusClassName
    __swig_setmethods__["line_width"] = _GuiOpenVisus.GLPhongObject_line_width_set
    __swig_getmethods__["line_width"] = _GuiOpenVisus.GLPhongObject_line_width_get
    if _newclass:
        line_width = _swig_property(_GuiOpenVisus.GLPhongObject_line_width_get, _GuiOpenVisus.GLPhongObject_line_width_set)
    __swig_setmethods__["color"] = _GuiOpenVisus.GLPhongObject_color_set
    __swig_getmethods__["color"] = _GuiOpenVisus.GLPhongObject_color_get
    if _newclass:
        color = _swig_property(_GuiOpenVisus.GLPhongObject_color_get, _GuiOpenVisus.GLPhongObject_color_set)
    __swig_setmethods__["texture"] = _GuiOpenVisus.GLPhongObject_texture_set
    __swig_getmethods__["texture"] = _GuiOpenVisus.GLPhongObject_texture_get
    if _newclass:
        texture = _swig_property(_GuiOpenVisus.GLPhongObject_texture_get, _GuiOpenVisus.GLPhongObject_texture_set)
    __swig_setmethods__["mesh"] = _GuiOpenVisus.GLPhongObject_mesh_set
    __swig_getmethods__["mesh"] = _GuiOpenVisus.GLPhongObject_mesh_get
    if _newclass:
        mesh = _swig_property(_GuiOpenVisus.GLPhongObject_mesh_get, _GuiOpenVisus.GLPhongObject_mesh_set)

    def __init__(self, *args):
        this = _GuiOpenVisus.new_GLPhongObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_GLPhongObject
    __del__ = lambda self: None

    def glRender(self, gl):
        return _GuiOpenVisus.GLPhongObject_glRender(self, gl)
GLPhongObject_swigregister = _GuiOpenVisus.GLPhongObject_swigregister
GLPhongObject_swigregister(GLPhongObject)

def GLPhongObject_getVisusClassName():
    return _GuiOpenVisus.GLPhongObject_getVisusClassName()
GLPhongObject_getVisusClassName = _GuiOpenVisus.GLPhongObject_getVisusClassName

class GLSharedContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLSharedContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLSharedContext, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_GuiOpenVisus.GLSharedContext_getSingleton)
    else:
        getSingleton = _GuiOpenVisus.GLSharedContext_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_GuiOpenVisus.GLSharedContext_allocSingleton)
    else:
        allocSingleton = _GuiOpenVisus.GLSharedContext_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_GuiOpenVisus.GLSharedContext_releaseSingleton)
    else:
        releaseSingleton = _GuiOpenVisus.GLSharedContext_releaseSingleton
    __swig_destroy__ = _GuiOpenVisus.delete_GLSharedContext
    __del__ = lambda self: None

    def makeCurrent(self):
        return _GuiOpenVisus.GLSharedContext_makeCurrent(self)

    def doneCurrent(self):
        return _GuiOpenVisus.GLSharedContext_doneCurrent(self)
GLSharedContext_swigregister = _GuiOpenVisus.GLSharedContext_swigregister
GLSharedContext_swigregister(GLSharedContext)

def GLSharedContext_getSingleton():
    return _GuiOpenVisus.GLSharedContext_getSingleton()
GLSharedContext_getSingleton = _GuiOpenVisus.GLSharedContext_getSingleton

def GLSharedContext_allocSingleton():
    return _GuiOpenVisus.GLSharedContext_allocSingleton()
GLSharedContext_allocSingleton = _GuiOpenVisus.GLSharedContext_allocSingleton

def GLSharedContext_releaseSingleton():
    return _GuiOpenVisus.GLSharedContext_releaseSingleton()
GLSharedContext_releaseSingleton = _GuiOpenVisus.GLSharedContext_releaseSingleton

class GLNeedContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLNeedContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLNeedContext, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.GLNeedContext_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.GLNeedContext_getVisusClassName

    def __init__(self):
        this = _GuiOpenVisus.new_GLNeedContext()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_GLNeedContext
    __del__ = lambda self: None

    def __structure_derefence_op__(self):
        return _GuiOpenVisus.GLNeedContext___structure_derefence_op__(self)
GLNeedContext_swigregister = _GuiOpenVisus.GLNeedContext_swigregister
GLNeedContext_swigregister(GLNeedContext)

def GLNeedContext_getVisusClassName():
    return _GuiOpenVisus.GLNeedContext_getVisusClassName()
GLNeedContext_getVisusClassName = _GuiOpenVisus.GLNeedContext_getVisusClassName

class GLDoWithContext(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLDoWithContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLDoWithContext, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_GuiOpenVisus.GLDoWithContext_getSingleton)
    else:
        getSingleton = _GuiOpenVisus.GLDoWithContext_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_GuiOpenVisus.GLDoWithContext_allocSingleton)
    else:
        allocSingleton = _GuiOpenVisus.GLDoWithContext_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_GuiOpenVisus.GLDoWithContext_releaseSingleton)
    else:
        releaseSingleton = _GuiOpenVisus.GLDoWithContext_releaseSingleton

    def push_back(self, fn):
        return _GuiOpenVisus.GLDoWithContext_push_back(self, fn)
    __swig_destroy__ = _GuiOpenVisus.delete_GLDoWithContext
    __del__ = lambda self: None
GLDoWithContext_swigregister = _GuiOpenVisus.GLDoWithContext_swigregister
GLDoWithContext_swigregister(GLDoWithContext)

def GLDoWithContext_getSingleton():
    return _GuiOpenVisus.GLDoWithContext_getSingleton()
GLDoWithContext_getSingleton = _GuiOpenVisus.GLDoWithContext_getSingleton

def GLDoWithContext_allocSingleton():
    return _GuiOpenVisus.GLDoWithContext_allocSingleton()
GLDoWithContext_allocSingleton = _GuiOpenVisus.GLDoWithContext_allocSingleton

def GLDoWithContext_releaseSingleton():
    return _GuiOpenVisus.GLDoWithContext_releaseSingleton()
GLDoWithContext_releaseSingleton = _GuiOpenVisus.GLDoWithContext_releaseSingleton

class GLCanvas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLCanvas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLCanvas, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.GLCanvas_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.GLCanvas_getVisusClassName

    def __init__(self):
        this = _GuiOpenVisus.new_GLCanvas()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_GLCanvas
    __del__ = lambda self: None

    def flushGLErrors(self, bVerbose=False):
        return _GuiOpenVisus.GLCanvas_flushGLErrors(self, bVerbose)

    def glRenderEvent(self, gl):
        return _GuiOpenVisus.GLCanvas_glRenderEvent(self, gl)

    def glResizeEvent(self, evt):
        return _GuiOpenVisus.GLCanvas_glResizeEvent(self, evt)

    def glKeyPressEvent(self, evt):
        return _GuiOpenVisus.GLCanvas_glKeyPressEvent(self, evt)

    def glMousePressEvent(self, evt):
        return _GuiOpenVisus.GLCanvas_glMousePressEvent(self, evt)

    def glMouseMoveEvent(self, evt):
        return _GuiOpenVisus.GLCanvas_glMouseMoveEvent(self, evt)

    def glMouseReleaseEvent(self, evt):
        return _GuiOpenVisus.GLCanvas_glMouseReleaseEvent(self, evt)

    def glWheelEvent(self, evt):
        return _GuiOpenVisus.GLCanvas_glWheelEvent(self, evt)

    def initializeGL(self):
        return _GuiOpenVisus.GLCanvas_initializeGL(self)

    def postRedisplay(self, fps=30):
        return _GuiOpenVisus.GLCanvas_postRedisplay(self, fps)

    def glClearColor(self, *args):
        return _GuiOpenVisus.GLCanvas_glClearColor(self, *args)

    def getShader(self):
        return _GuiOpenVisus.GLCanvas_getShader(self)

    def setShader(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setShader(self, value, bForce)

    def setUniform(self, *args):
        return _GuiOpenVisus.GLCanvas_setUniform(self, *args)

    def setUniformColor(self, uniform, color):
        return _GuiOpenVisus.GLCanvas_setUniformColor(self, uniform, color)

    def setUniformPlane(self, uniform, h):
        return _GuiOpenVisus.GLCanvas_setUniformPlane(self, uniform, h)

    def setUniformMatrix(self, *args):
        return _GuiOpenVisus.GLCanvas_setUniformMatrix(self, *args)

    def pushClippingBox(self, *args):
        return _GuiOpenVisus.GLCanvas_pushClippingBox(self, *args)

    def popClippingBox(self):
        return _GuiOpenVisus.GLCanvas_popClippingBox(self)

    def hasClippingBox(self):
        return _GuiOpenVisus.GLCanvas_hasClippingBox(self)

    def setUniformMaterial(self, shader, material):
        return _GuiOpenVisus.GLCanvas_setUniformMaterial(self, shader, material)

    def setUniformLight(self, shader, light_pos):
        return _GuiOpenVisus.GLCanvas_setUniformLight(self, shader, light_pos)

    def getViewport(self):
        return _GuiOpenVisus.GLCanvas_getViewport(self)

    def setViewport(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setViewport(self, value, bForce)

    def pushViewport(self):
        return _GuiOpenVisus.GLCanvas_pushViewport(self)

    def popViewport(self):
        return _GuiOpenVisus.GLCanvas_popViewport(self)

    def getProjection(self):
        return _GuiOpenVisus.GLCanvas_getProjection(self)

    def setProjection(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setProjection(self, value, bForce)

    def pushProjection(self):
        return _GuiOpenVisus.GLCanvas_pushProjection(self)

    def popProjection(self):
        return _GuiOpenVisus.GLCanvas_popProjection(self)

    def loadProjection(self, value):
        return _GuiOpenVisus.GLCanvas_loadProjection(self, value)

    def multProjection(self, value):
        return _GuiOpenVisus.GLCanvas_multProjection(self, value)

    def getModelview(self):
        return _GuiOpenVisus.GLCanvas_getModelview(self)

    def setModelview(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setModelview(self, value, bForce)

    def loadModelview(self, value):
        return _GuiOpenVisus.GLCanvas_loadModelview(self, value)

    def multModelview(self, value):
        return _GuiOpenVisus.GLCanvas_multModelview(self, value)

    def pushModelview(self):
        return _GuiOpenVisus.GLCanvas_pushModelview(self)

    def popModelview(self):
        return _GuiOpenVisus.GLCanvas_popModelview(self)

    def getFrustum(self):
        return _GuiOpenVisus.GLCanvas_getFrustum(self)

    def setFrustum(self, value):
        return _GuiOpenVisus.GLCanvas_setFrustum(self, value)

    def pushFrustum(self):
        return _GuiOpenVisus.GLCanvas_pushFrustum(self)

    def popFrustum(self):
        return _GuiOpenVisus.GLCanvas_popFrustum(self)

    def setHud(self):
        return _GuiOpenVisus.GLCanvas_setHud(self)

    def getPointSize(self):
        return _GuiOpenVisus.GLCanvas_getPointSize(self)

    def setPointSize(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setPointSize(self, value, bForce)

    def pushPointSize(self, value):
        return _GuiOpenVisus.GLCanvas_pushPointSize(self, value)

    def popPointSize(self):
        return _GuiOpenVisus.GLCanvas_popPointSize(self)

    def getLineWidth(self):
        return _GuiOpenVisus.GLCanvas_getLineWidth(self)

    def setLineWidth(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setLineWidth(self, value, bForce)

    def pushLineWidth(self, value):
        return _GuiOpenVisus.GLCanvas_pushLineWidth(self, value)

    def popLineWidth(self):
        return _GuiOpenVisus.GLCanvas_popLineWidth(self)

    def getBlend(self):
        return _GuiOpenVisus.GLCanvas_getBlend(self)

    def setBlend(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setBlend(self, value, bForce)

    def pushBlend(self, value):
        return _GuiOpenVisus.GLCanvas_pushBlend(self, value)

    def popBlend(self):
        return _GuiOpenVisus.GLCanvas_popBlend(self)

    def getDepthTest(self):
        return _GuiOpenVisus.GLCanvas_getDepthTest(self)

    def setDepthTest(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setDepthTest(self, value, bForce)

    def pushDepthTest(self, value):
        return _GuiOpenVisus.GLCanvas_pushDepthTest(self, value)

    def popDepthTest(self):
        return _GuiOpenVisus.GLCanvas_popDepthTest(self)

    def getDepthMask(self):
        return _GuiOpenVisus.GLCanvas_getDepthMask(self)

    def setDepthMask(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setDepthMask(self, value, bForce)

    def pushDepthMask(self, value):
        return _GuiOpenVisus.GLCanvas_pushDepthMask(self, value)

    def popDepthMask(self):
        return _GuiOpenVisus.GLCanvas_popDepthMask(self)

    def getDepthFunc(self):
        return _GuiOpenVisus.GLCanvas_getDepthFunc(self)

    def setDepthFunc(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setDepthFunc(self, value, bForce)

    def pushDepthFunc(self, value):
        return _GuiOpenVisus.GLCanvas_pushDepthFunc(self, value)

    def popDepthFunc(self):
        return _GuiOpenVisus.GLCanvas_popDepthFunc(self)

    def getCullFace(self):
        return _GuiOpenVisus.GLCanvas_getCullFace(self)

    def setCullFace(self, value, bForce=False):
        return _GuiOpenVisus.GLCanvas_setCullFace(self, value, bForce)

    def pushCullFace(self, value):
        return _GuiOpenVisus.GLCanvas_pushCullFace(self, value)

    def popCullFace(self):
        return _GuiOpenVisus.GLCanvas_popCullFace(self)

    def setTextureInSlot(self, slot, sampler, texture):
        return _GuiOpenVisus.GLCanvas_setTextureInSlot(self, slot, sampler, texture)

    def setTexture(self, sampler, value):
        return _GuiOpenVisus.GLCanvas_setTexture(self, sampler, value)

    def glRenderMesh(self, mesh):
        return _GuiOpenVisus.GLCanvas_glRenderMesh(self, mesh)

    def glRenderScreenText(self, x, y, s, color):
        return _GuiOpenVisus.GLCanvas_glRenderScreenText(self, x, y, s, color)

    def paintGL(self):
        return _GuiOpenVisus.GLCanvas_paintGL(self)
GLCanvas_swigregister = _GuiOpenVisus.GLCanvas_swigregister
GLCanvas_swigregister(GLCanvas)

def GLCanvas_getVisusClassName():
    return _GuiOpenVisus.GLCanvas_getVisusClassName()
GLCanvas_getVisusClassName = _GuiOpenVisus.GLCanvas_getVisusClassName


def ToCppQtWidget(obj):
    return _GuiOpenVisus.ToCppQtWidget(obj)
ToCppQtWidget = _GuiOpenVisus.ToCppQtWidget
class GuiNodesModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuiNodesModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GuiNodesModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _GuiOpenVisus.GuiNodesModule_bAttached_set
    __swig_getmethods__["bAttached"] = _GuiOpenVisus.GuiNodesModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_GuiOpenVisus.GuiNodesModule_bAttached_get, _GuiOpenVisus.GuiNodesModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_GuiOpenVisus.GuiNodesModule_attach)
    else:
        attach = _GuiOpenVisus.GuiNodesModule_attach
    if _newclass:
        detach = staticmethod(_GuiOpenVisus.GuiNodesModule_detach)
    else:
        detach = _GuiOpenVisus.GuiNodesModule_detach

    def __init__(self):
        this = _GuiOpenVisus.new_GuiNodesModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_GuiNodesModule
    __del__ = lambda self: None
GuiNodesModule_swigregister = _GuiOpenVisus.GuiNodesModule_swigregister
GuiNodesModule_swigregister(GuiNodesModule)

def GuiNodesModule_attach():
    return _GuiOpenVisus.GuiNodesModule_attach()
GuiNodesModule_attach = _GuiOpenVisus.GuiNodesModule_attach

def GuiNodesModule_detach():
    return _GuiOpenVisus.GuiNodesModule_detach()
GuiNodesModule_detach = _GuiOpenVisus.GuiNodesModule_detach

class PythonNode(NonGuiOpenVisus.Node, GLObject):
    __swig_setmethods__ = {}
    for _s in [NonGuiOpenVisus.Node, GLObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PythonNode, name, value)
    __swig_getmethods__ = {}
    for _s in [NonGuiOpenVisus.Node, GLObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PythonNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node_bounds"] = _GuiOpenVisus.PythonNode_node_bounds_set
    __swig_getmethods__["node_bounds"] = _GuiOpenVisus.PythonNode_node_bounds_get
    if _newclass:
        node_bounds = _swig_property(_GuiOpenVisus.PythonNode_node_bounds_get, _GuiOpenVisus.PythonNode_node_bounds_set)

    def __init__(self):
        if self.__class__ == PythonNode:
            _self = None
        else:
            _self = self
        this = _GuiOpenVisus.new_PythonNode(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_PythonNode
    __del__ = lambda self: None

    def getOsDependentTypeName(self):
        return _GuiOpenVisus.PythonNode_getOsDependentTypeName(self)

    def processInput(self):
        return _GuiOpenVisus.PythonNode_processInput(self)

    def getNodeBounds(self):
        return _GuiOpenVisus.PythonNode_getNodeBounds(self)

    def setNodeBounds(self, value):
        return _GuiOpenVisus.PythonNode_setNodeBounds(self, value)

    def glRender(self, gl):
        return _GuiOpenVisus.PythonNode_glRender(self, gl)
    def __disown__(self):
        self.this.disown()
        _GuiOpenVisus.disown_PythonNode(self)
        return weakref_proxy(self)
PythonNode_swigregister = _GuiOpenVisus.PythonNode_swigregister
PythonNode_swigregister(PythonNode)

class AppKitModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AppKitModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AppKitModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _GuiOpenVisus.AppKitModule_bAttached_set
    __swig_getmethods__["bAttached"] = _GuiOpenVisus.AppKitModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_GuiOpenVisus.AppKitModule_bAttached_get, _GuiOpenVisus.AppKitModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_GuiOpenVisus.AppKitModule_attach)
    else:
        attach = _GuiOpenVisus.AppKitModule_attach
    if _newclass:
        detach = staticmethod(_GuiOpenVisus.AppKitModule_detach)
    else:
        detach = _GuiOpenVisus.AppKitModule_detach

    def __init__(self):
        this = _GuiOpenVisus.new_AppKitModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_AppKitModule
    __del__ = lambda self: None
AppKitModule_swigregister = _GuiOpenVisus.AppKitModule_swigregister
AppKitModule_swigregister(AppKitModule)

def AppKitModule_attach():
    return _GuiOpenVisus.AppKitModule_attach()
AppKitModule_attach = _GuiOpenVisus.AppKitModule_attach

def AppKitModule_detach():
    return _GuiOpenVisus.AppKitModule_detach()
AppKitModule_detach = _GuiOpenVisus.AppKitModule_detach

class ViewerPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewerPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewerPlugin, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.ViewerPlugin_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.ViewerPlugin_getVisusClassName
    __swig_setmethods__["viewer"] = _GuiOpenVisus.ViewerPlugin_viewer_set
    __swig_getmethods__["viewer"] = _GuiOpenVisus.ViewerPlugin_viewer_get
    if _newclass:
        viewer = _swig_property(_GuiOpenVisus.ViewerPlugin_viewer_get, _GuiOpenVisus.ViewerPlugin_viewer_set)
    __swig_destroy__ = _GuiOpenVisus.delete_ViewerPlugin
    __del__ = lambda self: None

    def getPluginName(self):
        return _GuiOpenVisus.ViewerPlugin_getPluginName(self)
ViewerPlugin_swigregister = _GuiOpenVisus.ViewerPlugin_swigregister
ViewerPlugin_swigregister(ViewerPlugin)

def ViewerPlugin_getVisusClassName():
    return _GuiOpenVisus.ViewerPlugin_getVisusClassName()
ViewerPlugin_getVisusClassName = _GuiOpenVisus.ViewerPlugin_getVisusClassName

class Viewer(NonGuiOpenVisus.DataflowListener):
    __swig_setmethods__ = {}
    for _s in [NonGuiOpenVisus.DataflowListener]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Viewer, name, value)
    __swig_getmethods__ = {}
    for _s in [NonGuiOpenVisus.DataflowListener]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Viewer, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_GuiOpenVisus.Viewer_getVisusClassName)
    else:
        getVisusClassName = _GuiOpenVisus.Viewer_getVisusClassName

    def __init__(self, *args):
        this = _GuiOpenVisus.new_Viewer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GuiOpenVisus.delete_Viewer
    __del__ = lambda self: None

    def showLicences(self):
        return _GuiOpenVisus.Viewer_showLicences(self)

    def getDataflow(self):
        return _GuiOpenVisus.Viewer_getDataflow(self)

    def getNodes(self):
        return _GuiOpenVisus.Viewer_getNodes(self)

    def findNodeByUUID(self, uuid):
        return _GuiOpenVisus.Viewer_findNodeByUUID(self, uuid)

    def findNodeByName(self, name):
        return _GuiOpenVisus.Viewer_findNodeByName(self, name)

    def dropProcessing(self):
        return _GuiOpenVisus.Viewer_dropProcessing(self)

    def getRoot(self):
        return _GuiOpenVisus.Viewer_getRoot(self)

    def getSelection(self):
        return _GuiOpenVisus.Viewer_getSelection(self)

    def setSelection(self, node):
        return _GuiOpenVisus.Viewer_setSelection(self, node)

    def dropSelection(self):
        return _GuiOpenVisus.Viewer_dropSelection(self)

    def getAutoRefresh(self):
        return _GuiOpenVisus.Viewer_getAutoRefresh(self)

    def setAutoRefresh(self, value):
        return _GuiOpenVisus.Viewer_setAutoRefresh(self, value)

    def beginFreeTransform(self, *args):
        return _GuiOpenVisus.Viewer_beginFreeTransform(self, *args)

    def endFreeTransform(self):
        return _GuiOpenVisus.Viewer_endFreeTransform(self)

    def getNodeBoundsInAnotherSpace(self, dst, src):
        return _GuiOpenVisus.Viewer_getNodeBoundsInAnotherSpace(self, dst, src)

    def getQueryBoundsInDatasetSpace(self, query_node):
        return _GuiOpenVisus.Viewer_getQueryBoundsInDatasetSpace(self, query_node)

    def computeNodeFrustum(self, frustum, node):
        return _GuiOpenVisus.Viewer_computeNodeFrustum(self, frustum, node)

    def New(self):
        return _GuiOpenVisus.Viewer_New(self)

    def setName(self, node, value):
        return _GuiOpenVisus.Viewer_setName(self, node, value)

    def setHidden(self, node, value):
        return _GuiOpenVisus.Viewer_setHidden(self, node, value)

    def addNode(self, *args):
        return _GuiOpenVisus.Viewer_addNode(self, *args)

    def removeNode(self, node):
        return _GuiOpenVisus.Viewer_removeNode(self, node)

    def moveNode(self, dst, src, index=-1):
        return _GuiOpenVisus.Viewer_moveNode(self, dst, src, index)

    def connectPorts(self, *args):
        return _GuiOpenVisus.Viewer_connectPorts(self, *args)

    def disconnectPorts(self, arg2, oport_name, iport_name, to):
        return _GuiOpenVisus.Viewer_disconnectPorts(self, arg2, oport_name, iport_name, to)

    def autoConnectPorts(self):
        return _GuiOpenVisus.Viewer_autoConnectPorts(self)

    def fastRendering(self):
        return _GuiOpenVisus.Viewer_fastRendering(self)

    def setFastRendering(self, value):
        return _GuiOpenVisus.Viewer_setFastRendering(self, value)

    def reloadVisusConfig(self, bChooseAFile=False):
        return _GuiOpenVisus.Viewer_reloadVisusConfig(self, bChooseAFile)

    def setPreferences(self, value):
        return _GuiOpenVisus.Viewer_setPreferences(self, value)

    def openFile(self, url, parent=None, bShowUrlDialogIfNeeded=False):
        return _GuiOpenVisus.Viewer_openFile(self, url, parent, bShowUrlDialogIfNeeded)

    def saveFile(self, filename, bSaveHistory=False, bShowDialogs=True):
        return _GuiOpenVisus.Viewer_saveFile(self, filename, bSaveHistory, bShowDialogs)

    def openScene(self, url, parent=None, bShowUrlDialogIfNeeded=False):
        return _GuiOpenVisus.Viewer_openScene(self, url, parent, bShowUrlDialogIfNeeded)

    def saveScene(self, filename, bShowDialogs=True):
        return _GuiOpenVisus.Viewer_saveScene(self, filename, bShowDialogs)

    def takeSnapshot(self, *args):
        return _GuiOpenVisus.Viewer_takeSnapshot(self, *args)

    def editNode(self, node=None):
        return _GuiOpenVisus.Viewer_editNode(self, node)

    def setDataflow(self, dataflow):
        return _GuiOpenVisus.Viewer_setDataflow(self, dataflow)

    def getGLCamera(self):
        return _GuiOpenVisus.Viewer_getGLCamera(self)

    def refreshData(self, node=None):
        return _GuiOpenVisus.Viewer_refreshData(self, node)

    def addGLCameraNode(self, glcamera, parent=None):
        return _GuiOpenVisus.Viewer_addGLCameraNode(self, glcamera, parent)

    def guessGLCameraPosition(self, ref_=-1):
        return _GuiOpenVisus.Viewer_guessGLCameraPosition(self, ref_)

    def mirrorGLCamera(self, ref=0):
        return _GuiOpenVisus.Viewer_mirrorGLCamera(self, ref)

    def addGroupNode(self, *args):
        return _GuiOpenVisus.Viewer_addGroupNode(self, *args)

    def addModelViewNode(self, parent, bInsert=False):
        return _GuiOpenVisus.Viewer_addModelViewNode(self, parent, bInsert)

    def addDatasetNode(self, dataset, parent=None):
        return _GuiOpenVisus.Viewer_addDatasetNode(self, dataset, parent)

    def addQueryNode(self, *args):
        return _GuiOpenVisus.Viewer_addQueryNode(self, *args)

    def addKdQueryNode(self, *args):
        return _GuiOpenVisus.Viewer_addKdQueryNode(self, *args)

    def addIsoContourNode(self, parent, data_provider=None, isovalue=0.0):
        return _GuiOpenVisus.Viewer_addIsoContourNode(self, parent, data_provider, isovalue)

    def addRenderArrayNode(self, *args):
        return _GuiOpenVisus.Viewer_addRenderArrayNode(self, *args)

    def addKdRenderArrayNode(self, parent, data_provider=None):
        return _GuiOpenVisus.Viewer_addKdRenderArrayNode(self, parent, data_provider)

    def addScriptingNode(self, parent, data_provider=None):
        return _GuiOpenVisus.Viewer_addScriptingNode(self, parent, data_provider)

    def addCpuTransferFunctionNode(self, parent, data_provider=None):
        return _GuiOpenVisus.Viewer_addCpuTransferFunctionNode(self, parent, data_provider)

    def addPaletteNode(self, *args):
        return _GuiOpenVisus.Viewer_addPaletteNode(self, *args)

    def addStatisticsNode(self, parent, data_provider=None):
        return _GuiOpenVisus.Viewer_addStatisticsNode(self, parent, data_provider)

    def getWorldDimension(self):
        return _GuiOpenVisus.Viewer_getWorldDimension(self)

    def getWorldBoundingBox(self):
        return _GuiOpenVisus.Viewer_getWorldBoundingBox(self)

    def getNodeBounds(self, node, bRecursive=False):
        return _GuiOpenVisus.Viewer_getNodeBounds(self, node, bRecursive)

    def getGLCanvas(self):
        return _GuiOpenVisus.Viewer_getGLCanvas(self)

    def getTreeView(self):
        return _GuiOpenVisus.Viewer_getTreeView(self)

    def getFrameView(self):
        return _GuiOpenVisus.Viewer_getFrameView(self)

    def getLog(self):
        return _GuiOpenVisus.Viewer_getLog(self)

    def showNodeContextMenu(self, node):
        return _GuiOpenVisus.Viewer_showNodeContextMenu(self, node)

    def postRedisplay(self):
        return _GuiOpenVisus.Viewer_postRedisplay(self)

    def addDockWidget(self, *args):
        return _GuiOpenVisus.Viewer_addDockWidget(self, *args)

    def showPopupWidget(self, widget):
        return _GuiOpenVisus.Viewer_showPopupWidget(self, widget)

    def writeToObjectStream(self, ostream):
        return _GuiOpenVisus.Viewer_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, ostream):
        return _GuiOpenVisus.Viewer_readFromObjectStream(self, ostream)

    def addNetRcv(self, port):
        return _GuiOpenVisus.Viewer_addNetRcv(self, port)

    def addNetSnd(self, *args):
        return _GuiOpenVisus.Viewer_addNetSnd(self, *args)

    def getPlugins(self):
        return _GuiOpenVisus.Viewer_getPlugins(self)

    def postFlushMessages(self):
        return _GuiOpenVisus.Viewer_postFlushMessages(self)
Viewer_swigregister = _GuiOpenVisus.Viewer_swigregister
Viewer_swigregister(Viewer)

def Viewer_getVisusClassName():
    return _GuiOpenVisus.Viewer_getVisusClassName()
Viewer_getVisusClassName = _GuiOpenVisus.Viewer_getVisusClassName

# This file is compatible with both classic and new-style classes.


