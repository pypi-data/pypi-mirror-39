# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_NonGuiOpenVisus')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_NonGuiOpenVisus')
    _NonGuiOpenVisus = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NonGuiOpenVisus', [dirname(__file__)])
        except ImportError:
            import _NonGuiOpenVisus
            return _NonGuiOpenVisus
        try:
            _mod = imp.load_module('_NonGuiOpenVisus', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _NonGuiOpenVisus = swig_import_helper()
    del swig_import_helper
else:
    import _NonGuiOpenVisus
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _NonGuiOpenVisus.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _NonGuiOpenVisus.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _NonGuiOpenVisus.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _NonGuiOpenVisus.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _NonGuiOpenVisus.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _NonGuiOpenVisus.SwigPyIterator_equal(self, x)

    def copy(self):
        return _NonGuiOpenVisus.SwigPyIterator_copy(self)

    def next(self):
        return _NonGuiOpenVisus.SwigPyIterator_next(self)

    def __next__(self):
        return _NonGuiOpenVisus.SwigPyIterator___next__(self)

    def previous(self):
        return _NonGuiOpenVisus.SwigPyIterator_previous(self)

    def advance(self, n):
        return _NonGuiOpenVisus.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _NonGuiOpenVisus.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _NonGuiOpenVisus.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _NonGuiOpenVisus.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _NonGuiOpenVisus.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _NonGuiOpenVisus.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _NonGuiOpenVisus.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _NonGuiOpenVisus.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class PairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_PairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _NonGuiOpenVisus.PairDoubleDouble_first_set
    __swig_getmethods__["first"] = _NonGuiOpenVisus.PairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_NonGuiOpenVisus.PairDoubleDouble_first_get, _NonGuiOpenVisus.PairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _NonGuiOpenVisus.PairDoubleDouble_second_set
    __swig_getmethods__["second"] = _NonGuiOpenVisus.PairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_NonGuiOpenVisus.PairDoubleDouble_second_get, _NonGuiOpenVisus.PairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _NonGuiOpenVisus.delete_PairDoubleDouble
    __del__ = lambda self: None
PairDoubleDouble_swigregister = _NonGuiOpenVisus.PairDoubleDouble_swigregister
PairDoubleDouble_swigregister(PairDoubleDouble)

class PairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_PairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _NonGuiOpenVisus.PairIntDouble_first_set
    __swig_getmethods__["first"] = _NonGuiOpenVisus.PairIntDouble_first_get
    if _newclass:
        first = _swig_property(_NonGuiOpenVisus.PairIntDouble_first_get, _NonGuiOpenVisus.PairIntDouble_first_set)
    __swig_setmethods__["second"] = _NonGuiOpenVisus.PairIntDouble_second_set
    __swig_getmethods__["second"] = _NonGuiOpenVisus.PairIntDouble_second_get
    if _newclass:
        second = _swig_property(_NonGuiOpenVisus.PairIntDouble_second_get, _NonGuiOpenVisus.PairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _NonGuiOpenVisus.delete_PairIntDouble
    __del__ = lambda self: None
PairIntDouble_swigregister = _NonGuiOpenVisus.PairIntDouble_swigregister
PairIntDouble_swigregister(PairIntDouble)

class VectorString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NonGuiOpenVisus.VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NonGuiOpenVisus.VectorString___nonzero__(self)

    def __bool__(self):
        return _NonGuiOpenVisus.VectorString___bool__(self)

    def __len__(self):
        return _NonGuiOpenVisus.VectorString___len__(self)

    def __getslice__(self, i, j):
        return _NonGuiOpenVisus.VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NonGuiOpenVisus.VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NonGuiOpenVisus.VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NonGuiOpenVisus.VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NonGuiOpenVisus.VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NonGuiOpenVisus.VectorString___setitem__(self, *args)

    def pop(self):
        return _NonGuiOpenVisus.VectorString_pop(self)

    def append(self, x):
        return _NonGuiOpenVisus.VectorString_append(self, x)

    def empty(self):
        return _NonGuiOpenVisus.VectorString_empty(self)

    def size(self):
        return _NonGuiOpenVisus.VectorString_size(self)

    def swap(self, v):
        return _NonGuiOpenVisus.VectorString_swap(self, v)

    def begin(self):
        return _NonGuiOpenVisus.VectorString_begin(self)

    def end(self):
        return _NonGuiOpenVisus.VectorString_end(self)

    def rbegin(self):
        return _NonGuiOpenVisus.VectorString_rbegin(self)

    def rend(self):
        return _NonGuiOpenVisus.VectorString_rend(self)

    def clear(self):
        return _NonGuiOpenVisus.VectorString_clear(self)

    def get_allocator(self):
        return _NonGuiOpenVisus.VectorString_get_allocator(self)

    def pop_back(self):
        return _NonGuiOpenVisus.VectorString_pop_back(self)

    def erase(self, *args):
        return _NonGuiOpenVisus.VectorString_erase(self, *args)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_VectorString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _NonGuiOpenVisus.VectorString_push_back(self, x)

    def front(self):
        return _NonGuiOpenVisus.VectorString_front(self)

    def back(self):
        return _NonGuiOpenVisus.VectorString_back(self)

    def assign(self, n, x):
        return _NonGuiOpenVisus.VectorString_assign(self, n, x)

    def resize(self, *args):
        return _NonGuiOpenVisus.VectorString_resize(self, *args)

    def insert(self, *args):
        return _NonGuiOpenVisus.VectorString_insert(self, *args)

    def reserve(self, n):
        return _NonGuiOpenVisus.VectorString_reserve(self, n)

    def capacity(self):
        return _NonGuiOpenVisus.VectorString_capacity(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_VectorString
    __del__ = lambda self: None
VectorString_swigregister = _NonGuiOpenVisus.VectorString_swigregister
VectorString_swigregister(VectorString)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NonGuiOpenVisus.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NonGuiOpenVisus.VectorInt___nonzero__(self)

    def __bool__(self):
        return _NonGuiOpenVisus.VectorInt___bool__(self)

    def __len__(self):
        return _NonGuiOpenVisus.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _NonGuiOpenVisus.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NonGuiOpenVisus.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NonGuiOpenVisus.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NonGuiOpenVisus.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NonGuiOpenVisus.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NonGuiOpenVisus.VectorInt___setitem__(self, *args)

    def pop(self):
        return _NonGuiOpenVisus.VectorInt_pop(self)

    def append(self, x):
        return _NonGuiOpenVisus.VectorInt_append(self, x)

    def empty(self):
        return _NonGuiOpenVisus.VectorInt_empty(self)

    def size(self):
        return _NonGuiOpenVisus.VectorInt_size(self)

    def swap(self, v):
        return _NonGuiOpenVisus.VectorInt_swap(self, v)

    def begin(self):
        return _NonGuiOpenVisus.VectorInt_begin(self)

    def end(self):
        return _NonGuiOpenVisus.VectorInt_end(self)

    def rbegin(self):
        return _NonGuiOpenVisus.VectorInt_rbegin(self)

    def rend(self):
        return _NonGuiOpenVisus.VectorInt_rend(self)

    def clear(self):
        return _NonGuiOpenVisus.VectorInt_clear(self)

    def get_allocator(self):
        return _NonGuiOpenVisus.VectorInt_get_allocator(self)

    def pop_back(self):
        return _NonGuiOpenVisus.VectorInt_pop_back(self)

    def erase(self, *args):
        return _NonGuiOpenVisus.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _NonGuiOpenVisus.VectorInt_push_back(self, x)

    def front(self):
        return _NonGuiOpenVisus.VectorInt_front(self)

    def back(self):
        return _NonGuiOpenVisus.VectorInt_back(self)

    def assign(self, n, x):
        return _NonGuiOpenVisus.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _NonGuiOpenVisus.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _NonGuiOpenVisus.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _NonGuiOpenVisus.VectorInt_reserve(self, n)

    def capacity(self):
        return _NonGuiOpenVisus.VectorInt_capacity(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _NonGuiOpenVisus.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NonGuiOpenVisus.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NonGuiOpenVisus.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _NonGuiOpenVisus.VectorDouble___bool__(self)

    def __len__(self):
        return _NonGuiOpenVisus.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _NonGuiOpenVisus.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NonGuiOpenVisus.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NonGuiOpenVisus.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NonGuiOpenVisus.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NonGuiOpenVisus.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NonGuiOpenVisus.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _NonGuiOpenVisus.VectorDouble_pop(self)

    def append(self, x):
        return _NonGuiOpenVisus.VectorDouble_append(self, x)

    def empty(self):
        return _NonGuiOpenVisus.VectorDouble_empty(self)

    def size(self):
        return _NonGuiOpenVisus.VectorDouble_size(self)

    def swap(self, v):
        return _NonGuiOpenVisus.VectorDouble_swap(self, v)

    def begin(self):
        return _NonGuiOpenVisus.VectorDouble_begin(self)

    def end(self):
        return _NonGuiOpenVisus.VectorDouble_end(self)

    def rbegin(self):
        return _NonGuiOpenVisus.VectorDouble_rbegin(self)

    def rend(self):
        return _NonGuiOpenVisus.VectorDouble_rend(self)

    def clear(self):
        return _NonGuiOpenVisus.VectorDouble_clear(self)

    def get_allocator(self):
        return _NonGuiOpenVisus.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _NonGuiOpenVisus.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _NonGuiOpenVisus.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _NonGuiOpenVisus.VectorDouble_push_back(self, x)

    def front(self):
        return _NonGuiOpenVisus.VectorDouble_front(self)

    def back(self):
        return _NonGuiOpenVisus.VectorDouble_back(self)

    def assign(self, n, x):
        return _NonGuiOpenVisus.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _NonGuiOpenVisus.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _NonGuiOpenVisus.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _NonGuiOpenVisus.VectorDouble_reserve(self, n)

    def capacity(self):
        return _NonGuiOpenVisus.VectorDouble_capacity(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _NonGuiOpenVisus.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NonGuiOpenVisus.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NonGuiOpenVisus.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _NonGuiOpenVisus.VectorFloat___bool__(self)

    def __len__(self):
        return _NonGuiOpenVisus.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _NonGuiOpenVisus.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NonGuiOpenVisus.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NonGuiOpenVisus.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NonGuiOpenVisus.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NonGuiOpenVisus.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NonGuiOpenVisus.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _NonGuiOpenVisus.VectorFloat_pop(self)

    def append(self, x):
        return _NonGuiOpenVisus.VectorFloat_append(self, x)

    def empty(self):
        return _NonGuiOpenVisus.VectorFloat_empty(self)

    def size(self):
        return _NonGuiOpenVisus.VectorFloat_size(self)

    def swap(self, v):
        return _NonGuiOpenVisus.VectorFloat_swap(self, v)

    def begin(self):
        return _NonGuiOpenVisus.VectorFloat_begin(self)

    def end(self):
        return _NonGuiOpenVisus.VectorFloat_end(self)

    def rbegin(self):
        return _NonGuiOpenVisus.VectorFloat_rbegin(self)

    def rend(self):
        return _NonGuiOpenVisus.VectorFloat_rend(self)

    def clear(self):
        return _NonGuiOpenVisus.VectorFloat_clear(self)

    def get_allocator(self):
        return _NonGuiOpenVisus.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _NonGuiOpenVisus.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _NonGuiOpenVisus.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _NonGuiOpenVisus.VectorFloat_push_back(self, x)

    def front(self):
        return _NonGuiOpenVisus.VectorFloat_front(self)

    def back(self):
        return _NonGuiOpenVisus.VectorFloat_back(self)

    def assign(self, n, x):
        return _NonGuiOpenVisus.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _NonGuiOpenVisus.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _NonGuiOpenVisus.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _NonGuiOpenVisus.VectorFloat_reserve(self, n)

    def capacity(self):
        return _NonGuiOpenVisus.VectorFloat_capacity(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _NonGuiOpenVisus.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NonGuiOpenVisus.MapStringString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NonGuiOpenVisus.MapStringString___nonzero__(self)

    def __bool__(self):
        return _NonGuiOpenVisus.MapStringString___bool__(self)

    def __len__(self):
        return _NonGuiOpenVisus.MapStringString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _NonGuiOpenVisus.MapStringString___getitem__(self, key)

    def __delitem__(self, key):
        return _NonGuiOpenVisus.MapStringString___delitem__(self, key)

    def has_key(self, key):
        return _NonGuiOpenVisus.MapStringString_has_key(self, key)

    def keys(self):
        return _NonGuiOpenVisus.MapStringString_keys(self)

    def values(self):
        return _NonGuiOpenVisus.MapStringString_values(self)

    def items(self):
        return _NonGuiOpenVisus.MapStringString_items(self)

    def __contains__(self, key):
        return _NonGuiOpenVisus.MapStringString___contains__(self, key)

    def key_iterator(self):
        return _NonGuiOpenVisus.MapStringString_key_iterator(self)

    def value_iterator(self):
        return _NonGuiOpenVisus.MapStringString_value_iterator(self)

    def __setitem__(self, *args):
        return _NonGuiOpenVisus.MapStringString___setitem__(self, *args)

    def asdict(self):
        return _NonGuiOpenVisus.MapStringString_asdict(self)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_MapStringString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _NonGuiOpenVisus.MapStringString_empty(self)

    def size(self):
        return _NonGuiOpenVisus.MapStringString_size(self)

    def swap(self, v):
        return _NonGuiOpenVisus.MapStringString_swap(self, v)

    def begin(self):
        return _NonGuiOpenVisus.MapStringString_begin(self)

    def end(self):
        return _NonGuiOpenVisus.MapStringString_end(self)

    def rbegin(self):
        return _NonGuiOpenVisus.MapStringString_rbegin(self)

    def rend(self):
        return _NonGuiOpenVisus.MapStringString_rend(self)

    def clear(self):
        return _NonGuiOpenVisus.MapStringString_clear(self)

    def get_allocator(self):
        return _NonGuiOpenVisus.MapStringString_get_allocator(self)

    def count(self, x):
        return _NonGuiOpenVisus.MapStringString_count(self, x)

    def erase(self, *args):
        return _NonGuiOpenVisus.MapStringString_erase(self, *args)

    def find(self, x):
        return _NonGuiOpenVisus.MapStringString_find(self, x)

    def lower_bound(self, x):
        return _NonGuiOpenVisus.MapStringString_lower_bound(self, x)

    def upper_bound(self, x):
        return _NonGuiOpenVisus.MapStringString_upper_bound(self, x)
    __swig_destroy__ = _NonGuiOpenVisus.delete_MapStringString
    __del__ = lambda self: None
MapStringString_swigregister = _NonGuiOpenVisus.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

class HeapMemoryPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeapMemoryPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeapMemoryPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_HeapMemoryPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_HeapMemoryPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.HeapMemoryPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.HeapMemoryPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.HeapMemoryPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.HeapMemoryPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.HeapMemoryPtr___nonzero__(self)
    __bool__ = __nonzero__


HeapMemoryPtr_swigregister = _NonGuiOpenVisus.HeapMemoryPtr_swigregister
HeapMemoryPtr_swigregister(HeapMemoryPtr)

class DictObjectPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictObjectPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DictObjectPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_DictObjectPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DictObjectPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.DictObjectPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.DictObjectPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.DictObjectPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.DictObjectPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.DictObjectPtr___nonzero__(self)
    __bool__ = __nonzero__


DictObjectPtr_swigregister = _NonGuiOpenVisus.DictObjectPtr_swigregister
DictObjectPtr_swigregister(DictObjectPtr)

class ObjectCreatorPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectCreatorPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectCreatorPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_ObjectCreatorPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_ObjectCreatorPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.ObjectCreatorPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.ObjectCreatorPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.ObjectCreatorPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.ObjectCreatorPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.ObjectCreatorPtr___nonzero__(self)
    __bool__ = __nonzero__


ObjectCreatorPtr_swigregister = _NonGuiOpenVisus.ObjectCreatorPtr_swigregister
ObjectCreatorPtr_swigregister(ObjectCreatorPtr)

class ObjectPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_ObjectPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_ObjectPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.ObjectPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.ObjectPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.ObjectPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.ObjectPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.ObjectPtr___nonzero__(self)
    __bool__ = __nonzero__


ObjectPtr_swigregister = _NonGuiOpenVisus.ObjectPtr_swigregister
ObjectPtr_swigregister(ObjectPtr)

class StringTreePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringTreePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringTreePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_StringTreePtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_StringTreePtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.StringTreePtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.StringTreePtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.StringTreePtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.StringTreePtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.StringTreePtr___nonzero__(self)
    __bool__ = __nonzero__


StringTreePtr_swigregister = _NonGuiOpenVisus.StringTreePtr_swigregister
StringTreePtr_swigregister(StringTreePtr)

class ArrayPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_ArrayPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_ArrayPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.ArrayPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.ArrayPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.ArrayPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.ArrayPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.ArrayPtr___nonzero__(self)
    __bool__ = __nonzero__


ArrayPtr_swigregister = _NonGuiOpenVisus.ArrayPtr_swigregister
ArrayPtr_swigregister(ArrayPtr)

class BoolPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoolPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_BoolPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_BoolPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.BoolPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.BoolPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.BoolPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.BoolPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.BoolPtr___nonzero__(self)
    __bool__ = __nonzero__


BoolPtr_swigregister = _NonGuiOpenVisus.BoolPtr_swigregister
BoolPtr_swigregister(BoolPtr)

class VectorOfField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfField, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NonGuiOpenVisus.VectorOfField_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NonGuiOpenVisus.VectorOfField___nonzero__(self)

    def __bool__(self):
        return _NonGuiOpenVisus.VectorOfField___bool__(self)

    def __len__(self):
        return _NonGuiOpenVisus.VectorOfField___len__(self)

    def __getslice__(self, i, j):
        return _NonGuiOpenVisus.VectorOfField___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NonGuiOpenVisus.VectorOfField___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NonGuiOpenVisus.VectorOfField___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NonGuiOpenVisus.VectorOfField___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NonGuiOpenVisus.VectorOfField___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NonGuiOpenVisus.VectorOfField___setitem__(self, *args)

    def pop(self):
        return _NonGuiOpenVisus.VectorOfField_pop(self)

    def append(self, x):
        return _NonGuiOpenVisus.VectorOfField_append(self, x)

    def empty(self):
        return _NonGuiOpenVisus.VectorOfField_empty(self)

    def size(self):
        return _NonGuiOpenVisus.VectorOfField_size(self)

    def swap(self, v):
        return _NonGuiOpenVisus.VectorOfField_swap(self, v)

    def begin(self):
        return _NonGuiOpenVisus.VectorOfField_begin(self)

    def end(self):
        return _NonGuiOpenVisus.VectorOfField_end(self)

    def rbegin(self):
        return _NonGuiOpenVisus.VectorOfField_rbegin(self)

    def rend(self):
        return _NonGuiOpenVisus.VectorOfField_rend(self)

    def clear(self):
        return _NonGuiOpenVisus.VectorOfField_clear(self)

    def get_allocator(self):
        return _NonGuiOpenVisus.VectorOfField_get_allocator(self)

    def pop_back(self):
        return _NonGuiOpenVisus.VectorOfField_pop_back(self)

    def erase(self, *args):
        return _NonGuiOpenVisus.VectorOfField_erase(self, *args)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_VectorOfField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _NonGuiOpenVisus.VectorOfField_push_back(self, x)

    def front(self):
        return _NonGuiOpenVisus.VectorOfField_front(self)

    def back(self):
        return _NonGuiOpenVisus.VectorOfField_back(self)

    def assign(self, n, x):
        return _NonGuiOpenVisus.VectorOfField_assign(self, n, x)

    def resize(self, *args):
        return _NonGuiOpenVisus.VectorOfField_resize(self, *args)

    def insert(self, *args):
        return _NonGuiOpenVisus.VectorOfField_insert(self, *args)

    def reserve(self, n):
        return _NonGuiOpenVisus.VectorOfField_reserve(self, n)

    def capacity(self):
        return _NonGuiOpenVisus.VectorOfField_capacity(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_VectorOfField
    __del__ = lambda self: None
VectorOfField_swigregister = _NonGuiOpenVisus.VectorOfField_swigregister
VectorOfField_swigregister(VectorOfField)

class VectorOfArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NonGuiOpenVisus.VectorOfArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NonGuiOpenVisus.VectorOfArray___nonzero__(self)

    def __bool__(self):
        return _NonGuiOpenVisus.VectorOfArray___bool__(self)

    def __len__(self):
        return _NonGuiOpenVisus.VectorOfArray___len__(self)

    def __getslice__(self, i, j):
        return _NonGuiOpenVisus.VectorOfArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NonGuiOpenVisus.VectorOfArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NonGuiOpenVisus.VectorOfArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NonGuiOpenVisus.VectorOfArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NonGuiOpenVisus.VectorOfArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NonGuiOpenVisus.VectorOfArray___setitem__(self, *args)

    def pop(self):
        return _NonGuiOpenVisus.VectorOfArray_pop(self)

    def append(self, x):
        return _NonGuiOpenVisus.VectorOfArray_append(self, x)

    def empty(self):
        return _NonGuiOpenVisus.VectorOfArray_empty(self)

    def size(self):
        return _NonGuiOpenVisus.VectorOfArray_size(self)

    def swap(self, v):
        return _NonGuiOpenVisus.VectorOfArray_swap(self, v)

    def begin(self):
        return _NonGuiOpenVisus.VectorOfArray_begin(self)

    def end(self):
        return _NonGuiOpenVisus.VectorOfArray_end(self)

    def rbegin(self):
        return _NonGuiOpenVisus.VectorOfArray_rbegin(self)

    def rend(self):
        return _NonGuiOpenVisus.VectorOfArray_rend(self)

    def clear(self):
        return _NonGuiOpenVisus.VectorOfArray_clear(self)

    def get_allocator(self):
        return _NonGuiOpenVisus.VectorOfArray_get_allocator(self)

    def pop_back(self):
        return _NonGuiOpenVisus.VectorOfArray_pop_back(self)

    def erase(self, *args):
        return _NonGuiOpenVisus.VectorOfArray_erase(self, *args)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_VectorOfArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _NonGuiOpenVisus.VectorOfArray_push_back(self, x)

    def front(self):
        return _NonGuiOpenVisus.VectorOfArray_front(self)

    def back(self):
        return _NonGuiOpenVisus.VectorOfArray_back(self)

    def assign(self, n, x):
        return _NonGuiOpenVisus.VectorOfArray_assign(self, n, x)

    def resize(self, *args):
        return _NonGuiOpenVisus.VectorOfArray_resize(self, *args)

    def insert(self, *args):
        return _NonGuiOpenVisus.VectorOfArray_insert(self, *args)

    def reserve(self, n):
        return _NonGuiOpenVisus.VectorOfArray_reserve(self, n)

    def capacity(self):
        return _NonGuiOpenVisus.VectorOfArray_capacity(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_VectorOfArray
    __del__ = lambda self: None
VectorOfArray_swigregister = _NonGuiOpenVisus.VectorOfArray_swigregister
VectorOfArray_swigregister(VectorOfArray)

VISUS_OPENGL_ES = _NonGuiOpenVisus.VISUS_OPENGL_ES

def cfloat(s):
    return _NonGuiOpenVisus.cfloat(s)
cfloat = _NonGuiOpenVisus.cfloat

def SetCommandLine(*args):
    return _NonGuiOpenVisus.SetCommandLine(*args)
SetCommandLine = _NonGuiOpenVisus.SetCommandLine

def VisusAssertFailed(file, line, expr):
    return _NonGuiOpenVisus.VisusAssertFailed(file, line, expr)
VisusAssertFailed = _NonGuiOpenVisus.VisusAssertFailed

def PrintMessageToTerminal(value):
    return _NonGuiOpenVisus.PrintMessageToTerminal(value)
PrintMessageToTerminal = _NonGuiOpenVisus.PrintMessageToTerminal

def VisusHasMessageLock():
    return _NonGuiOpenVisus.VisusHasMessageLock()
VisusHasMessageLock = _NonGuiOpenVisus.VisusHasMessageLock

def ThrowExceptionEx(file, line, expr):
    return _NonGuiOpenVisus.ThrowExceptionEx(file, line, expr)
ThrowExceptionEx = _NonGuiOpenVisus.ThrowExceptionEx
class Void(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Void, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Void, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _NonGuiOpenVisus.new_Void()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Void
    __del__ = lambda self: None
Void_swigregister = _NonGuiOpenVisus.Void_swigregister
Void_swigregister(Void)
cvar = _NonGuiOpenVisus.cvar
Pi = cvar.Pi

class KernelModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KernelModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _NonGuiOpenVisus.KernelModule_bAttached_set
    __swig_getmethods__["bAttached"] = _NonGuiOpenVisus.KernelModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_NonGuiOpenVisus.KernelModule_bAttached_get, _NonGuiOpenVisus.KernelModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_NonGuiOpenVisus.KernelModule_attach)
    else:
        attach = _NonGuiOpenVisus.KernelModule_attach
    if _newclass:
        detach = staticmethod(_NonGuiOpenVisus.KernelModule_detach)
    else:
        detach = _NonGuiOpenVisus.KernelModule_detach

    def __init__(self):
        this = _NonGuiOpenVisus.new_KernelModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_KernelModule
    __del__ = lambda self: None
KernelModule_swigregister = _NonGuiOpenVisus.KernelModule_swigregister
KernelModule_swigregister(KernelModule)

def KernelModule_attach():
    return _NonGuiOpenVisus.KernelModule_attach()
KernelModule_attach = _NonGuiOpenVisus.KernelModule_attach

def KernelModule_detach():
    return _NonGuiOpenVisus.KernelModule_detach()
KernelModule_detach = _NonGuiOpenVisus.KernelModule_detach

class StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.StringMap_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.StringMap_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_StringMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_StringMap
    __del__ = lambda self: None

    def clear(self):
        return _NonGuiOpenVisus.StringMap_clear(self)

    def size(self):
        return _NonGuiOpenVisus.StringMap_size(self)

    def empty(self):
        return _NonGuiOpenVisus.StringMap_empty(self)

    def begin(self, *args):
        return _NonGuiOpenVisus.StringMap_begin(self, *args)

    def end(self, *args):
        return _NonGuiOpenVisus.StringMap_end(self, *args)

    def find(self, *args):
        return _NonGuiOpenVisus.StringMap_find(self, *args)

    def hasValue(self, key):
        return _NonGuiOpenVisus.StringMap_hasValue(self, key)

    def getValue(self, *args):
        return _NonGuiOpenVisus.StringMap_getValue(self, *args)

    def setValue(self, key, value):
        return _NonGuiOpenVisus.StringMap_setValue(self, key, value)

    def eraseValue(self, key):
        return _NonGuiOpenVisus.StringMap_eraseValue(self, key)

    def __eq__(self, other):
        return _NonGuiOpenVisus.StringMap___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.StringMap___ne__(self, other)
StringMap_swigregister = _NonGuiOpenVisus.StringMap_swigregister
StringMap_swigregister(StringMap)

def StringMap_getVisusClassName():
    return _NonGuiOpenVisus.StringMap_getVisusClassName()
StringMap_getVisusClassName = _NonGuiOpenVisus.StringMap_getVisusClassName

class LogFormattedMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogFormattedMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogFormattedMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _NonGuiOpenVisus.LogFormattedMessage_file_set
    __swig_getmethods__["file"] = _NonGuiOpenVisus.LogFormattedMessage_file_get
    if _newclass:
        file = _swig_property(_NonGuiOpenVisus.LogFormattedMessage_file_get, _NonGuiOpenVisus.LogFormattedMessage_file_set)
    __swig_setmethods__["line"] = _NonGuiOpenVisus.LogFormattedMessage_line_set
    __swig_getmethods__["line"] = _NonGuiOpenVisus.LogFormattedMessage_line_get
    if _newclass:
        line = _swig_property(_NonGuiOpenVisus.LogFormattedMessage_line_get, _NonGuiOpenVisus.LogFormattedMessage_line_set)
    __swig_setmethods__["level"] = _NonGuiOpenVisus.LogFormattedMessage_level_set
    __swig_getmethods__["level"] = _NonGuiOpenVisus.LogFormattedMessage_level_get
    if _newclass:
        level = _swig_property(_NonGuiOpenVisus.LogFormattedMessage_level_get, _NonGuiOpenVisus.LogFormattedMessage_level_set)
    __swig_setmethods__["time"] = _NonGuiOpenVisus.LogFormattedMessage_time_set
    __swig_getmethods__["time"] = _NonGuiOpenVisus.LogFormattedMessage_time_get
    if _newclass:
        time = _swig_property(_NonGuiOpenVisus.LogFormattedMessage_time_get, _NonGuiOpenVisus.LogFormattedMessage_time_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_LogFormattedMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_LogFormattedMessage
    __del__ = lambda self: None

    def get_stream(self):
        return _NonGuiOpenVisus.LogFormattedMessage_get_stream(self)
LogFormattedMessage_swigregister = _NonGuiOpenVisus.LogFormattedMessage_swigregister
LogFormattedMessage_swigregister(LogFormattedMessage)

class HeapMemory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeapMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeapMemory, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.HeapMemory_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.HeapMemory_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_HeapMemory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_HeapMemory
    __del__ = lambda self: None
    if _newclass:
        createUnmanaged = staticmethod(_NonGuiOpenVisus.HeapMemory_createUnmanaged)
    else:
        createUnmanaged = _NonGuiOpenVisus.HeapMemory_createUnmanaged
    if _newclass:
        createManaged = staticmethod(_NonGuiOpenVisus.HeapMemory_createManaged)
    else:
        createManaged = _NonGuiOpenVisus.HeapMemory_createManaged

    def clone(self):
        return _NonGuiOpenVisus.HeapMemory_clone(self)

    def reserve(self, new_m, file, line):
        return _NonGuiOpenVisus.HeapMemory_reserve(self, new_m, file, line)

    def resize(self, size, file, line):
        return _NonGuiOpenVisus.HeapMemory_resize(self, size, file, line)

    def shrink(self):
        return _NonGuiOpenVisus.HeapMemory_shrink(self)

    def isAllZero(self):
        return _NonGuiOpenVisus.HeapMemory_isAllZero(self)

    def c_capacity(self):
        return _NonGuiOpenVisus.HeapMemory_c_capacity(self)

    def c_size(self):
        return _NonGuiOpenVisus.HeapMemory_c_size(self)

    def c_ptr(self):
        return _NonGuiOpenVisus.HeapMemory_c_ptr(self)

    def fill(self, value):
        return _NonGuiOpenVisus.HeapMemory_fill(self, value)

    def base64Encode(self):
        return _NonGuiOpenVisus.HeapMemory_base64Encode(self)
    if _newclass:
        base64Decode = staticmethod(_NonGuiOpenVisus.HeapMemory_base64Decode)
    else:
        base64Decode = _NonGuiOpenVisus.HeapMemory_base64Decode
    if _newclass:
        copy = staticmethod(_NonGuiOpenVisus.HeapMemory_copy)
    else:
        copy = _NonGuiOpenVisus.HeapMemory_copy
HeapMemory_swigregister = _NonGuiOpenVisus.HeapMemory_swigregister
HeapMemory_swigregister(HeapMemory)

def HeapMemory_getVisusClassName():
    return _NonGuiOpenVisus.HeapMemory_getVisusClassName()
HeapMemory_getVisusClassName = _NonGuiOpenVisus.HeapMemory_getVisusClassName

def HeapMemory_createUnmanaged(p, n):
    return _NonGuiOpenVisus.HeapMemory_createUnmanaged(p, n)
HeapMemory_createUnmanaged = _NonGuiOpenVisus.HeapMemory_createUnmanaged

def HeapMemory_createManaged(p, n):
    return _NonGuiOpenVisus.HeapMemory_createManaged(p, n)
HeapMemory_createManaged = _NonGuiOpenVisus.HeapMemory_createManaged

def HeapMemory_base64Decode(input):
    return _NonGuiOpenVisus.HeapMemory_base64Decode(input)
HeapMemory_base64Decode = _NonGuiOpenVisus.HeapMemory_base64Decode

def HeapMemory_copy(dst, src):
    return _NonGuiOpenVisus.HeapMemory_copy(dst, src)
HeapMemory_copy = _NonGuiOpenVisus.HeapMemory_copy

class ObjectStream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectStream, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.ObjectStream_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.ObjectStream_getVisusClassName
    __swig_setmethods__["run_time_options"] = _NonGuiOpenVisus.ObjectStream_run_time_options_set
    __swig_getmethods__["run_time_options"] = _NonGuiOpenVisus.ObjectStream_run_time_options_get
    if _newclass:
        run_time_options = _swig_property(_NonGuiOpenVisus.ObjectStream_run_time_options_get, _NonGuiOpenVisus.ObjectStream_run_time_options_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_ObjectStream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_ObjectStream
    __del__ = lambda self: None

    def open(self, root, mode):
        return _NonGuiOpenVisus.ObjectStream_open(self, root, mode)

    def close(self):
        return _NonGuiOpenVisus.ObjectStream_close(self)

    def getCurrentDepth(self):
        return _NonGuiOpenVisus.ObjectStream_getCurrentDepth(self)

    def getCurrentContext(self):
        return _NonGuiOpenVisus.ObjectStream_getCurrentContext(self)

    def pushContext(self, context_name):
        return _NonGuiOpenVisus.ObjectStream_pushContext(self, context_name)

    def popContext(self, context_name):
        return _NonGuiOpenVisus.ObjectStream_popContext(self, context_name)

    def writeInline(self, name, value):
        return _NonGuiOpenVisus.ObjectStream_writeInline(self, name, value)

    def readInline(self, *args):
        return _NonGuiOpenVisus.ObjectStream_readInline(self, *args)

    def writeTypeName(self, obj):
        return _NonGuiOpenVisus.ObjectStream_writeTypeName(self, obj)

    def readTypeName(self):
        return _NonGuiOpenVisus.ObjectStream_readTypeName(self)

    def write(self, name, value):
        return _NonGuiOpenVisus.ObjectStream_write(self, name, value)

    def read(self, *args):
        return _NonGuiOpenVisus.ObjectStream_read(self, *args)

    def writeObject(self, name, obj):
        return _NonGuiOpenVisus.ObjectStream_writeObject(self, name, obj)

    def writeText(self, value, bCData=False):
        return _NonGuiOpenVisus.ObjectStream_writeText(self, value, bCData)

    def readText(self):
        return _NonGuiOpenVisus.ObjectStream_readText(self)

    def readObject(self, name):
        return _NonGuiOpenVisus.ObjectStream_readObject(self, name)
ObjectStream_swigregister = _NonGuiOpenVisus.ObjectStream_swigregister
ObjectStream_swigregister(ObjectStream)

def ObjectStream_getVisusClassName():
    return _NonGuiOpenVisus.ObjectStream_getVisusClassName()
ObjectStream_getVisusClassName = _NonGuiOpenVisus.ObjectStream_getVisusClassName

class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Object_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Object_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_Object()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Object
    __del__ = lambda self: None

    def getOsDependentTypeName(self):
        return _NonGuiOpenVisus.Object_getOsDependentTypeName(self)

    def toBool(self):
        return _NonGuiOpenVisus.Object_toBool(self)

    def toInt(self):
        return _NonGuiOpenVisus.Object_toInt(self)

    def toInt64(self):
        return _NonGuiOpenVisus.Object_toInt64(self)

    def toDouble(self):
        return _NonGuiOpenVisus.Object_toDouble(self)

    def toString(self):
        return _NonGuiOpenVisus.Object_toString(self)

    def toXmlString(self):
        return _NonGuiOpenVisus.Object_toXmlString(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Object_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Object_readFromObjectStream(self, istream)

    def writeToSceneObjectStream(self, ostream):
        return _NonGuiOpenVisus.Object_writeToSceneObjectStream(self, ostream)

    def readFromSceneObjectStream(self, istream):
        return _NonGuiOpenVisus.Object_readFromSceneObjectStream(self, istream)
Object_swigregister = _NonGuiOpenVisus.Object_swigregister
Object_swigregister(Object)

def Object_getVisusClassName():
    return _NonGuiOpenVisus.Object_getVisusClassName()
Object_getVisusClassName = _NonGuiOpenVisus.Object_getVisusClassName

class ObjectEncoder(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectEncoder, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectEncoder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.ObjectEncoder_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.ObjectEncoder_getVisusClassName
    __swig_destroy__ = _NonGuiOpenVisus.delete_ObjectEncoder
    __del__ = lambda self: None

    def encode(self, obj):
        return _NonGuiOpenVisus.ObjectEncoder_encode(self, obj)

    def decode(self, src):
        return _NonGuiOpenVisus.ObjectEncoder_decode(self, src)
ObjectEncoder_swigregister = _NonGuiOpenVisus.ObjectEncoder_swigregister
ObjectEncoder_swigregister(ObjectEncoder)

def ObjectEncoder_getVisusClassName():
    return _NonGuiOpenVisus.ObjectEncoder_getVisusClassName()
ObjectEncoder_getVisusClassName = _NonGuiOpenVisus.ObjectEncoder_getVisusClassName

class ObjectCreator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectCreator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectCreator, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.ObjectCreator_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.ObjectCreator_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_ObjectCreator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_ObjectCreator
    __del__ = lambda self: None

    def createInstance(self):
        return _NonGuiOpenVisus.ObjectCreator_createInstance(self)
ObjectCreator_swigregister = _NonGuiOpenVisus.ObjectCreator_swigregister
ObjectCreator_swigregister(ObjectCreator)

def ObjectCreator_getVisusClassName():
    return _NonGuiOpenVisus.ObjectCreator_getVisusClassName()
ObjectCreator_getVisusClassName = _NonGuiOpenVisus.ObjectCreator_getVisusClassName

class ObjectFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_NonGuiOpenVisus.ObjectFactory_getSingleton)
    else:
        getSingleton = _NonGuiOpenVisus.ObjectFactory_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_NonGuiOpenVisus.ObjectFactory_allocSingleton)
    else:
        allocSingleton = _NonGuiOpenVisus.ObjectFactory_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_NonGuiOpenVisus.ObjectFactory_releaseSingleton)
    else:
        releaseSingleton = _NonGuiOpenVisus.ObjectFactory_releaseSingleton

    def registerObjectClass(self, *args):
        return _NonGuiOpenVisus.ObjectFactory_registerObjectClass(self, *args)

    def flushObjectCreators(self):
        return _NonGuiOpenVisus.ObjectFactory_flushObjectCreators(self)

    def createInstance(self, portable_typename, bCanFail=False):
        return _NonGuiOpenVisus.ObjectFactory_createInstance(self, portable_typename, bCanFail)

    def getPortableTypeName(self, instance):
        return _NonGuiOpenVisus.ObjectFactory_getPortableTypeName(self, instance)
    __swig_destroy__ = _NonGuiOpenVisus.delete_ObjectFactory
    __del__ = lambda self: None
ObjectFactory_swigregister = _NonGuiOpenVisus.ObjectFactory_swigregister
ObjectFactory_swigregister(ObjectFactory)

def ObjectFactory_getSingleton():
    return _NonGuiOpenVisus.ObjectFactory_getSingleton()
ObjectFactory_getSingleton = _NonGuiOpenVisus.ObjectFactory_getSingleton

def ObjectFactory_allocSingleton():
    return _NonGuiOpenVisus.ObjectFactory_allocSingleton()
ObjectFactory_allocSingleton = _NonGuiOpenVisus.ObjectFactory_allocSingleton

def ObjectFactory_releaseSingleton():
    return _NonGuiOpenVisus.ObjectFactory_releaseSingleton()
ObjectFactory_releaseSingleton = _NonGuiOpenVisus.ObjectFactory_releaseSingleton


def cbool(*args):
    return _NonGuiOpenVisus.cbool(*args)
cbool = _NonGuiOpenVisus.cbool

def cint(*args):
    return _NonGuiOpenVisus.cint(*args)
cint = _NonGuiOpenVisus.cint

def cint64(*args):
    return _NonGuiOpenVisus.cint64(*args)
cint64 = _NonGuiOpenVisus.cint64

def cdouble(*args):
    return _NonGuiOpenVisus.cdouble(*args)
cdouble = _NonGuiOpenVisus.cdouble

def cstring(*args):
    return _NonGuiOpenVisus.cstring(*args)
cstring = _NonGuiOpenVisus.cstring
class BoolObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoolObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoolObject, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.BoolObject_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.BoolObject_getVisusClassName

    def __init__(self, value_=False):
        this = _NonGuiOpenVisus.new_BoolObject(value_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_BoolObject
    __del__ = lambda self: None

    def toBool(self):
        return _NonGuiOpenVisus.BoolObject_toBool(self)

    def toInt(self):
        return _NonGuiOpenVisus.BoolObject_toInt(self)

    def toInt64(self):
        return _NonGuiOpenVisus.BoolObject_toInt64(self)

    def toDouble(self):
        return _NonGuiOpenVisus.BoolObject_toDouble(self)

    def toString(self):
        return _NonGuiOpenVisus.BoolObject_toString(self)

    def getValue(self):
        return _NonGuiOpenVisus.BoolObject_getValue(self)

    def setValue(self, value):
        return _NonGuiOpenVisus.BoolObject_setValue(self, value)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.BoolObject_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.BoolObject_readFromObjectStream(self, istream)
BoolObject_swigregister = _NonGuiOpenVisus.BoolObject_swigregister
BoolObject_swigregister(BoolObject)

def BoolObject_getVisusClassName():
    return _NonGuiOpenVisus.BoolObject_getVisusClassName()
BoolObject_getVisusClassName = _NonGuiOpenVisus.BoolObject_getVisusClassName

class IntObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntObject, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.IntObject_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.IntObject_getVisusClassName

    def __init__(self, value_=0):
        this = _NonGuiOpenVisus.new_IntObject(value_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_IntObject
    __del__ = lambda self: None

    def toBool(self):
        return _NonGuiOpenVisus.IntObject_toBool(self)

    def toInt(self):
        return _NonGuiOpenVisus.IntObject_toInt(self)

    def toInt64(self):
        return _NonGuiOpenVisus.IntObject_toInt64(self)

    def toDouble(self):
        return _NonGuiOpenVisus.IntObject_toDouble(self)

    def toString(self):
        return _NonGuiOpenVisus.IntObject_toString(self)

    def getValue(self):
        return _NonGuiOpenVisus.IntObject_getValue(self)

    def setValue(self, value):
        return _NonGuiOpenVisus.IntObject_setValue(self, value)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.IntObject_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.IntObject_readFromObjectStream(self, istream)
IntObject_swigregister = _NonGuiOpenVisus.IntObject_swigregister
IntObject_swigregister(IntObject)

def IntObject_getVisusClassName():
    return _NonGuiOpenVisus.IntObject_getVisusClassName()
IntObject_getVisusClassName = _NonGuiOpenVisus.IntObject_getVisusClassName

class Int64Object(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int64Object, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Int64Object, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Int64Object_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Int64Object_getVisusClassName

    def __init__(self, value_=0):
        this = _NonGuiOpenVisus.new_Int64Object(value_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Int64Object
    __del__ = lambda self: None

    def getValue(self):
        return _NonGuiOpenVisus.Int64Object_getValue(self)

    def setValue(self, value):
        return _NonGuiOpenVisus.Int64Object_setValue(self, value)

    def toBool(self):
        return _NonGuiOpenVisus.Int64Object_toBool(self)

    def toInt(self):
        return _NonGuiOpenVisus.Int64Object_toInt(self)

    def toInt64(self):
        return _NonGuiOpenVisus.Int64Object_toInt64(self)

    def toDouble(self):
        return _NonGuiOpenVisus.Int64Object_toDouble(self)

    def toString(self):
        return _NonGuiOpenVisus.Int64Object_toString(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Int64Object_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Int64Object_readFromObjectStream(self, istream)
Int64Object_swigregister = _NonGuiOpenVisus.Int64Object_swigregister
Int64Object_swigregister(Int64Object)

def Int64Object_getVisusClassName():
    return _NonGuiOpenVisus.Int64Object_getVisusClassName()
Int64Object_getVisusClassName = _NonGuiOpenVisus.Int64Object_getVisusClassName

class DoubleObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleObject, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.DoubleObject_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.DoubleObject_getVisusClassName

    def __init__(self, value_=0):
        this = _NonGuiOpenVisus.new_DoubleObject(value_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DoubleObject
    __del__ = lambda self: None

    def toBool(self):
        return _NonGuiOpenVisus.DoubleObject_toBool(self)

    def toInt(self):
        return _NonGuiOpenVisus.DoubleObject_toInt(self)

    def toInt64(self):
        return _NonGuiOpenVisus.DoubleObject_toInt64(self)

    def toDouble(self):
        return _NonGuiOpenVisus.DoubleObject_toDouble(self)

    def toString(self):
        return _NonGuiOpenVisus.DoubleObject_toString(self)

    def getValue(self):
        return _NonGuiOpenVisus.DoubleObject_getValue(self)

    def setValue(self, value):
        return _NonGuiOpenVisus.DoubleObject_setValue(self, value)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.DoubleObject_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.DoubleObject_readFromObjectStream(self, istream)
DoubleObject_swigregister = _NonGuiOpenVisus.DoubleObject_swigregister
DoubleObject_swigregister(DoubleObject)

def DoubleObject_getVisusClassName():
    return _NonGuiOpenVisus.DoubleObject_getVisusClassName()
DoubleObject_getVisusClassName = _NonGuiOpenVisus.DoubleObject_getVisusClassName

class StringObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringObject, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.StringObject_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.StringObject_getVisusClassName

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_StringObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_StringObject
    __del__ = lambda self: None

    def toBool(self):
        return _NonGuiOpenVisus.StringObject_toBool(self)

    def toInt(self):
        return _NonGuiOpenVisus.StringObject_toInt(self)

    def toInt64(self):
        return _NonGuiOpenVisus.StringObject_toInt64(self)

    def toDouble(self):
        return _NonGuiOpenVisus.StringObject_toDouble(self)

    def toString(self):
        return _NonGuiOpenVisus.StringObject_toString(self)

    def getValue(self):
        return _NonGuiOpenVisus.StringObject_getValue(self)

    def setValue(self, value):
        return _NonGuiOpenVisus.StringObject_setValue(self, value)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.StringObject_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.StringObject_readFromObjectStream(self, istream)
StringObject_swigregister = _NonGuiOpenVisus.StringObject_swigregister
StringObject_swigregister(StringObject)

def StringObject_getVisusClassName():
    return _NonGuiOpenVisus.StringObject_getVisusClassName()
StringObject_getVisusClassName = _NonGuiOpenVisus.StringObject_getVisusClassName

class ListObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListObject, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.ListObject_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.ListObject_getVisusClassName

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_ListObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_ListObject
    __del__ = lambda self: None

    def size(self):
        return _NonGuiOpenVisus.ListObject_size(self)

    def clear(self):
        return _NonGuiOpenVisus.ListObject_clear(self)

    def getAt(self, index):
        return _NonGuiOpenVisus.ListObject_getAt(self, index)

    def setAt(self, index, value):
        return _NonGuiOpenVisus.ListObject_setAt(self, index, value)

    def push_back(self, value):
        return _NonGuiOpenVisus.ListObject_push_back(self, value)

    def begin(self, *args):
        return _NonGuiOpenVisus.ListObject_begin(self, *args)

    def end(self, *args):
        return _NonGuiOpenVisus.ListObject_end(self, *args)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.ListObject_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.ListObject_readFromObjectStream(self, istream)
ListObject_swigregister = _NonGuiOpenVisus.ListObject_swigregister
ListObject_swigregister(ListObject)

def ListObject_getVisusClassName():
    return _NonGuiOpenVisus.ListObject_getVisusClassName()
ListObject_getVisusClassName = _NonGuiOpenVisus.ListObject_getVisusClassName

class DictObject(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DictObject, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.DictObject_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.DictObject_getVisusClassName

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_DictObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DictObject
    __del__ = lambda self: None

    def hasattr(self, name):
        return _NonGuiOpenVisus.DictObject_hasattr(self, name)

    def getattr(self, *args):
        return _NonGuiOpenVisus.DictObject_getattr(self, *args)

    def remattr(self, name):
        return _NonGuiOpenVisus.DictObject_remattr(self, name)

    def setattr(self, name, value):
        return _NonGuiOpenVisus.DictObject_setattr(self, name, value)

    def begin(self, *args):
        return _NonGuiOpenVisus.DictObject_begin(self, *args)

    def end(self, *args):
        return _NonGuiOpenVisus.DictObject_end(self, *args)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.DictObject_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.DictObject_readFromObjectStream(self, istream)
DictObject_swigregister = _NonGuiOpenVisus.DictObject_swigregister
DictObject_swigregister(DictObject)

def DictObject_getVisusClassName():
    return _NonGuiOpenVisus.DictObject_getVisusClassName()
DictObject_getVisusClassName = _NonGuiOpenVisus.DictObject_getVisusClassName

class Aborted(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aborted, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Aborted, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Aborted_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Aborted_getVisusClassName
    __swig_setmethods__["inner_value"] = _NonGuiOpenVisus.Aborted_inner_value_set
    __swig_getmethods__["inner_value"] = _NonGuiOpenVisus.Aborted_inner_value_get
    if _newclass:
        inner_value = _swig_property(_NonGuiOpenVisus.Aborted_inner_value_get, _NonGuiOpenVisus.Aborted_inner_value_set)

    def __init__(self):
        this = _NonGuiOpenVisus.new_Aborted()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self):
        return _NonGuiOpenVisus.Aborted___call__(self)

    def setTrue(self):
        return _NonGuiOpenVisus.Aborted_setTrue(self)

    def setFalse(self):
        return _NonGuiOpenVisus.Aborted_setFalse(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Aborted
    __del__ = lambda self: None
Aborted_swigregister = _NonGuiOpenVisus.Aborted_swigregister
Aborted_swigregister(Aborted)

def Aborted_getVisusClassName():
    return _NonGuiOpenVisus.Aborted_getVisusClassName()
Aborted_getVisusClassName = _NonGuiOpenVisus.Aborted_getVisusClassName

class StringTree(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringTree, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringTree, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.StringTree_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.StringTree_getVisusClassName
    __swig_setmethods__["name"] = _NonGuiOpenVisus.StringTree_name_set
    __swig_getmethods__["name"] = _NonGuiOpenVisus.StringTree_name_get
    if _newclass:
        name = _swig_property(_NonGuiOpenVisus.StringTree_name_get, _NonGuiOpenVisus.StringTree_name_set)
    __swig_setmethods__["attributes"] = _NonGuiOpenVisus.StringTree_attributes_set
    __swig_getmethods__["attributes"] = _NonGuiOpenVisus.StringTree_attributes_get
    if _newclass:
        attributes = _swig_property(_NonGuiOpenVisus.StringTree_attributes_get, _NonGuiOpenVisus.StringTree_attributes_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_StringTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_StringTree
    __del__ = lambda self: None

    def loadFromXml(self, content, bEnablePostProcessing=True):
        return _NonGuiOpenVisus.StringTree_loadFromXml(self, content, bEnablePostProcessing)

    def assign(self, other):
        return _NonGuiOpenVisus.StringTree_assign(self, other)

    def clear(self):
        return _NonGuiOpenVisus.StringTree_clear(self)

    def empty(self):
        return _NonGuiOpenVisus.StringTree_empty(self)

    def hasValue(self, key):
        return _NonGuiOpenVisus.StringTree_hasValue(self, key)

    def readString(self, *args):
        return _NonGuiOpenVisus.StringTree_readString(self, *args)

    def writeString(self, key, value):
        return _NonGuiOpenVisus.StringTree_writeString(self, key, value)

    def readInt(self, key, default_value=0):
        return _NonGuiOpenVisus.StringTree_readInt(self, key, default_value)

    def writeInt(self, key, value):
        return _NonGuiOpenVisus.StringTree_writeInt(self, key, value)

    def readBool(self, key, default_value=False):
        return _NonGuiOpenVisus.StringTree_readBool(self, key, default_value)

    def writeBool(self, key, value):
        return _NonGuiOpenVisus.StringTree_writeBool(self, key, value)

    def readBigInt(self, key, default_value=0):
        return _NonGuiOpenVisus.StringTree_readBigInt(self, key, default_value)

    def writeBigInt(self, key, value):
        return _NonGuiOpenVisus.StringTree_writeBigInt(self, key, value)

    def getNumberOfChilds(self):
        return _NonGuiOpenVisus.StringTree_getNumberOfChilds(self)

    def getChilds(self):
        return _NonGuiOpenVisus.StringTree_getChilds(self)

    def getChild(self, *args):
        return _NonGuiOpenVisus.StringTree_getChild(self, *args)

    def getFirstChild(self, *args):
        return _NonGuiOpenVisus.StringTree_getFirstChild(self, *args)

    def getLastChild(self, *args):
        return _NonGuiOpenVisus.StringTree_getLastChild(self, *args)

    def addChild(self, child):
        return _NonGuiOpenVisus.StringTree_addChild(self, child)

    def findChildWithName(self, name, prev=None):
        return _NonGuiOpenVisus.StringTree_findChildWithName(self, name, prev)

    def findAllChildsWithName(self, name, bRecursive):
        return _NonGuiOpenVisus.StringTree_findAllChildsWithName(self, name, bRecursive)

    def getMaxDepth(self):
        return _NonGuiOpenVisus.StringTree_getMaxDepth(self)

    def inheritAttributeFrom(self, other):
        return _NonGuiOpenVisus.StringTree_inheritAttributeFrom(self, other)

    def toString(self):
        return _NonGuiOpenVisus.StringTree_toString(self)

    def toJSONString(self):
        return _NonGuiOpenVisus.StringTree_toJSONString(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.StringTree_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.StringTree_readFromObjectStream(self, istream)
    if _newclass:
        postProcess = staticmethod(_NonGuiOpenVisus.StringTree_postProcess)
    else:
        postProcess = _NonGuiOpenVisus.StringTree_postProcess

    def isHashNode(self):
        return _NonGuiOpenVisus.StringTree_isHashNode(self)

    def isTextNode(self):
        return _NonGuiOpenVisus.StringTree_isTextNode(self)

    def addTextNode(self, text):
        return _NonGuiOpenVisus.StringTree_addTextNode(self, text)

    def isCDataSectionNode(self):
        return _NonGuiOpenVisus.StringTree_isCDataSectionNode(self)

    def addCDataSectionNode(self, text):
        return _NonGuiOpenVisus.StringTree_addCDataSectionNode(self, text)

    def isCommentNode(self):
        return _NonGuiOpenVisus.StringTree_isCommentNode(self)

    def addCommentNode(self, text):
        return _NonGuiOpenVisus.StringTree_addCommentNode(self, text)

    def collapseTextAndCData(self):
        return _NonGuiOpenVisus.StringTree_collapseTextAndCData(self)
StringTree_swigregister = _NonGuiOpenVisus.StringTree_swigregister
StringTree_swigregister(StringTree)

def StringTree_getVisusClassName():
    return _NonGuiOpenVisus.StringTree_getVisusClassName()
StringTree_getVisusClassName = _NonGuiOpenVisus.StringTree_getVisusClassName

def StringTree_postProcess(src):
    return _NonGuiOpenVisus.StringTree_postProcess(src)
StringTree_postProcess = _NonGuiOpenVisus.StringTree_postProcess

class StringTreeEncoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringTreeEncoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringTreeEncoder, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.StringTreeEncoder_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.StringTreeEncoder_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_StringTreeEncoder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def encode(self, obj):
        return _NonGuiOpenVisus.StringTreeEncoder_encode(self, obj)

    def decode(self, stree):
        return _NonGuiOpenVisus.StringTreeEncoder_decode(self, stree)
    __swig_destroy__ = _NonGuiOpenVisus.delete_StringTreeEncoder
    __del__ = lambda self: None
StringTreeEncoder_swigregister = _NonGuiOpenVisus.StringTreeEncoder_swigregister
StringTreeEncoder_swigregister(StringTreeEncoder)

def StringTreeEncoder_getVisusClassName():
    return _NonGuiOpenVisus.StringTreeEncoder_getVisusClassName()
StringTreeEncoder_getVisusClassName = _NonGuiOpenVisus.StringTreeEncoder_getVisusClassName

class XmlEncoder(ObjectEncoder):
    __swig_setmethods__ = {}
    for _s in [ObjectEncoder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlEncoder, name, value)
    __swig_getmethods__ = {}
    for _s in [ObjectEncoder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XmlEncoder, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.XmlEncoder_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.XmlEncoder_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_XmlEncoder()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def encode(self, obj):
        return _NonGuiOpenVisus.XmlEncoder_encode(self, obj)

    def decode(self, src):
        return _NonGuiOpenVisus.XmlEncoder_decode(self, src)
    __swig_destroy__ = _NonGuiOpenVisus.delete_XmlEncoder
    __del__ = lambda self: None
XmlEncoder_swigregister = _NonGuiOpenVisus.XmlEncoder_swigregister
XmlEncoder_swigregister(XmlEncoder)

def XmlEncoder_getVisusClassName():
    return _NonGuiOpenVisus.XmlEncoder_getVisusClassName()
XmlEncoder_getVisusClassName = _NonGuiOpenVisus.XmlEncoder_getVisusClassName

class VisusConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusConfig, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _NonGuiOpenVisus.VisusConfig_filename_set
    __swig_getmethods__["filename"] = _NonGuiOpenVisus.VisusConfig_filename_get
    if _newclass:
        filename = _swig_property(_NonGuiOpenVisus.VisusConfig_filename_get, _NonGuiOpenVisus.VisusConfig_filename_set)
    __swig_setmethods__["storage"] = _NonGuiOpenVisus.VisusConfig_storage_set
    __swig_getmethods__["storage"] = _NonGuiOpenVisus.VisusConfig_storage_get
    if _newclass:
        storage = _swig_property(_NonGuiOpenVisus.VisusConfig_storage_get, _NonGuiOpenVisus.VisusConfig_storage_set)
    __swig_setmethods__["timestamp"] = _NonGuiOpenVisus.VisusConfig_timestamp_set
    __swig_getmethods__["timestamp"] = _NonGuiOpenVisus.VisusConfig_timestamp_get
    if _newclass:
        timestamp = _swig_property(_NonGuiOpenVisus.VisusConfig_timestamp_get, _NonGuiOpenVisus.VisusConfig_timestamp_set)
    if _newclass:
        validate = staticmethod(_NonGuiOpenVisus.VisusConfig_validate)
    else:
        validate = _NonGuiOpenVisus.VisusConfig_validate
    if _newclass:
        needReload = staticmethod(_NonGuiOpenVisus.VisusConfig_needReload)
    else:
        needReload = _NonGuiOpenVisus.VisusConfig_needReload
    if _newclass:
        reload = staticmethod(_NonGuiOpenVisus.VisusConfig_reload)
    else:
        reload = _NonGuiOpenVisus.VisusConfig_reload
    if _newclass:
        readString = staticmethod(_NonGuiOpenVisus.VisusConfig_readString)
    else:
        readString = _NonGuiOpenVisus.VisusConfig_readString
    if _newclass:
        writeString = staticmethod(_NonGuiOpenVisus.VisusConfig_writeString)
    else:
        writeString = _NonGuiOpenVisus.VisusConfig_writeString
    if _newclass:
        findChildWithName = staticmethod(_NonGuiOpenVisus.VisusConfig_findChildWithName)
    else:
        findChildWithName = _NonGuiOpenVisus.VisusConfig_findChildWithName
    if _newclass:
        findAllChildsWithName = staticmethod(_NonGuiOpenVisus.VisusConfig_findAllChildsWithName)
    else:
        findAllChildsWithName = _NonGuiOpenVisus.VisusConfig_findAllChildsWithName
    __swig_destroy__ = _NonGuiOpenVisus.delete_VisusConfig
    __del__ = lambda self: None
VisusConfig_swigregister = _NonGuiOpenVisus.VisusConfig_swigregister
VisusConfig_swigregister(VisusConfig)

def VisusConfig_validate():
    return _NonGuiOpenVisus.VisusConfig_validate()
VisusConfig_validate = _NonGuiOpenVisus.VisusConfig_validate

def VisusConfig_needReload():
    return _NonGuiOpenVisus.VisusConfig_needReload()
VisusConfig_needReload = _NonGuiOpenVisus.VisusConfig_needReload

def VisusConfig_reload():
    return _NonGuiOpenVisus.VisusConfig_reload()
VisusConfig_reload = _NonGuiOpenVisus.VisusConfig_reload

def VisusConfig_readString(*args):
    return _NonGuiOpenVisus.VisusConfig_readString(*args)
VisusConfig_readString = _NonGuiOpenVisus.VisusConfig_readString

def VisusConfig_writeString(key, value):
    return _NonGuiOpenVisus.VisusConfig_writeString(key, value)
VisusConfig_writeString = _NonGuiOpenVisus.VisusConfig_writeString

def VisusConfig_findChildWithName(name):
    return _NonGuiOpenVisus.VisusConfig_findChildWithName(name)
VisusConfig_findChildWithName = _NonGuiOpenVisus.VisusConfig_findChildWithName

def VisusConfig_findAllChildsWithName(name):
    return _NonGuiOpenVisus.VisusConfig_findAllChildsWithName(name)
VisusConfig_findAllChildsWithName = _NonGuiOpenVisus.VisusConfig_findAllChildsWithName

class Color(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Color_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Color_getVisusClassName
    RGBType = _NonGuiOpenVisus.Color_RGBType
    HSBType = _NonGuiOpenVisus.Color_HSBType
    HLSType = _NonGuiOpenVisus.Color_HLSType
    CieLabType = _NonGuiOpenVisus.Color_CieLabType

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Color
    __del__ = lambda self: None

    def clampToRange(self, a, b):
        return _NonGuiOpenVisus.Color_clampToRange(self, a, b)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.Color_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.Color_parseFromString
    if _newclass:
        createFromUint32 = staticmethod(_NonGuiOpenVisus.Color_createFromUint32)
    else:
        createFromUint32 = _NonGuiOpenVisus.Color_createFromUint32
    if _newclass:
        random = staticmethod(_NonGuiOpenVisus.Color_random)
    else:
        random = _NonGuiOpenVisus.Color_random

    def getColorModel(self):
        return _NonGuiOpenVisus.Color_getColorModel(self)

    def setColorModel(self, value):
        return _NonGuiOpenVisus.Color_setColorModel(self, value)

    def get(self, index):
        return _NonGuiOpenVisus.Color_get(self, index)

    def set(self, index, value):
        return _NonGuiOpenVisus.Color_set(self, index, value)

    def __getitem__(self, index):
        return _NonGuiOpenVisus.Color___getitem__(self, index)

    def __getitem_ref__(self, index):
        return _NonGuiOpenVisus.Color___getitem_ref__(self, index)

    def assign(self, other):
        return _NonGuiOpenVisus.Color_assign(self, other)
    if _newclass:
        distance = staticmethod(_NonGuiOpenVisus.Color_distance)
    else:
        distance = _NonGuiOpenVisus.Color_distance

    def __eq__(self, other):
        return _NonGuiOpenVisus.Color___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.Color___ne__(self, other)

    def __mul__(self, s):
        return _NonGuiOpenVisus.Color___mul__(self, s)

    def withAlpha(self, alpha):
        return _NonGuiOpenVisus.Color_withAlpha(self, alpha)

    def convertToOtherModel(self, color_model):
        return _NonGuiOpenVisus.Color_convertToOtherModel(self, color_model)

    def toRGB(self):
        return _NonGuiOpenVisus.Color_toRGB(self)

    def toHSB(self):
        return _NonGuiOpenVisus.Color_toHSB(self)

    def toHLS(self):
        return _NonGuiOpenVisus.Color_toHLS(self)

    def toCieLab(self):
        return _NonGuiOpenVisus.Color_toCieLab(self)

    def getRed(self):
        return _NonGuiOpenVisus.Color_getRed(self)

    def getGreen(self):
        return _NonGuiOpenVisus.Color_getGreen(self)

    def getBlue(self):
        return _NonGuiOpenVisus.Color_getBlue(self)

    def getHue(self):
        return _NonGuiOpenVisus.Color_getHue(self)

    def getSaturation(self):
        return _NonGuiOpenVisus.Color_getSaturation(self)

    def getLightness(self):
        return _NonGuiOpenVisus.Color_getLightness(self)

    def getBrightness(self):
        return _NonGuiOpenVisus.Color_getBrightness(self)

    def getAlpha(self):
        return _NonGuiOpenVisus.Color_getAlpha(self)

    def setRed(self, value):
        return _NonGuiOpenVisus.Color_setRed(self, value)

    def setGreen(self, value):
        return _NonGuiOpenVisus.Color_setGreen(self, value)

    def setBlue(self, value):
        return _NonGuiOpenVisus.Color_setBlue(self, value)

    def setHue(self, value):
        return _NonGuiOpenVisus.Color_setHue(self, value)

    def setSaturation(self, value):
        return _NonGuiOpenVisus.Color_setSaturation(self, value)

    def setLightness(self, value):
        return _NonGuiOpenVisus.Color_setLightness(self, value)

    def setBrightness(self, value):
        return _NonGuiOpenVisus.Color_setBrightness(self, value)

    def setAlpha(self, value):
        return _NonGuiOpenVisus.Color_setAlpha(self, value)
    if _newclass:
        interpolate = staticmethod(_NonGuiOpenVisus.Color_interpolate)
    else:
        interpolate = _NonGuiOpenVisus.Color_interpolate

    def toString(self):
        return _NonGuiOpenVisus.Color_toString(self)

    def toHexString(self):
        return _NonGuiOpenVisus.Color_toHexString(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Color_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Color_readFromObjectStream(self, istream)
Color_swigregister = _NonGuiOpenVisus.Color_swigregister
Color_swigregister(Color)

def Color_getVisusClassName():
    return _NonGuiOpenVisus.Color_getVisusClassName()
Color_getVisusClassName = _NonGuiOpenVisus.Color_getVisusClassName

def Color_parseFromString(value):
    return _NonGuiOpenVisus.Color_parseFromString(value)
Color_parseFromString = _NonGuiOpenVisus.Color_parseFromString

def Color_createFromUint32(value):
    return _NonGuiOpenVisus.Color_createFromUint32(value)
Color_createFromUint32 = _NonGuiOpenVisus.Color_createFromUint32

def Color_random(Alpha=1.0):
    return _NonGuiOpenVisus.Color_random(Alpha)
Color_random = _NonGuiOpenVisus.Color_random

def Color_distance(c1, c2):
    return _NonGuiOpenVisus.Color_distance(c1, c2)
Color_distance = _NonGuiOpenVisus.Color_distance

def Color_interpolate(alpha, c1, beta, c2):
    return _NonGuiOpenVisus.Color_interpolate(alpha, c1, beta, c2)
Color_interpolate = _NonGuiOpenVisus.Color_interpolate

VISUS_NDPOINT_DIM = _NonGuiOpenVisus.VISUS_NDPOINT_DIM
class Point2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point2i_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point2i_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point2i_x_get, _NonGuiOpenVisus.Point2i_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point2i_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point2i_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point2i_y_get, _NonGuiOpenVisus.Point2i_y_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point2i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point2i_toArray(self)

    def module2(self):
        return _NonGuiOpenVisus.Point2i_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point2i_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point2i_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point2i_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point2i_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point2i_inv(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point2i___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point2i___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point2i___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point2i___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point2i___isub__(self, b)

    def __imul__(self, s):
        return _NonGuiOpenVisus.Point2i___imul__(self, s)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point2i___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point2i___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point2i_dot(self, b)

    def __mul__(self, b):
        return _NonGuiOpenVisus.Point2i___mul__(self, b)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point2i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point2i___getitem__(self, i)

    def valid(self):
        return _NonGuiOpenVisus.Point2i_valid(self)

    def biggest(self):
        return _NonGuiOpenVisus.Point2i_biggest(self)

    def smallest(self):
        return _NonGuiOpenVisus.Point2i_smallest(self)

    def toString(self):
        return _NonGuiOpenVisus.Point2i_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point2i
    __del__ = lambda self: None
Point2i_swigregister = _NonGuiOpenVisus.Point2i_swigregister
Point2i_swigregister(Point2i)

class Point2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point2f_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point2f_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point2f_x_get, _NonGuiOpenVisus.Point2f_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point2f_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point2f_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point2f_y_get, _NonGuiOpenVisus.Point2f_y_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point2f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point2f_toArray(self)

    def module2(self):
        return _NonGuiOpenVisus.Point2f_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point2f_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point2f_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point2f_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point2f_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point2f_inv(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point2f___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point2f___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point2f___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point2f___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point2f___isub__(self, b)

    def __imul__(self, s):
        return _NonGuiOpenVisus.Point2f___imul__(self, s)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point2f___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point2f___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point2f_dot(self, b)

    def __mul__(self, b):
        return _NonGuiOpenVisus.Point2f___mul__(self, b)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point2f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point2f___getitem__(self, i)

    def valid(self):
        return _NonGuiOpenVisus.Point2f_valid(self)

    def biggest(self):
        return _NonGuiOpenVisus.Point2f_biggest(self)

    def smallest(self):
        return _NonGuiOpenVisus.Point2f_smallest(self)

    def toString(self):
        return _NonGuiOpenVisus.Point2f_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point2f
    __del__ = lambda self: None
Point2f_swigregister = _NonGuiOpenVisus.Point2f_swigregister
Point2f_swigregister(Point2f)

class Point2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point2d_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point2d_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point2d_x_get, _NonGuiOpenVisus.Point2d_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point2d_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point2d_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point2d_y_get, _NonGuiOpenVisus.Point2d_y_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point2d_toArray(self)

    def module2(self):
        return _NonGuiOpenVisus.Point2d_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point2d_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point2d_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point2d_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point2d_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point2d_inv(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point2d___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point2d___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point2d___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point2d___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point2d___isub__(self, b)

    def __imul__(self, s):
        return _NonGuiOpenVisus.Point2d___imul__(self, s)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point2d___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point2d___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point2d_dot(self, b)

    def __mul__(self, b):
        return _NonGuiOpenVisus.Point2d___mul__(self, b)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point2d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point2d___getitem__(self, i)

    def valid(self):
        return _NonGuiOpenVisus.Point2d_valid(self)

    def biggest(self):
        return _NonGuiOpenVisus.Point2d_biggest(self)

    def smallest(self):
        return _NonGuiOpenVisus.Point2d_smallest(self)

    def toString(self):
        return _NonGuiOpenVisus.Point2d_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point2d
    __del__ = lambda self: None
Point2d_swigregister = _NonGuiOpenVisus.Point2d_swigregister
Point2d_swigregister(Point2d)

class Point3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point3i_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point3i_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point3i_x_get, _NonGuiOpenVisus.Point3i_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point3i_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point3i_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point3i_y_get, _NonGuiOpenVisus.Point3i_y_set)
    __swig_setmethods__["z"] = _NonGuiOpenVisus.Point3i_z_set
    __swig_getmethods__["z"] = _NonGuiOpenVisus.Point3i_z_get
    if _newclass:
        z = _swig_property(_NonGuiOpenVisus.Point3i_z_get, _NonGuiOpenVisus.Point3i_z_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point3i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point3i_toArray(self)

    def dropZ(self):
        return _NonGuiOpenVisus.Point3i_dropZ(self)

    def dropHomogeneousCoordinate(self):
        return _NonGuiOpenVisus.Point3i_dropHomogeneousCoordinate(self)

    def module2(self):
        return _NonGuiOpenVisus.Point3i_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point3i_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point3i_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point3i_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point3i_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point3i_inv(self)

    def __pos__(self):
        return _NonGuiOpenVisus.Point3i___pos__(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point3i___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point3i___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point3i___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point3i___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point3i___isub__(self, b)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point3i___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point3i___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point3i_dot(self, b)

    def __mul__(self, *args):
        return _NonGuiOpenVisus.Point3i___mul__(self, *args)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point3i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point3i___getitem__(self, i)

    def set(self, index, value):
        return _NonGuiOpenVisus.Point3i_set(self, index, value)

    def cross(self, v):
        return _NonGuiOpenVisus.Point3i_cross(self, v)

    def valid(self):
        return _NonGuiOpenVisus.Point3i_valid(self)

    def biggest(self):
        return _NonGuiOpenVisus.Point3i_biggest(self)

    def smallest(self):
        return _NonGuiOpenVisus.Point3i_smallest(self)
    if _newclass:
        min = staticmethod(_NonGuiOpenVisus.Point3i_min)
    else:
        min = _NonGuiOpenVisus.Point3i_min
    if _newclass:
        max = staticmethod(_NonGuiOpenVisus.Point3i_max)
    else:
        max = _NonGuiOpenVisus.Point3i_max

    def __lt__(self, b):
        return _NonGuiOpenVisus.Point3i___lt__(self, b)

    def __le__(self, b):
        return _NonGuiOpenVisus.Point3i___le__(self, b)

    def __gt__(self, b):
        return _NonGuiOpenVisus.Point3i___gt__(self, b)

    def __ge__(self, b):
        return _NonGuiOpenVisus.Point3i___ge__(self, b)

    def toString(self):
        return _NonGuiOpenVisus.Point3i_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point3i
    __del__ = lambda self: None
Point3i_swigregister = _NonGuiOpenVisus.Point3i_swigregister
Point3i_swigregister(Point3i)

def Point3i_min(a, b):
    return _NonGuiOpenVisus.Point3i_min(a, b)
Point3i_min = _NonGuiOpenVisus.Point3i_min

def Point3i_max(a, b):
    return _NonGuiOpenVisus.Point3i_max(a, b)
Point3i_max = _NonGuiOpenVisus.Point3i_max

class Point3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point3f_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point3f_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point3f_x_get, _NonGuiOpenVisus.Point3f_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point3f_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point3f_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point3f_y_get, _NonGuiOpenVisus.Point3f_y_set)
    __swig_setmethods__["z"] = _NonGuiOpenVisus.Point3f_z_set
    __swig_getmethods__["z"] = _NonGuiOpenVisus.Point3f_z_get
    if _newclass:
        z = _swig_property(_NonGuiOpenVisus.Point3f_z_get, _NonGuiOpenVisus.Point3f_z_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point3f_toArray(self)

    def dropZ(self):
        return _NonGuiOpenVisus.Point3f_dropZ(self)

    def dropHomogeneousCoordinate(self):
        return _NonGuiOpenVisus.Point3f_dropHomogeneousCoordinate(self)

    def module2(self):
        return _NonGuiOpenVisus.Point3f_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point3f_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point3f_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point3f_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point3f_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point3f_inv(self)

    def __pos__(self):
        return _NonGuiOpenVisus.Point3f___pos__(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point3f___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point3f___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point3f___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point3f___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point3f___isub__(self, b)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point3f___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point3f___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point3f_dot(self, b)

    def __mul__(self, *args):
        return _NonGuiOpenVisus.Point3f___mul__(self, *args)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point3f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point3f___getitem__(self, i)

    def set(self, index, value):
        return _NonGuiOpenVisus.Point3f_set(self, index, value)

    def cross(self, v):
        return _NonGuiOpenVisus.Point3f_cross(self, v)

    def valid(self):
        return _NonGuiOpenVisus.Point3f_valid(self)

    def biggest(self):
        return _NonGuiOpenVisus.Point3f_biggest(self)

    def smallest(self):
        return _NonGuiOpenVisus.Point3f_smallest(self)
    if _newclass:
        min = staticmethod(_NonGuiOpenVisus.Point3f_min)
    else:
        min = _NonGuiOpenVisus.Point3f_min
    if _newclass:
        max = staticmethod(_NonGuiOpenVisus.Point3f_max)
    else:
        max = _NonGuiOpenVisus.Point3f_max

    def __lt__(self, b):
        return _NonGuiOpenVisus.Point3f___lt__(self, b)

    def __le__(self, b):
        return _NonGuiOpenVisus.Point3f___le__(self, b)

    def __gt__(self, b):
        return _NonGuiOpenVisus.Point3f___gt__(self, b)

    def __ge__(self, b):
        return _NonGuiOpenVisus.Point3f___ge__(self, b)

    def toString(self):
        return _NonGuiOpenVisus.Point3f_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point3f
    __del__ = lambda self: None
Point3f_swigregister = _NonGuiOpenVisus.Point3f_swigregister
Point3f_swigregister(Point3f)

def Point3f_min(a, b):
    return _NonGuiOpenVisus.Point3f_min(a, b)
Point3f_min = _NonGuiOpenVisus.Point3f_min

def Point3f_max(a, b):
    return _NonGuiOpenVisus.Point3f_max(a, b)
Point3f_max = _NonGuiOpenVisus.Point3f_max

class Point3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point3d_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point3d_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point3d_x_get, _NonGuiOpenVisus.Point3d_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point3d_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point3d_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point3d_y_get, _NonGuiOpenVisus.Point3d_y_set)
    __swig_setmethods__["z"] = _NonGuiOpenVisus.Point3d_z_set
    __swig_getmethods__["z"] = _NonGuiOpenVisus.Point3d_z_get
    if _newclass:
        z = _swig_property(_NonGuiOpenVisus.Point3d_z_get, _NonGuiOpenVisus.Point3d_z_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point3d_toArray(self)

    def dropZ(self):
        return _NonGuiOpenVisus.Point3d_dropZ(self)

    def dropHomogeneousCoordinate(self):
        return _NonGuiOpenVisus.Point3d_dropHomogeneousCoordinate(self)

    def module2(self):
        return _NonGuiOpenVisus.Point3d_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point3d_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point3d_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point3d_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point3d_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point3d_inv(self)

    def __pos__(self):
        return _NonGuiOpenVisus.Point3d___pos__(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point3d___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point3d___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point3d___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point3d___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point3d___isub__(self, b)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point3d___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point3d___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point3d_dot(self, b)

    def __mul__(self, *args):
        return _NonGuiOpenVisus.Point3d___mul__(self, *args)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point3d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point3d___getitem__(self, i)

    def set(self, index, value):
        return _NonGuiOpenVisus.Point3d_set(self, index, value)

    def cross(self, v):
        return _NonGuiOpenVisus.Point3d_cross(self, v)

    def valid(self):
        return _NonGuiOpenVisus.Point3d_valid(self)

    def biggest(self):
        return _NonGuiOpenVisus.Point3d_biggest(self)

    def smallest(self):
        return _NonGuiOpenVisus.Point3d_smallest(self)
    if _newclass:
        min = staticmethod(_NonGuiOpenVisus.Point3d_min)
    else:
        min = _NonGuiOpenVisus.Point3d_min
    if _newclass:
        max = staticmethod(_NonGuiOpenVisus.Point3d_max)
    else:
        max = _NonGuiOpenVisus.Point3d_max

    def __lt__(self, b):
        return _NonGuiOpenVisus.Point3d___lt__(self, b)

    def __le__(self, b):
        return _NonGuiOpenVisus.Point3d___le__(self, b)

    def __gt__(self, b):
        return _NonGuiOpenVisus.Point3d___gt__(self, b)

    def __ge__(self, b):
        return _NonGuiOpenVisus.Point3d___ge__(self, b)

    def toString(self):
        return _NonGuiOpenVisus.Point3d_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point3d
    __del__ = lambda self: None
Point3d_swigregister = _NonGuiOpenVisus.Point3d_swigregister
Point3d_swigregister(Point3d)

def Point3d_min(a, b):
    return _NonGuiOpenVisus.Point3d_min(a, b)
Point3d_min = _NonGuiOpenVisus.Point3d_min

def Point3d_max(a, b):
    return _NonGuiOpenVisus.Point3d_max(a, b)
Point3d_max = _NonGuiOpenVisus.Point3d_max

class Point4i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point4i_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point4i_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point4i_x_get, _NonGuiOpenVisus.Point4i_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point4i_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point4i_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point4i_y_get, _NonGuiOpenVisus.Point4i_y_set)
    __swig_setmethods__["z"] = _NonGuiOpenVisus.Point4i_z_set
    __swig_getmethods__["z"] = _NonGuiOpenVisus.Point4i_z_get
    if _newclass:
        z = _swig_property(_NonGuiOpenVisus.Point4i_z_get, _NonGuiOpenVisus.Point4i_z_set)
    __swig_setmethods__["w"] = _NonGuiOpenVisus.Point4i_w_set
    __swig_getmethods__["w"] = _NonGuiOpenVisus.Point4i_w_get
    if _newclass:
        w = _swig_property(_NonGuiOpenVisus.Point4i_w_get, _NonGuiOpenVisus.Point4i_w_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point4i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point4i_toArray(self)

    def dropW(self):
        return _NonGuiOpenVisus.Point4i_dropW(self)

    def dropHomogeneousCoordinate(self):
        return _NonGuiOpenVisus.Point4i_dropHomogeneousCoordinate(self)

    def module2(self):
        return _NonGuiOpenVisus.Point4i_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point4i_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point4i_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point4i_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point4i_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point4i_inv(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point4i___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point4i___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point4i___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point4i___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point4i___isub__(self, b)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point4i___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point4i___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point4i_dot(self, b)

    def __mul__(self, b):
        return _NonGuiOpenVisus.Point4i___mul__(self, b)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point4i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point4i___getitem__(self, i)

    def valid(self):
        return _NonGuiOpenVisus.Point4i_valid(self)

    def toString(self):
        return _NonGuiOpenVisus.Point4i_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point4i
    __del__ = lambda self: None
Point4i_swigregister = _NonGuiOpenVisus.Point4i_swigregister
Point4i_swigregister(Point4i)

class Point4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point4f_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point4f_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point4f_x_get, _NonGuiOpenVisus.Point4f_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point4f_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point4f_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point4f_y_get, _NonGuiOpenVisus.Point4f_y_set)
    __swig_setmethods__["z"] = _NonGuiOpenVisus.Point4f_z_set
    __swig_getmethods__["z"] = _NonGuiOpenVisus.Point4f_z_get
    if _newclass:
        z = _swig_property(_NonGuiOpenVisus.Point4f_z_get, _NonGuiOpenVisus.Point4f_z_set)
    __swig_setmethods__["w"] = _NonGuiOpenVisus.Point4f_w_set
    __swig_getmethods__["w"] = _NonGuiOpenVisus.Point4f_w_get
    if _newclass:
        w = _swig_property(_NonGuiOpenVisus.Point4f_w_get, _NonGuiOpenVisus.Point4f_w_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point4f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point4f_toArray(self)

    def dropW(self):
        return _NonGuiOpenVisus.Point4f_dropW(self)

    def dropHomogeneousCoordinate(self):
        return _NonGuiOpenVisus.Point4f_dropHomogeneousCoordinate(self)

    def module2(self):
        return _NonGuiOpenVisus.Point4f_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point4f_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point4f_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point4f_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point4f_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point4f_inv(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point4f___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point4f___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point4f___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point4f___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point4f___isub__(self, b)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point4f___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point4f___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point4f_dot(self, b)

    def __mul__(self, b):
        return _NonGuiOpenVisus.Point4f___mul__(self, b)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point4f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point4f___getitem__(self, i)

    def valid(self):
        return _NonGuiOpenVisus.Point4f_valid(self)

    def toString(self):
        return _NonGuiOpenVisus.Point4f_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point4f
    __del__ = lambda self: None
Point4f_swigregister = _NonGuiOpenVisus.Point4f_swigregister
Point4f_swigregister(Point4f)

class Point4d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _NonGuiOpenVisus.Point4d_x_set
    __swig_getmethods__["x"] = _NonGuiOpenVisus.Point4d_x_get
    if _newclass:
        x = _swig_property(_NonGuiOpenVisus.Point4d_x_get, _NonGuiOpenVisus.Point4d_x_set)
    __swig_setmethods__["y"] = _NonGuiOpenVisus.Point4d_y_set
    __swig_getmethods__["y"] = _NonGuiOpenVisus.Point4d_y_get
    if _newclass:
        y = _swig_property(_NonGuiOpenVisus.Point4d_y_get, _NonGuiOpenVisus.Point4d_y_set)
    __swig_setmethods__["z"] = _NonGuiOpenVisus.Point4d_z_set
    __swig_getmethods__["z"] = _NonGuiOpenVisus.Point4d_z_get
    if _newclass:
        z = _swig_property(_NonGuiOpenVisus.Point4d_z_get, _NonGuiOpenVisus.Point4d_z_set)
    __swig_setmethods__["w"] = _NonGuiOpenVisus.Point4d_w_set
    __swig_getmethods__["w"] = _NonGuiOpenVisus.Point4d_w_get
    if _newclass:
        w = _swig_property(_NonGuiOpenVisus.Point4d_w_get, _NonGuiOpenVisus.Point4d_w_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Point4d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toArray(self):
        return _NonGuiOpenVisus.Point4d_toArray(self)

    def dropW(self):
        return _NonGuiOpenVisus.Point4d_dropW(self)

    def dropHomogeneousCoordinate(self):
        return _NonGuiOpenVisus.Point4d_dropHomogeneousCoordinate(self)

    def module2(self):
        return _NonGuiOpenVisus.Point4d_module2(self)

    def module(self):
        return _NonGuiOpenVisus.Point4d_module(self)

    def distance(self, p):
        return _NonGuiOpenVisus.Point4d_distance(self, p)

    def normalized(self):
        return _NonGuiOpenVisus.Point4d_normalized(self)

    def abs(self):
        return _NonGuiOpenVisus.Point4d_abs(self)

    def inv(self):
        return _NonGuiOpenVisus.Point4d_inv(self)

    def __neg__(self):
        return _NonGuiOpenVisus.Point4d___neg__(self)

    def __add__(self, b):
        return _NonGuiOpenVisus.Point4d___add__(self, b)

    def __iadd__(self, b):
        return _NonGuiOpenVisus.Point4d___iadd__(self, b)

    def __sub__(self, b):
        return _NonGuiOpenVisus.Point4d___sub__(self, b)

    def __isub__(self, b):
        return _NonGuiOpenVisus.Point4d___isub__(self, b)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Point4d___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Point4d___ne__(self, b)

    def dot(self, b):
        return _NonGuiOpenVisus.Point4d_dot(self, b)

    def __mul__(self, b):
        return _NonGuiOpenVisus.Point4d___mul__(self, b)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.Point4d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.Point4d___getitem__(self, i)

    def valid(self):
        return _NonGuiOpenVisus.Point4d_valid(self)

    def toString(self):
        return _NonGuiOpenVisus.Point4d_toString(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Point4d
    __del__ = lambda self: None
Point4d_swigregister = _NonGuiOpenVisus.Point4d_swigregister
Point4d_swigregister(Point4d)

class PointNi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointNi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointNi, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_PointNi(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _NonGuiOpenVisus.PointNi_getPointDim(self)

    def setPointDim(self, value):
        return _NonGuiOpenVisus.PointNi_setPointDim(self, value)

    def withPointDim(self, new_pdim, embed_value):
        return _NonGuiOpenVisus.PointNi_withPointDim(self, new_pdim, embed_value)
    if _newclass:
        one = staticmethod(_NonGuiOpenVisus.PointNi_one)
    else:
        one = _NonGuiOpenVisus.PointNi_one

    def toVector(self):
        return _NonGuiOpenVisus.PointNi_toVector(self)

    def valid(self):
        return _NonGuiOpenVisus.PointNi_valid(self)

    def withValueOnAxis(self, axis, value):
        return _NonGuiOpenVisus.PointNi_withValueOnAxis(self, axis, value)

    def withX(self, value):
        return _NonGuiOpenVisus.PointNi_withX(self, value)

    def withY(self, value):
        return _NonGuiOpenVisus.PointNi_withY(self, value)

    def withZ(self, value):
        return _NonGuiOpenVisus.PointNi_withZ(self, value)

    def get(self, *args):
        return _NonGuiOpenVisus.PointNi_get(self, *args)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.PointNi___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.PointNi___getitem_ref__(self, i)

    def __neg__(self):
        return _NonGuiOpenVisus.PointNi___neg__(self)

    def __add__(self, other):
        return _NonGuiOpenVisus.PointNi___add__(self, other)

    def __sub__(self, other):
        return _NonGuiOpenVisus.PointNi___sub__(self, other)

    def __iadd__(self, other):
        return _NonGuiOpenVisus.PointNi___iadd__(self, other)

    def __isub__(self, other):
        return _NonGuiOpenVisus.PointNi___isub__(self, other)

    def __imul__(self, s):
        return _NonGuiOpenVisus.PointNi___imul__(self, s)

    def __eq__(self, other):
        return _NonGuiOpenVisus.PointNi___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.PointNi___ne__(self, other)
    if _newclass:
        min = staticmethod(_NonGuiOpenVisus.PointNi_min)
    else:
        min = _NonGuiOpenVisus.PointNi_min
    if _newclass:
        max = staticmethod(_NonGuiOpenVisus.PointNi_max)
    else:
        max = _NonGuiOpenVisus.PointNi_max

    def minsize(self):
        return _NonGuiOpenVisus.PointNi_minsize(self)

    def maxsize(self):
        return _NonGuiOpenVisus.PointNi_maxsize(self)

    def __lt__(self, b):
        return _NonGuiOpenVisus.PointNi___lt__(self, b)

    def __le__(self, b):
        return _NonGuiOpenVisus.PointNi___le__(self, b)

    def __gt__(self, b):
        return _NonGuiOpenVisus.PointNi___gt__(self, b)

    def __ge__(self, b):
        return _NonGuiOpenVisus.PointNi___ge__(self, b)
    if _newclass:
        less = staticmethod(_NonGuiOpenVisus.PointNi_less)
    else:
        less = _NonGuiOpenVisus.PointNi_less
    if _newclass:
        lessEqual = staticmethod(_NonGuiOpenVisus.PointNi_lessEqual)
    else:
        lessEqual = _NonGuiOpenVisus.PointNi_lessEqual
    if _newclass:
        greater = staticmethod(_NonGuiOpenVisus.PointNi_greater)
    else:
        greater = _NonGuiOpenVisus.PointNi_greater
    if _newclass:
        greaterEqual = staticmethod(_NonGuiOpenVisus.PointNi_greaterEqual)
    else:
        greaterEqual = _NonGuiOpenVisus.PointNi_greaterEqual

    def dot(self, other):
        return _NonGuiOpenVisus.PointNi_dot(self, other)

    def dotProduct(self, other):
        return _NonGuiOpenVisus.PointNi_dotProduct(self, other)

    def getLog2(self):
        return _NonGuiOpenVisus.PointNi_getLog2(self)

    def stride(self):
        return _NonGuiOpenVisus.PointNi_stride(self)

    def innerMultiply(self, other):
        return _NonGuiOpenVisus.PointNi_innerMultiply(self, other)

    def innerDiv(self, other):
        return _NonGuiOpenVisus.PointNi_innerDiv(self, other)

    def innerProduct(self):
        return _NonGuiOpenVisus.PointNi_innerProduct(self)

    def overflow(self):
        return _NonGuiOpenVisus.PointNi_overflow(self)

    def toPoint3(self):
        return _NonGuiOpenVisus.PointNi_toPoint3(self)

    def toPoint3i(self):
        return _NonGuiOpenVisus.PointNi_toPoint3i(self)

    def toPoint3d(self):
        return _NonGuiOpenVisus.PointNi_toPoint3d(self)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.PointNi_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.PointNi_parseFromString
    if _newclass:
        parseDims = staticmethod(_NonGuiOpenVisus.PointNi_parseDims)
    else:
        parseDims = _NonGuiOpenVisus.PointNi_parseDims

    def toString(self, *args):
        return _NonGuiOpenVisus.PointNi_toString(self, *args)
    __swig_destroy__ = _NonGuiOpenVisus.delete_PointNi
    __del__ = lambda self: None
PointNi_swigregister = _NonGuiOpenVisus.PointNi_swigregister
PointNi_swigregister(PointNi)

def PointNi_one(*args):
    return _NonGuiOpenVisus.PointNi_one(*args)
PointNi_one = _NonGuiOpenVisus.PointNi_one

def PointNi_min(a, b):
    return _NonGuiOpenVisus.PointNi_min(a, b)
PointNi_min = _NonGuiOpenVisus.PointNi_min

def PointNi_max(a, b):
    return _NonGuiOpenVisus.PointNi_max(a, b)
PointNi_max = _NonGuiOpenVisus.PointNi_max

def PointNi_less(a, b):
    return _NonGuiOpenVisus.PointNi_less(a, b)
PointNi_less = _NonGuiOpenVisus.PointNi_less

def PointNi_lessEqual(a, b):
    return _NonGuiOpenVisus.PointNi_lessEqual(a, b)
PointNi_lessEqual = _NonGuiOpenVisus.PointNi_lessEqual

def PointNi_greater(a, b):
    return _NonGuiOpenVisus.PointNi_greater(a, b)
PointNi_greater = _NonGuiOpenVisus.PointNi_greater

def PointNi_greaterEqual(a, b):
    return _NonGuiOpenVisus.PointNi_greaterEqual(a, b)
PointNi_greaterEqual = _NonGuiOpenVisus.PointNi_greaterEqual

def PointNi_parseFromString(src):
    return _NonGuiOpenVisus.PointNi_parseFromString(src)
PointNi_parseFromString = _NonGuiOpenVisus.PointNi_parseFromString

def PointNi_parseDims(src):
    return _NonGuiOpenVisus.PointNi_parseDims(src)
PointNi_parseDims = _NonGuiOpenVisus.PointNi_parseDims

class PointNf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointNf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointNf, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_PointNf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _NonGuiOpenVisus.PointNf_getPointDim(self)

    def setPointDim(self, value):
        return _NonGuiOpenVisus.PointNf_setPointDim(self, value)

    def withPointDim(self, new_pdim, embed_value):
        return _NonGuiOpenVisus.PointNf_withPointDim(self, new_pdim, embed_value)
    if _newclass:
        one = staticmethod(_NonGuiOpenVisus.PointNf_one)
    else:
        one = _NonGuiOpenVisus.PointNf_one

    def toVector(self):
        return _NonGuiOpenVisus.PointNf_toVector(self)

    def valid(self):
        return _NonGuiOpenVisus.PointNf_valid(self)

    def withValueOnAxis(self, axis, value):
        return _NonGuiOpenVisus.PointNf_withValueOnAxis(self, axis, value)

    def withX(self, value):
        return _NonGuiOpenVisus.PointNf_withX(self, value)

    def withY(self, value):
        return _NonGuiOpenVisus.PointNf_withY(self, value)

    def withZ(self, value):
        return _NonGuiOpenVisus.PointNf_withZ(self, value)

    def get(self, *args):
        return _NonGuiOpenVisus.PointNf_get(self, *args)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.PointNf___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.PointNf___getitem_ref__(self, i)

    def __neg__(self):
        return _NonGuiOpenVisus.PointNf___neg__(self)

    def __add__(self, other):
        return _NonGuiOpenVisus.PointNf___add__(self, other)

    def __sub__(self, other):
        return _NonGuiOpenVisus.PointNf___sub__(self, other)

    def __iadd__(self, other):
        return _NonGuiOpenVisus.PointNf___iadd__(self, other)

    def __isub__(self, other):
        return _NonGuiOpenVisus.PointNf___isub__(self, other)

    def __imul__(self, s):
        return _NonGuiOpenVisus.PointNf___imul__(self, s)

    def __eq__(self, other):
        return _NonGuiOpenVisus.PointNf___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.PointNf___ne__(self, other)
    if _newclass:
        min = staticmethod(_NonGuiOpenVisus.PointNf_min)
    else:
        min = _NonGuiOpenVisus.PointNf_min
    if _newclass:
        max = staticmethod(_NonGuiOpenVisus.PointNf_max)
    else:
        max = _NonGuiOpenVisus.PointNf_max

    def minsize(self):
        return _NonGuiOpenVisus.PointNf_minsize(self)

    def maxsize(self):
        return _NonGuiOpenVisus.PointNf_maxsize(self)

    def __lt__(self, b):
        return _NonGuiOpenVisus.PointNf___lt__(self, b)

    def __le__(self, b):
        return _NonGuiOpenVisus.PointNf___le__(self, b)

    def __gt__(self, b):
        return _NonGuiOpenVisus.PointNf___gt__(self, b)

    def __ge__(self, b):
        return _NonGuiOpenVisus.PointNf___ge__(self, b)
    if _newclass:
        less = staticmethod(_NonGuiOpenVisus.PointNf_less)
    else:
        less = _NonGuiOpenVisus.PointNf_less
    if _newclass:
        lessEqual = staticmethod(_NonGuiOpenVisus.PointNf_lessEqual)
    else:
        lessEqual = _NonGuiOpenVisus.PointNf_lessEqual
    if _newclass:
        greater = staticmethod(_NonGuiOpenVisus.PointNf_greater)
    else:
        greater = _NonGuiOpenVisus.PointNf_greater
    if _newclass:
        greaterEqual = staticmethod(_NonGuiOpenVisus.PointNf_greaterEqual)
    else:
        greaterEqual = _NonGuiOpenVisus.PointNf_greaterEqual

    def dot(self, other):
        return _NonGuiOpenVisus.PointNf_dot(self, other)

    def dotProduct(self, other):
        return _NonGuiOpenVisus.PointNf_dotProduct(self, other)

    def getLog2(self):
        return _NonGuiOpenVisus.PointNf_getLog2(self)

    def stride(self):
        return _NonGuiOpenVisus.PointNf_stride(self)

    def innerMultiply(self, other):
        return _NonGuiOpenVisus.PointNf_innerMultiply(self, other)

    def innerDiv(self, other):
        return _NonGuiOpenVisus.PointNf_innerDiv(self, other)

    def innerProduct(self):
        return _NonGuiOpenVisus.PointNf_innerProduct(self)

    def overflow(self):
        return _NonGuiOpenVisus.PointNf_overflow(self)

    def toPoint3(self):
        return _NonGuiOpenVisus.PointNf_toPoint3(self)

    def toPoint3i(self):
        return _NonGuiOpenVisus.PointNf_toPoint3i(self)

    def toPoint3d(self):
        return _NonGuiOpenVisus.PointNf_toPoint3d(self)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.PointNf_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.PointNf_parseFromString
    if _newclass:
        parseDims = staticmethod(_NonGuiOpenVisus.PointNf_parseDims)
    else:
        parseDims = _NonGuiOpenVisus.PointNf_parseDims

    def toString(self, *args):
        return _NonGuiOpenVisus.PointNf_toString(self, *args)
    __swig_destroy__ = _NonGuiOpenVisus.delete_PointNf
    __del__ = lambda self: None
PointNf_swigregister = _NonGuiOpenVisus.PointNf_swigregister
PointNf_swigregister(PointNf)

def PointNf_one(*args):
    return _NonGuiOpenVisus.PointNf_one(*args)
PointNf_one = _NonGuiOpenVisus.PointNf_one

def PointNf_min(a, b):
    return _NonGuiOpenVisus.PointNf_min(a, b)
PointNf_min = _NonGuiOpenVisus.PointNf_min

def PointNf_max(a, b):
    return _NonGuiOpenVisus.PointNf_max(a, b)
PointNf_max = _NonGuiOpenVisus.PointNf_max

def PointNf_less(a, b):
    return _NonGuiOpenVisus.PointNf_less(a, b)
PointNf_less = _NonGuiOpenVisus.PointNf_less

def PointNf_lessEqual(a, b):
    return _NonGuiOpenVisus.PointNf_lessEqual(a, b)
PointNf_lessEqual = _NonGuiOpenVisus.PointNf_lessEqual

def PointNf_greater(a, b):
    return _NonGuiOpenVisus.PointNf_greater(a, b)
PointNf_greater = _NonGuiOpenVisus.PointNf_greater

def PointNf_greaterEqual(a, b):
    return _NonGuiOpenVisus.PointNf_greaterEqual(a, b)
PointNf_greaterEqual = _NonGuiOpenVisus.PointNf_greaterEqual

def PointNf_parseFromString(src):
    return _NonGuiOpenVisus.PointNf_parseFromString(src)
PointNf_parseFromString = _NonGuiOpenVisus.PointNf_parseFromString

def PointNf_parseDims(src):
    return _NonGuiOpenVisus.PointNf_parseDims(src)
PointNf_parseDims = _NonGuiOpenVisus.PointNf_parseDims

class PointNd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointNd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointNd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_PointNd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _NonGuiOpenVisus.PointNd_getPointDim(self)

    def setPointDim(self, value):
        return _NonGuiOpenVisus.PointNd_setPointDim(self, value)

    def withPointDim(self, new_pdim, embed_value):
        return _NonGuiOpenVisus.PointNd_withPointDim(self, new_pdim, embed_value)
    if _newclass:
        one = staticmethod(_NonGuiOpenVisus.PointNd_one)
    else:
        one = _NonGuiOpenVisus.PointNd_one

    def toVector(self):
        return _NonGuiOpenVisus.PointNd_toVector(self)

    def valid(self):
        return _NonGuiOpenVisus.PointNd_valid(self)

    def withValueOnAxis(self, axis, value):
        return _NonGuiOpenVisus.PointNd_withValueOnAxis(self, axis, value)

    def withX(self, value):
        return _NonGuiOpenVisus.PointNd_withX(self, value)

    def withY(self, value):
        return _NonGuiOpenVisus.PointNd_withY(self, value)

    def withZ(self, value):
        return _NonGuiOpenVisus.PointNd_withZ(self, value)

    def get(self, *args):
        return _NonGuiOpenVisus.PointNd_get(self, *args)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.PointNd___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.PointNd___getitem_ref__(self, i)

    def __neg__(self):
        return _NonGuiOpenVisus.PointNd___neg__(self)

    def __add__(self, other):
        return _NonGuiOpenVisus.PointNd___add__(self, other)

    def __sub__(self, other):
        return _NonGuiOpenVisus.PointNd___sub__(self, other)

    def __iadd__(self, other):
        return _NonGuiOpenVisus.PointNd___iadd__(self, other)

    def __isub__(self, other):
        return _NonGuiOpenVisus.PointNd___isub__(self, other)

    def __imul__(self, s):
        return _NonGuiOpenVisus.PointNd___imul__(self, s)

    def __eq__(self, other):
        return _NonGuiOpenVisus.PointNd___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.PointNd___ne__(self, other)
    if _newclass:
        min = staticmethod(_NonGuiOpenVisus.PointNd_min)
    else:
        min = _NonGuiOpenVisus.PointNd_min
    if _newclass:
        max = staticmethod(_NonGuiOpenVisus.PointNd_max)
    else:
        max = _NonGuiOpenVisus.PointNd_max

    def minsize(self):
        return _NonGuiOpenVisus.PointNd_minsize(self)

    def maxsize(self):
        return _NonGuiOpenVisus.PointNd_maxsize(self)

    def __lt__(self, b):
        return _NonGuiOpenVisus.PointNd___lt__(self, b)

    def __le__(self, b):
        return _NonGuiOpenVisus.PointNd___le__(self, b)

    def __gt__(self, b):
        return _NonGuiOpenVisus.PointNd___gt__(self, b)

    def __ge__(self, b):
        return _NonGuiOpenVisus.PointNd___ge__(self, b)
    if _newclass:
        less = staticmethod(_NonGuiOpenVisus.PointNd_less)
    else:
        less = _NonGuiOpenVisus.PointNd_less
    if _newclass:
        lessEqual = staticmethod(_NonGuiOpenVisus.PointNd_lessEqual)
    else:
        lessEqual = _NonGuiOpenVisus.PointNd_lessEqual
    if _newclass:
        greater = staticmethod(_NonGuiOpenVisus.PointNd_greater)
    else:
        greater = _NonGuiOpenVisus.PointNd_greater
    if _newclass:
        greaterEqual = staticmethod(_NonGuiOpenVisus.PointNd_greaterEqual)
    else:
        greaterEqual = _NonGuiOpenVisus.PointNd_greaterEqual

    def dot(self, other):
        return _NonGuiOpenVisus.PointNd_dot(self, other)

    def dotProduct(self, other):
        return _NonGuiOpenVisus.PointNd_dotProduct(self, other)

    def getLog2(self):
        return _NonGuiOpenVisus.PointNd_getLog2(self)

    def stride(self):
        return _NonGuiOpenVisus.PointNd_stride(self)

    def innerMultiply(self, other):
        return _NonGuiOpenVisus.PointNd_innerMultiply(self, other)

    def innerDiv(self, other):
        return _NonGuiOpenVisus.PointNd_innerDiv(self, other)

    def innerProduct(self):
        return _NonGuiOpenVisus.PointNd_innerProduct(self)

    def overflow(self):
        return _NonGuiOpenVisus.PointNd_overflow(self)

    def toPoint3(self):
        return _NonGuiOpenVisus.PointNd_toPoint3(self)

    def toPoint3i(self):
        return _NonGuiOpenVisus.PointNd_toPoint3i(self)

    def toPoint3d(self):
        return _NonGuiOpenVisus.PointNd_toPoint3d(self)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.PointNd_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.PointNd_parseFromString
    if _newclass:
        parseDims = staticmethod(_NonGuiOpenVisus.PointNd_parseDims)
    else:
        parseDims = _NonGuiOpenVisus.PointNd_parseDims

    def toString(self, *args):
        return _NonGuiOpenVisus.PointNd_toString(self, *args)
    __swig_destroy__ = _NonGuiOpenVisus.delete_PointNd
    __del__ = lambda self: None
PointNd_swigregister = _NonGuiOpenVisus.PointNd_swigregister
PointNd_swigregister(PointNd)

def PointNd_one(*args):
    return _NonGuiOpenVisus.PointNd_one(*args)
PointNd_one = _NonGuiOpenVisus.PointNd_one

def PointNd_min(a, b):
    return _NonGuiOpenVisus.PointNd_min(a, b)
PointNd_min = _NonGuiOpenVisus.PointNd_min

def PointNd_max(a, b):
    return _NonGuiOpenVisus.PointNd_max(a, b)
PointNd_max = _NonGuiOpenVisus.PointNd_max

def PointNd_less(a, b):
    return _NonGuiOpenVisus.PointNd_less(a, b)
PointNd_less = _NonGuiOpenVisus.PointNd_less

def PointNd_lessEqual(a, b):
    return _NonGuiOpenVisus.PointNd_lessEqual(a, b)
PointNd_lessEqual = _NonGuiOpenVisus.PointNd_lessEqual

def PointNd_greater(a, b):
    return _NonGuiOpenVisus.PointNd_greater(a, b)
PointNd_greater = _NonGuiOpenVisus.PointNd_greater

def PointNd_greaterEqual(a, b):
    return _NonGuiOpenVisus.PointNd_greaterEqual(a, b)
PointNd_greaterEqual = _NonGuiOpenVisus.PointNd_greaterEqual

def PointNd_parseFromString(src):
    return _NonGuiOpenVisus.PointNd_parseFromString(src)
PointNd_parseFromString = _NonGuiOpenVisus.PointNd_parseFromString

def PointNd_parseDims(src):
    return _NonGuiOpenVisus.PointNd_parseDims(src)
PointNd_parseDims = _NonGuiOpenVisus.PointNd_parseDims

class NdPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NdPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NdPoint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_NdPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _NonGuiOpenVisus.NdPoint_getPointDim(self)

    def setPointDim(self, value):
        return _NonGuiOpenVisus.NdPoint_setPointDim(self, value)

    def withPointDim(self, new_pdim, embed_value):
        return _NonGuiOpenVisus.NdPoint_withPointDim(self, new_pdim, embed_value)
    if _newclass:
        one = staticmethod(_NonGuiOpenVisus.NdPoint_one)
    else:
        one = _NonGuiOpenVisus.NdPoint_one

    def toVector(self):
        return _NonGuiOpenVisus.NdPoint_toVector(self)

    def valid(self):
        return _NonGuiOpenVisus.NdPoint_valid(self)

    def withValueOnAxis(self, axis, value):
        return _NonGuiOpenVisus.NdPoint_withValueOnAxis(self, axis, value)

    def withX(self, value):
        return _NonGuiOpenVisus.NdPoint_withX(self, value)

    def withY(self, value):
        return _NonGuiOpenVisus.NdPoint_withY(self, value)

    def withZ(self, value):
        return _NonGuiOpenVisus.NdPoint_withZ(self, value)

    def get(self, *args):
        return _NonGuiOpenVisus.NdPoint_get(self, *args)

    def __getitem__(self, i):
        return _NonGuiOpenVisus.NdPoint___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _NonGuiOpenVisus.NdPoint___getitem_ref__(self, i)

    def __neg__(self):
        return _NonGuiOpenVisus.NdPoint___neg__(self)

    def __add__(self, other):
        return _NonGuiOpenVisus.NdPoint___add__(self, other)

    def __sub__(self, other):
        return _NonGuiOpenVisus.NdPoint___sub__(self, other)

    def __iadd__(self, other):
        return _NonGuiOpenVisus.NdPoint___iadd__(self, other)

    def __isub__(self, other):
        return _NonGuiOpenVisus.NdPoint___isub__(self, other)

    def __imul__(self, s):
        return _NonGuiOpenVisus.NdPoint___imul__(self, s)

    def __eq__(self, other):
        return _NonGuiOpenVisus.NdPoint___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.NdPoint___ne__(self, other)
    if _newclass:
        min = staticmethod(_NonGuiOpenVisus.NdPoint_min)
    else:
        min = _NonGuiOpenVisus.NdPoint_min
    if _newclass:
        max = staticmethod(_NonGuiOpenVisus.NdPoint_max)
    else:
        max = _NonGuiOpenVisus.NdPoint_max

    def minsize(self):
        return _NonGuiOpenVisus.NdPoint_minsize(self)

    def maxsize(self):
        return _NonGuiOpenVisus.NdPoint_maxsize(self)

    def __lt__(self, b):
        return _NonGuiOpenVisus.NdPoint___lt__(self, b)

    def __le__(self, b):
        return _NonGuiOpenVisus.NdPoint___le__(self, b)

    def __gt__(self, b):
        return _NonGuiOpenVisus.NdPoint___gt__(self, b)

    def __ge__(self, b):
        return _NonGuiOpenVisus.NdPoint___ge__(self, b)
    if _newclass:
        less = staticmethod(_NonGuiOpenVisus.NdPoint_less)
    else:
        less = _NonGuiOpenVisus.NdPoint_less
    if _newclass:
        lessEqual = staticmethod(_NonGuiOpenVisus.NdPoint_lessEqual)
    else:
        lessEqual = _NonGuiOpenVisus.NdPoint_lessEqual
    if _newclass:
        greater = staticmethod(_NonGuiOpenVisus.NdPoint_greater)
    else:
        greater = _NonGuiOpenVisus.NdPoint_greater
    if _newclass:
        greaterEqual = staticmethod(_NonGuiOpenVisus.NdPoint_greaterEqual)
    else:
        greaterEqual = _NonGuiOpenVisus.NdPoint_greaterEqual

    def dot(self, other):
        return _NonGuiOpenVisus.NdPoint_dot(self, other)

    def dotProduct(self, other):
        return _NonGuiOpenVisus.NdPoint_dotProduct(self, other)

    def getLog2(self):
        return _NonGuiOpenVisus.NdPoint_getLog2(self)

    def stride(self):
        return _NonGuiOpenVisus.NdPoint_stride(self)

    def innerMultiply(self, other):
        return _NonGuiOpenVisus.NdPoint_innerMultiply(self, other)

    def innerDiv(self, other):
        return _NonGuiOpenVisus.NdPoint_innerDiv(self, other)

    def innerProduct(self):
        return _NonGuiOpenVisus.NdPoint_innerProduct(self)

    def overflow(self):
        return _NonGuiOpenVisus.NdPoint_overflow(self)

    def toPoint3(self):
        return _NonGuiOpenVisus.NdPoint_toPoint3(self)

    def toPoint3i(self):
        return _NonGuiOpenVisus.NdPoint_toPoint3i(self)

    def toPoint3d(self):
        return _NonGuiOpenVisus.NdPoint_toPoint3d(self)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.NdPoint_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.NdPoint_parseFromString
    if _newclass:
        parseDims = staticmethod(_NonGuiOpenVisus.NdPoint_parseDims)
    else:
        parseDims = _NonGuiOpenVisus.NdPoint_parseDims

    def toString(self, *args):
        return _NonGuiOpenVisus.NdPoint_toString(self, *args)
    __swig_destroy__ = _NonGuiOpenVisus.delete_NdPoint
    __del__ = lambda self: None
NdPoint_swigregister = _NonGuiOpenVisus.NdPoint_swigregister
NdPoint_swigregister(NdPoint)

def NdPoint_one(*args):
    return _NonGuiOpenVisus.NdPoint_one(*args)
NdPoint_one = _NonGuiOpenVisus.NdPoint_one

def NdPoint_min(a, b):
    return _NonGuiOpenVisus.NdPoint_min(a, b)
NdPoint_min = _NonGuiOpenVisus.NdPoint_min

def NdPoint_max(a, b):
    return _NonGuiOpenVisus.NdPoint_max(a, b)
NdPoint_max = _NonGuiOpenVisus.NdPoint_max

def NdPoint_less(a, b):
    return _NonGuiOpenVisus.NdPoint_less(a, b)
NdPoint_less = _NonGuiOpenVisus.NdPoint_less

def NdPoint_lessEqual(a, b):
    return _NonGuiOpenVisus.NdPoint_lessEqual(a, b)
NdPoint_lessEqual = _NonGuiOpenVisus.NdPoint_lessEqual

def NdPoint_greater(a, b):
    return _NonGuiOpenVisus.NdPoint_greater(a, b)
NdPoint_greater = _NonGuiOpenVisus.NdPoint_greater

def NdPoint_greaterEqual(a, b):
    return _NonGuiOpenVisus.NdPoint_greaterEqual(a, b)
NdPoint_greaterEqual = _NonGuiOpenVisus.NdPoint_greaterEqual

def NdPoint_parseFromString(src):
    return _NonGuiOpenVisus.NdPoint_parseFromString(src)
NdPoint_parseFromString = _NonGuiOpenVisus.NdPoint_parseFromString

def NdPoint_parseDims(src):
    return _NonGuiOpenVisus.NdPoint_parseDims(src)
NdPoint_parseDims = _NonGuiOpenVisus.NdPoint_parseDims

class Box3d(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box3d, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _NonGuiOpenVisus.Box3d_p1_set
    __swig_getmethods__["p1"] = _NonGuiOpenVisus.Box3d_p1_get
    if _newclass:
        p1 = _swig_property(_NonGuiOpenVisus.Box3d_p1_get, _NonGuiOpenVisus.Box3d_p1_set)
    __swig_setmethods__["p2"] = _NonGuiOpenVisus.Box3d_p2_set
    __swig_getmethods__["p2"] = _NonGuiOpenVisus.Box3d_p2_get
    if _newclass:
        p2 = _swig_property(_NonGuiOpenVisus.Box3d_p2_get, _NonGuiOpenVisus.Box3d_p2_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Box3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_NonGuiOpenVisus.Box3d_invalid)
    else:
        invalid = _NonGuiOpenVisus.Box3d_invalid

    def valid(self):
        return _NonGuiOpenVisus.Box3d_valid(self)

    def center(self):
        return _NonGuiOpenVisus.Box3d_center(self)

    def size(self):
        return _NonGuiOpenVisus.Box3d_size(self)

    def maxsize(self):
        return _NonGuiOpenVisus.Box3d_maxsize(self)

    def minsize(self):
        return _NonGuiOpenVisus.Box3d_minsize(self)

    def middle(self):
        return _NonGuiOpenVisus.Box3d_middle(self)

    def addPoint(self, p):
        return _NonGuiOpenVisus.Box3d_addPoint(self, p)

    def getPoints(self):
        return _NonGuiOpenVisus.Box3d_getPoints(self)

    def getPoint(self, *args):
        return _NonGuiOpenVisus.Box3d_getPoint(self, *args)

    def containsPoint(self, p):
        return _NonGuiOpenVisus.Box3d_containsPoint(self, p)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Box3d___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Box3d___ne__(self, b)

    def intersect(self, other):
        return _NonGuiOpenVisus.Box3d_intersect(self, other)

    def getIntersection(self, b):
        return _NonGuiOpenVisus.Box3d_getIntersection(self, b)

    def getUnion(self, b):
        return _NonGuiOpenVisus.Box3d_getUnion(self, b)

    def getPlanes(self):
        return _NonGuiOpenVisus.Box3d_getPlanes(self)

    def scaleAroundCenter(self, scale):
        return _NonGuiOpenVisus.Box3d_scaleAroundCenter(self, scale)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.Box3d_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.Box3d_parseFromString

    def toString(self):
        return _NonGuiOpenVisus.Box3d_toString(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Box3d_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Box3d_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Box3d
    __del__ = lambda self: None
Box3d_swigregister = _NonGuiOpenVisus.Box3d_swigregister
Box3d_swigregister(Box3d)

def Box3d_invalid():
    return _NonGuiOpenVisus.Box3d_invalid()
Box3d_invalid = _NonGuiOpenVisus.Box3d_invalid

def Box3d_parseFromString(value):
    return _NonGuiOpenVisus.Box3d_parseFromString(value)
Box3d_parseFromString = _NonGuiOpenVisus.Box3d_parseFromString

class Box3i(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box3i, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Box3i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _NonGuiOpenVisus.Box3i_p1_set
    __swig_getmethods__["p1"] = _NonGuiOpenVisus.Box3i_p1_get
    if _newclass:
        p1 = _swig_property(_NonGuiOpenVisus.Box3i_p1_get, _NonGuiOpenVisus.Box3i_p1_set)
    __swig_setmethods__["p2"] = _NonGuiOpenVisus.Box3i_p2_set
    __swig_getmethods__["p2"] = _NonGuiOpenVisus.Box3i_p2_get
    if _newclass:
        p2 = _swig_property(_NonGuiOpenVisus.Box3i_p2_get, _NonGuiOpenVisus.Box3i_p2_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Box3i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_NonGuiOpenVisus.Box3i_invalid)
    else:
        invalid = _NonGuiOpenVisus.Box3i_invalid

    def valid(self):
        return _NonGuiOpenVisus.Box3i_valid(self)

    def center(self):
        return _NonGuiOpenVisus.Box3i_center(self)

    def size(self):
        return _NonGuiOpenVisus.Box3i_size(self)

    def maxsize(self):
        return _NonGuiOpenVisus.Box3i_maxsize(self)

    def minsize(self):
        return _NonGuiOpenVisus.Box3i_minsize(self)

    def middle(self):
        return _NonGuiOpenVisus.Box3i_middle(self)

    def addPoint(self, p):
        return _NonGuiOpenVisus.Box3i_addPoint(self, p)

    def getPoints(self):
        return _NonGuiOpenVisus.Box3i_getPoints(self)

    def getPoint(self, *args):
        return _NonGuiOpenVisus.Box3i_getPoint(self, *args)

    def containsPoint(self, p):
        return _NonGuiOpenVisus.Box3i_containsPoint(self, p)

    def __eq__(self, b):
        return _NonGuiOpenVisus.Box3i___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.Box3i___ne__(self, b)

    def intersect(self, other):
        return _NonGuiOpenVisus.Box3i_intersect(self, other)

    def getIntersection(self, b):
        return _NonGuiOpenVisus.Box3i_getIntersection(self, b)

    def getUnion(self, b):
        return _NonGuiOpenVisus.Box3i_getUnion(self, b)

    def getPlanes(self):
        return _NonGuiOpenVisus.Box3i_getPlanes(self)

    def scaleAroundCenter(self, scale):
        return _NonGuiOpenVisus.Box3i_scaleAroundCenter(self, scale)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.Box3i_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.Box3i_parseFromString

    def toString(self):
        return _NonGuiOpenVisus.Box3i_toString(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Box3i_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Box3i_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Box3i
    __del__ = lambda self: None
Box3i_swigregister = _NonGuiOpenVisus.Box3i_swigregister
Box3i_swigregister(Box3i)

def Box3i_invalid():
    return _NonGuiOpenVisus.Box3i_invalid()
Box3i_invalid = _NonGuiOpenVisus.Box3i_invalid

def Box3i_parseFromString(value):
    return _NonGuiOpenVisus.Box3i_parseFromString(value)
Box3i_parseFromString = _NonGuiOpenVisus.Box3i_parseFromString

class BoxNd(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxNd, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxNd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _NonGuiOpenVisus.BoxNd_p1_set
    __swig_getmethods__["p1"] = _NonGuiOpenVisus.BoxNd_p1_get
    if _newclass:
        p1 = _swig_property(_NonGuiOpenVisus.BoxNd_p1_get, _NonGuiOpenVisus.BoxNd_p1_set)
    __swig_setmethods__["p2"] = _NonGuiOpenVisus.BoxNd_p2_set
    __swig_getmethods__["p2"] = _NonGuiOpenVisus.BoxNd_p2_get
    if _newclass:
        p2 = _swig_property(_NonGuiOpenVisus.BoxNd_p2_get, _NonGuiOpenVisus.BoxNd_p2_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_BoxNd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _NonGuiOpenVisus.BoxNd_getPointDim(self)
    if _newclass:
        invalid = staticmethod(_NonGuiOpenVisus.BoxNd_invalid)
    else:
        invalid = _NonGuiOpenVisus.BoxNd_invalid

    def valid(self):
        return _NonGuiOpenVisus.BoxNd_valid(self)

    def isFullDim(self):
        return _NonGuiOpenVisus.BoxNd_isFullDim(self)

    def center(self):
        return _NonGuiOpenVisus.BoxNd_center(self)

    def size(self):
        return _NonGuiOpenVisus.BoxNd_size(self)

    def maxsize(self):
        return _NonGuiOpenVisus.BoxNd_maxsize(self)

    def minsize(self):
        return _NonGuiOpenVisus.BoxNd_minsize(self)

    def middle(self):
        return _NonGuiOpenVisus.BoxNd_middle(self)

    def addPoint(self, p):
        return _NonGuiOpenVisus.BoxNd_addPoint(self, p)

    def toBox3(self):
        return _NonGuiOpenVisus.BoxNd_toBox3(self)

    def containsPoint(self, p):
        return _NonGuiOpenVisus.BoxNd_containsPoint(self, p)

    def __eq__(self, b):
        return _NonGuiOpenVisus.BoxNd___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.BoxNd___ne__(self, b)

    def intersect(self, other):
        return _NonGuiOpenVisus.BoxNd_intersect(self, other)

    def strictIntersect(self, other):
        return _NonGuiOpenVisus.BoxNd_strictIntersect(self, other)

    def getIntersection(self, b):
        return _NonGuiOpenVisus.BoxNd_getIntersection(self, b)

    def getUnion(self, b):
        return _NonGuiOpenVisus.BoxNd_getUnion(self, b)

    def containsBox(self, other):
        return _NonGuiOpenVisus.BoxNd_containsBox(self, other)

    def scaleAroundCenter(self, scale):
        return _NonGuiOpenVisus.BoxNd_scaleAroundCenter(self, scale)

    def getSlab(self, axis, v1, v2):
        return _NonGuiOpenVisus.BoxNd_getSlab(self, axis, v1, v2)

    def getXSlab(self, x1, x2):
        return _NonGuiOpenVisus.BoxNd_getXSlab(self, x1, x2)

    def getYSlab(self, y1, y2):
        return _NonGuiOpenVisus.BoxNd_getYSlab(self, y1, y2)

    def getZSlab(self, z1, z2):
        return _NonGuiOpenVisus.BoxNd_getZSlab(self, z1, z2)

    def translate(self, vt):
        return _NonGuiOpenVisus.BoxNd_translate(self, vt)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.BoxNd_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.BoxNd_parseFromString

    def toString(self):
        return _NonGuiOpenVisus.BoxNd_toString(self)

    def toOldFormatString(self):
        return _NonGuiOpenVisus.BoxNd_toOldFormatString(self)
    if _newclass:
        parseFromOldFormatString = staticmethod(_NonGuiOpenVisus.BoxNd_parseFromOldFormatString)
    else:
        parseFromOldFormatString = _NonGuiOpenVisus.BoxNd_parseFromOldFormatString

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.BoxNd_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.BoxNd_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_BoxNd
    __del__ = lambda self: None
BoxNd_swigregister = _NonGuiOpenVisus.BoxNd_swigregister
BoxNd_swigregister(BoxNd)

def BoxNd_invalid(pdim):
    return _NonGuiOpenVisus.BoxNd_invalid(pdim)
BoxNd_invalid = _NonGuiOpenVisus.BoxNd_invalid

def BoxNd_parseFromString(value):
    return _NonGuiOpenVisus.BoxNd_parseFromString(value)
BoxNd_parseFromString = _NonGuiOpenVisus.BoxNd_parseFromString

def BoxNd_parseFromOldFormatString(pdim, src):
    return _NonGuiOpenVisus.BoxNd_parseFromOldFormatString(pdim, src)
BoxNd_parseFromOldFormatString = _NonGuiOpenVisus.BoxNd_parseFromOldFormatString

class NdBox(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NdBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NdBox, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _NonGuiOpenVisus.NdBox_p1_set
    __swig_getmethods__["p1"] = _NonGuiOpenVisus.NdBox_p1_get
    if _newclass:
        p1 = _swig_property(_NonGuiOpenVisus.NdBox_p1_get, _NonGuiOpenVisus.NdBox_p1_set)
    __swig_setmethods__["p2"] = _NonGuiOpenVisus.NdBox_p2_set
    __swig_getmethods__["p2"] = _NonGuiOpenVisus.NdBox_p2_get
    if _newclass:
        p2 = _swig_property(_NonGuiOpenVisus.NdBox_p2_get, _NonGuiOpenVisus.NdBox_p2_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_NdBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _NonGuiOpenVisus.NdBox_getPointDim(self)
    if _newclass:
        invalid = staticmethod(_NonGuiOpenVisus.NdBox_invalid)
    else:
        invalid = _NonGuiOpenVisus.NdBox_invalid

    def valid(self):
        return _NonGuiOpenVisus.NdBox_valid(self)

    def isFullDim(self):
        return _NonGuiOpenVisus.NdBox_isFullDim(self)

    def center(self):
        return _NonGuiOpenVisus.NdBox_center(self)

    def size(self):
        return _NonGuiOpenVisus.NdBox_size(self)

    def maxsize(self):
        return _NonGuiOpenVisus.NdBox_maxsize(self)

    def minsize(self):
        return _NonGuiOpenVisus.NdBox_minsize(self)

    def middle(self):
        return _NonGuiOpenVisus.NdBox_middle(self)

    def addPoint(self, p):
        return _NonGuiOpenVisus.NdBox_addPoint(self, p)

    def toBox3(self):
        return _NonGuiOpenVisus.NdBox_toBox3(self)

    def containsPoint(self, p):
        return _NonGuiOpenVisus.NdBox_containsPoint(self, p)

    def __eq__(self, b):
        return _NonGuiOpenVisus.NdBox___eq__(self, b)

    def __ne__(self, b):
        return _NonGuiOpenVisus.NdBox___ne__(self, b)

    def intersect(self, other):
        return _NonGuiOpenVisus.NdBox_intersect(self, other)

    def strictIntersect(self, other):
        return _NonGuiOpenVisus.NdBox_strictIntersect(self, other)

    def getIntersection(self, b):
        return _NonGuiOpenVisus.NdBox_getIntersection(self, b)

    def getUnion(self, b):
        return _NonGuiOpenVisus.NdBox_getUnion(self, b)

    def containsBox(self, other):
        return _NonGuiOpenVisus.NdBox_containsBox(self, other)

    def scaleAroundCenter(self, scale):
        return _NonGuiOpenVisus.NdBox_scaleAroundCenter(self, scale)

    def getSlab(self, axis, v1, v2):
        return _NonGuiOpenVisus.NdBox_getSlab(self, axis, v1, v2)

    def getXSlab(self, x1, x2):
        return _NonGuiOpenVisus.NdBox_getXSlab(self, x1, x2)

    def getYSlab(self, y1, y2):
        return _NonGuiOpenVisus.NdBox_getYSlab(self, y1, y2)

    def getZSlab(self, z1, z2):
        return _NonGuiOpenVisus.NdBox_getZSlab(self, z1, z2)

    def translate(self, vt):
        return _NonGuiOpenVisus.NdBox_translate(self, vt)
    if _newclass:
        parseFromString = staticmethod(_NonGuiOpenVisus.NdBox_parseFromString)
    else:
        parseFromString = _NonGuiOpenVisus.NdBox_parseFromString

    def toString(self):
        return _NonGuiOpenVisus.NdBox_toString(self)

    def toOldFormatString(self):
        return _NonGuiOpenVisus.NdBox_toOldFormatString(self)
    if _newclass:
        parseFromOldFormatString = staticmethod(_NonGuiOpenVisus.NdBox_parseFromOldFormatString)
    else:
        parseFromOldFormatString = _NonGuiOpenVisus.NdBox_parseFromOldFormatString

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.NdBox_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.NdBox_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_NdBox
    __del__ = lambda self: None
NdBox_swigregister = _NonGuiOpenVisus.NdBox_swigregister
NdBox_swigregister(NdBox)

def NdBox_invalid(pdim):
    return _NonGuiOpenVisus.NdBox_invalid(pdim)
NdBox_invalid = _NonGuiOpenVisus.NdBox_invalid

def NdBox_parseFromString(value):
    return _NonGuiOpenVisus.NdBox_parseFromString(value)
NdBox_parseFromString = _NonGuiOpenVisus.NdBox_parseFromString

def NdBox_parseFromOldFormatString(pdim, src):
    return _NonGuiOpenVisus.NdBox_parseFromOldFormatString(pdim, src)
NdBox_parseFromOldFormatString = _NonGuiOpenVisus.NdBox_parseFromOldFormatString

class Matrix3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix3, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Matrix3_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Matrix3_getVisusClassName
    __swig_setmethods__["mat"] = _NonGuiOpenVisus.Matrix3_mat_set
    __swig_getmethods__["mat"] = _NonGuiOpenVisus.Matrix3_mat_get
    if _newclass:
        mat = _swig_property(_NonGuiOpenVisus.Matrix3_mat_get, _NonGuiOpenVisus.Matrix3_mat_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Matrix3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toString(self):
        return _NonGuiOpenVisus.Matrix3_toString(self)

    def __getitem__(self, idx):
        return _NonGuiOpenVisus.Matrix3___getitem__(self, idx)

    def __getitem_ref__(self, idx):
        return _NonGuiOpenVisus.Matrix3___getitem_ref__(self, idx)

    def __eq__(self, other):
        return _NonGuiOpenVisus.Matrix3___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.Matrix3___ne__(self, other)
    if _newclass:
        identity = staticmethod(_NonGuiOpenVisus.Matrix3_identity)
    else:
        identity = _NonGuiOpenVisus.Matrix3_identity
    if _newclass:
        zero = staticmethod(_NonGuiOpenVisus.Matrix3_zero)
    else:
        zero = _NonGuiOpenVisus.Matrix3_zero

    def __call__(self, i, j):
        return _NonGuiOpenVisus.Matrix3___call__(self, i, j)

    def __neg__(self):
        return _NonGuiOpenVisus.Matrix3___neg__(self)

    def __add__(self, other):
        return _NonGuiOpenVisus.Matrix3___add__(self, other)

    def __isub__(self, other):
        return _NonGuiOpenVisus.Matrix3___isub__(self, other)

    def __mul__(self, *args):
        return _NonGuiOpenVisus.Matrix3___mul__(self, *args)

    def transpose(self):
        return _NonGuiOpenVisus.Matrix3_transpose(self)

    def determinant(self):
        return _NonGuiOpenVisus.Matrix3_determinant(self)

    def invert(self):
        return _NonGuiOpenVisus.Matrix3_invert(self)

    def row(self, i):
        return _NonGuiOpenVisus.Matrix3_row(self, i)

    def col(self, j):
        return _NonGuiOpenVisus.Matrix3_col(self, j)
    if _newclass:
        translate = staticmethod(_NonGuiOpenVisus.Matrix3_translate)
    else:
        translate = _NonGuiOpenVisus.Matrix3_translate
    if _newclass:
        scale = staticmethod(_NonGuiOpenVisus.Matrix3_scale)
    else:
        scale = _NonGuiOpenVisus.Matrix3_scale
    if _newclass:
        rotate = staticmethod(_NonGuiOpenVisus.Matrix3_rotate)
    else:
        rotate = _NonGuiOpenVisus.Matrix3_rotate

    def toQuaternion(self):
        return _NonGuiOpenVisus.Matrix3_toQuaternion(self)
    if _newclass:
        scaleAroundCenter = staticmethod(_NonGuiOpenVisus.Matrix3_scaleAroundCenter)
    else:
        scaleAroundCenter = _NonGuiOpenVisus.Matrix3_scaleAroundCenter
    __swig_destroy__ = _NonGuiOpenVisus.delete_Matrix3
    __del__ = lambda self: None
Matrix3_swigregister = _NonGuiOpenVisus.Matrix3_swigregister
Matrix3_swigregister(Matrix3)

def Matrix3_getVisusClassName():
    return _NonGuiOpenVisus.Matrix3_getVisusClassName()
Matrix3_getVisusClassName = _NonGuiOpenVisus.Matrix3_getVisusClassName

def Matrix3_identity():
    return _NonGuiOpenVisus.Matrix3_identity()
Matrix3_identity = _NonGuiOpenVisus.Matrix3_identity

def Matrix3_zero():
    return _NonGuiOpenVisus.Matrix3_zero()
Matrix3_zero = _NonGuiOpenVisus.Matrix3_zero

def Matrix3_translate(vt):
    return _NonGuiOpenVisus.Matrix3_translate(vt)
Matrix3_translate = _NonGuiOpenVisus.Matrix3_translate

def Matrix3_scale(*args):
    return _NonGuiOpenVisus.Matrix3_scale(*args)
Matrix3_scale = _NonGuiOpenVisus.Matrix3_scale

def Matrix3_rotate(q):
    return _NonGuiOpenVisus.Matrix3_rotate(q)
Matrix3_rotate = _NonGuiOpenVisus.Matrix3_rotate

def Matrix3_scaleAroundCenter(center, vs):
    return _NonGuiOpenVisus.Matrix3_scaleAroundCenter(center, vs)
Matrix3_scaleAroundCenter = _NonGuiOpenVisus.Matrix3_scaleAroundCenter


def __mul__(*args):
    return _NonGuiOpenVisus.__mul__(*args)
__mul__ = _NonGuiOpenVisus.__mul__
class Matrix4(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix4, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix4, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Matrix4_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Matrix4_getVisusClassName
    __swig_setmethods__["mat"] = _NonGuiOpenVisus.Matrix4_mat_set
    __swig_getmethods__["mat"] = _NonGuiOpenVisus.Matrix4_mat_get
    if _newclass:
        mat = _swig_property(_NonGuiOpenVisus.Matrix4_mat_get, _NonGuiOpenVisus.Matrix4_mat_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Matrix4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def dropW(self):
        return _NonGuiOpenVisus.Matrix4_dropW(self)

    def dropZ(self):
        return _NonGuiOpenVisus.Matrix4_dropZ(self)

    def getRow(self, R):
        return _NonGuiOpenVisus.Matrix4_getRow(self, R)

    def setRow(self, R, value):
        return _NonGuiOpenVisus.Matrix4_setRow(self, R, value)

    def getColumn(self, C):
        return _NonGuiOpenVisus.Matrix4_getColumn(self, C)

    def setColumn(self, C, value):
        return _NonGuiOpenVisus.Matrix4_setColumn(self, C, value)

    def __eq__(self, src):
        return _NonGuiOpenVisus.Matrix4___eq__(self, src)

    def __ne__(self, src):
        return _NonGuiOpenVisus.Matrix4___ne__(self, src)

    def valid(self):
        return _NonGuiOpenVisus.Matrix4_valid(self)

    def __getitem__(self, idx):
        return _NonGuiOpenVisus.Matrix4___getitem__(self, idx)

    def __getitem_ref__(self, idx):
        return _NonGuiOpenVisus.Matrix4___getitem_ref__(self, idx)

    def __neg__(self):
        return _NonGuiOpenVisus.Matrix4___neg__(self)

    def __mul__(self, *args):
        return _NonGuiOpenVisus.Matrix4___mul__(self, *args)

    def __imul__(self, b):
        return _NonGuiOpenVisus.Matrix4___imul__(self, b)

    def __call__(self, row, col):
        return _NonGuiOpenVisus.Matrix4___call__(self, row, col)

    def toString(self):
        return _NonGuiOpenVisus.Matrix4_toString(self)

    def toStringWithPrecision(self, precision=2):
        return _NonGuiOpenVisus.Matrix4_toStringWithPrecision(self, precision)

    def isOrthogonal(self):
        return _NonGuiOpenVisus.Matrix4_isOrthogonal(self)

    def transpose(self):
        return _NonGuiOpenVisus.Matrix4_transpose(self)

    def determinant(self):
        return _NonGuiOpenVisus.Matrix4_determinant(self)

    def invert(self):
        return _NonGuiOpenVisus.Matrix4_invert(self)

    def getLookAt(self, pos, dir, vup):
        return _NonGuiOpenVisus.Matrix4_getLookAt(self, pos, dir, vup)
    if _newclass:
        identity = staticmethod(_NonGuiOpenVisus.Matrix4_identity)
    else:
        identity = _NonGuiOpenVisus.Matrix4_identity

    def isIdentity(self):
        return _NonGuiOpenVisus.Matrix4_isIdentity(self)

    def isZero(self):
        return _NonGuiOpenVisus.Matrix4_isZero(self)
    if _newclass:
        zero = staticmethod(_NonGuiOpenVisus.Matrix4_zero)
    else:
        zero = _NonGuiOpenVisus.Matrix4_zero
    if _newclass:
        perspective = staticmethod(_NonGuiOpenVisus.Matrix4_perspective)
    else:
        perspective = _NonGuiOpenVisus.Matrix4_perspective
    if _newclass:
        lookAt = staticmethod(_NonGuiOpenVisus.Matrix4_lookAt)
    else:
        lookAt = _NonGuiOpenVisus.Matrix4_lookAt
    if _newclass:
        scale = staticmethod(_NonGuiOpenVisus.Matrix4_scale)
    else:
        scale = _NonGuiOpenVisus.Matrix4_scale
    if _newclass:
        translate = staticmethod(_NonGuiOpenVisus.Matrix4_translate)
    else:
        translate = _NonGuiOpenVisus.Matrix4_translate
    if _newclass:
        scaleAndTranslate = staticmethod(_NonGuiOpenVisus.Matrix4_scaleAndTranslate)
    else:
        scaleAndTranslate = _NonGuiOpenVisus.Matrix4_scaleAndTranslate
    if _newclass:
        rotate = staticmethod(_NonGuiOpenVisus.Matrix4_rotate)
    else:
        rotate = _NonGuiOpenVisus.Matrix4_rotate
    if _newclass:
        rotateAroundAxis = staticmethod(_NonGuiOpenVisus.Matrix4_rotateAroundAxis)
    else:
        rotateAroundAxis = _NonGuiOpenVisus.Matrix4_rotateAroundAxis
    if _newclass:
        rotateAroundCenter = staticmethod(_NonGuiOpenVisus.Matrix4_rotateAroundCenter)
    else:
        rotateAroundCenter = _NonGuiOpenVisus.Matrix4_rotateAroundCenter
    if _newclass:
        scaleAroundAxis = staticmethod(_NonGuiOpenVisus.Matrix4_scaleAroundAxis)
    else:
        scaleAroundAxis = _NonGuiOpenVisus.Matrix4_scaleAroundAxis
    if _newclass:
        scaleAroundCenter = staticmethod(_NonGuiOpenVisus.Matrix4_scaleAroundCenter)
    else:
        scaleAroundCenter = _NonGuiOpenVisus.Matrix4_scaleAroundCenter
    if _newclass:
        frustum = staticmethod(_NonGuiOpenVisus.Matrix4_frustum)
    else:
        frustum = _NonGuiOpenVisus.Matrix4_frustum
    if _newclass:
        ortho = staticmethod(_NonGuiOpenVisus.Matrix4_ortho)
    else:
        ortho = _NonGuiOpenVisus.Matrix4_ortho
    if _newclass:
        viewport = staticmethod(_NonGuiOpenVisus.Matrix4_viewport)
    else:
        viewport = _NonGuiOpenVisus.Matrix4_viewport

    def toQuaternion(self):
        return _NonGuiOpenVisus.Matrix4_toQuaternion(self)

    def swapColums(self, C1, C2):
        return _NonGuiOpenVisus.Matrix4_swapColums(self, C1, C2)
    if _newclass:
        embed = staticmethod(_NonGuiOpenVisus.Matrix4_embed)
    else:
        embed = _NonGuiOpenVisus.Matrix4_embed
    if _newclass:
        interpolate = staticmethod(_NonGuiOpenVisus.Matrix4_interpolate)
    else:
        interpolate = _NonGuiOpenVisus.Matrix4_interpolate

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Matrix4_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Matrix4_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Matrix4
    __del__ = lambda self: None
Matrix4_swigregister = _NonGuiOpenVisus.Matrix4_swigregister
Matrix4_swigregister(Matrix4)

def Matrix4_getVisusClassName():
    return _NonGuiOpenVisus.Matrix4_getVisusClassName()
Matrix4_getVisusClassName = _NonGuiOpenVisus.Matrix4_getVisusClassName

def Matrix4_identity():
    return _NonGuiOpenVisus.Matrix4_identity()
Matrix4_identity = _NonGuiOpenVisus.Matrix4_identity

def Matrix4_zero():
    return _NonGuiOpenVisus.Matrix4_zero()
Matrix4_zero = _NonGuiOpenVisus.Matrix4_zero

def Matrix4_perspective(fovy, aspect, zNear, zFar):
    return _NonGuiOpenVisus.Matrix4_perspective(fovy, aspect, zNear, zFar)
Matrix4_perspective = _NonGuiOpenVisus.Matrix4_perspective

def Matrix4_lookAt(eye, center, up):
    return _NonGuiOpenVisus.Matrix4_lookAt(eye, center, up)
Matrix4_lookAt = _NonGuiOpenVisus.Matrix4_lookAt

def Matrix4_scale(vs):
    return _NonGuiOpenVisus.Matrix4_scale(vs)
Matrix4_scale = _NonGuiOpenVisus.Matrix4_scale

def Matrix4_translate(*args):
    return _NonGuiOpenVisus.Matrix4_translate(*args)
Matrix4_translate = _NonGuiOpenVisus.Matrix4_translate

def Matrix4_scaleAndTranslate(vs, vt):
    return _NonGuiOpenVisus.Matrix4_scaleAndTranslate(vs, vt)
Matrix4_scaleAndTranslate = _NonGuiOpenVisus.Matrix4_scaleAndTranslate

def Matrix4_rotate(*args):
    return _NonGuiOpenVisus.Matrix4_rotate(*args)
Matrix4_rotate = _NonGuiOpenVisus.Matrix4_rotate

def Matrix4_rotateAroundAxis(axis, angle):
    return _NonGuiOpenVisus.Matrix4_rotateAroundAxis(axis, angle)
Matrix4_rotateAroundAxis = _NonGuiOpenVisus.Matrix4_rotateAroundAxis

def Matrix4_rotateAroundCenter(center, axis, angle):
    return _NonGuiOpenVisus.Matrix4_rotateAroundCenter(center, axis, angle)
Matrix4_rotateAroundCenter = _NonGuiOpenVisus.Matrix4_rotateAroundCenter

def Matrix4_scaleAroundAxis(axis, k):
    return _NonGuiOpenVisus.Matrix4_scaleAroundAxis(axis, k)
Matrix4_scaleAroundAxis = _NonGuiOpenVisus.Matrix4_scaleAroundAxis

def Matrix4_scaleAroundCenter(center, axis, k):
    return _NonGuiOpenVisus.Matrix4_scaleAroundCenter(center, axis, k)
Matrix4_scaleAroundCenter = _NonGuiOpenVisus.Matrix4_scaleAroundCenter

def Matrix4_frustum(left, right, bottom, top, nearZ, farZ):
    return _NonGuiOpenVisus.Matrix4_frustum(left, right, bottom, top, nearZ, farZ)
Matrix4_frustum = _NonGuiOpenVisus.Matrix4_frustum

def Matrix4_ortho(left, right, bottom, top, nearZ, farZ):
    return _NonGuiOpenVisus.Matrix4_ortho(left, right, bottom, top, nearZ, farZ)
Matrix4_ortho = _NonGuiOpenVisus.Matrix4_ortho

def Matrix4_viewport(x, y, width, height):
    return _NonGuiOpenVisus.Matrix4_viewport(x, y, width, height)
Matrix4_viewport = _NonGuiOpenVisus.Matrix4_viewport

def Matrix4_embed(axis, offset):
    return _NonGuiOpenVisus.Matrix4_embed(axis, offset)
Matrix4_embed = _NonGuiOpenVisus.Matrix4_embed

def Matrix4_interpolate(alpha, T1, beta, T2):
    return _NonGuiOpenVisus.Matrix4_interpolate(alpha, T1, beta, T2)
Matrix4_interpolate = _NonGuiOpenVisus.Matrix4_interpolate

class QDUMatrixDecomposition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QDUMatrixDecomposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QDUMatrixDecomposition, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.QDUMatrixDecomposition_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.QDUMatrixDecomposition_getVisusClassName
    __swig_setmethods__["Q"] = _NonGuiOpenVisus.QDUMatrixDecomposition_Q_set
    __swig_getmethods__["Q"] = _NonGuiOpenVisus.QDUMatrixDecomposition_Q_get
    if _newclass:
        Q = _swig_property(_NonGuiOpenVisus.QDUMatrixDecomposition_Q_get, _NonGuiOpenVisus.QDUMatrixDecomposition_Q_set)
    __swig_setmethods__["D"] = _NonGuiOpenVisus.QDUMatrixDecomposition_D_set
    __swig_getmethods__["D"] = _NonGuiOpenVisus.QDUMatrixDecomposition_D_get
    if _newclass:
        D = _swig_property(_NonGuiOpenVisus.QDUMatrixDecomposition_D_get, _NonGuiOpenVisus.QDUMatrixDecomposition_D_set)
    __swig_setmethods__["U"] = _NonGuiOpenVisus.QDUMatrixDecomposition_U_set
    __swig_getmethods__["U"] = _NonGuiOpenVisus.QDUMatrixDecomposition_U_get
    if _newclass:
        U = _swig_property(_NonGuiOpenVisus.QDUMatrixDecomposition_U_get, _NonGuiOpenVisus.QDUMatrixDecomposition_U_set)

    def __init__(self, T):
        this = _NonGuiOpenVisus.new_QDUMatrixDecomposition(T)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_QDUMatrixDecomposition
    __del__ = lambda self: None
QDUMatrixDecomposition_swigregister = _NonGuiOpenVisus.QDUMatrixDecomposition_swigregister
QDUMatrixDecomposition_swigregister(QDUMatrixDecomposition)

def QDUMatrixDecomposition_getVisusClassName():
    return _NonGuiOpenVisus.QDUMatrixDecomposition_getVisusClassName()
QDUMatrixDecomposition_getVisusClassName = _NonGuiOpenVisus.QDUMatrixDecomposition_getVisusClassName

class TRSMatrixDecomposition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRSMatrixDecomposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRSMatrixDecomposition, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.TRSMatrixDecomposition_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.TRSMatrixDecomposition_getVisusClassName
    __swig_setmethods__["translate"] = _NonGuiOpenVisus.TRSMatrixDecomposition_translate_set
    __swig_getmethods__["translate"] = _NonGuiOpenVisus.TRSMatrixDecomposition_translate_get
    if _newclass:
        translate = _swig_property(_NonGuiOpenVisus.TRSMatrixDecomposition_translate_get, _NonGuiOpenVisus.TRSMatrixDecomposition_translate_set)
    __swig_setmethods__["rotate"] = _NonGuiOpenVisus.TRSMatrixDecomposition_rotate_set
    __swig_getmethods__["rotate"] = _NonGuiOpenVisus.TRSMatrixDecomposition_rotate_get
    if _newclass:
        rotate = _swig_property(_NonGuiOpenVisus.TRSMatrixDecomposition_rotate_get, _NonGuiOpenVisus.TRSMatrixDecomposition_rotate_set)
    __swig_setmethods__["scale"] = _NonGuiOpenVisus.TRSMatrixDecomposition_scale_set
    __swig_getmethods__["scale"] = _NonGuiOpenVisus.TRSMatrixDecomposition_scale_get
    if _newclass:
        scale = _swig_property(_NonGuiOpenVisus.TRSMatrixDecomposition_scale_get, _NonGuiOpenVisus.TRSMatrixDecomposition_scale_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_TRSMatrixDecomposition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toMatrix(self):
        return _NonGuiOpenVisus.TRSMatrixDecomposition_toMatrix(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_TRSMatrixDecomposition
    __del__ = lambda self: None
TRSMatrixDecomposition_swigregister = _NonGuiOpenVisus.TRSMatrixDecomposition_swigregister
TRSMatrixDecomposition_swigregister(TRSMatrixDecomposition)

def TRSMatrixDecomposition_getVisusClassName():
    return _NonGuiOpenVisus.TRSMatrixDecomposition_getVisusClassName()
TRSMatrixDecomposition_getVisusClassName = _NonGuiOpenVisus.TRSMatrixDecomposition_getVisusClassName

class MatrixMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixMap, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.MatrixMap_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.MatrixMap_getVisusClassName
    __swig_setmethods__["T"] = _NonGuiOpenVisus.MatrixMap_T_set
    __swig_getmethods__["T"] = _NonGuiOpenVisus.MatrixMap_T_get
    if _newclass:
        T = _swig_property(_NonGuiOpenVisus.MatrixMap_T_get, _NonGuiOpenVisus.MatrixMap_T_set)
    __swig_setmethods__["Ti"] = _NonGuiOpenVisus.MatrixMap_Ti_set
    __swig_getmethods__["Ti"] = _NonGuiOpenVisus.MatrixMap_Ti_get
    if _newclass:
        Ti = _swig_property(_NonGuiOpenVisus.MatrixMap_Ti_get, _NonGuiOpenVisus.MatrixMap_Ti_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_MatrixMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def applyDirectMap(self, *args):
        return _NonGuiOpenVisus.MatrixMap_applyDirectMap(self, *args)

    def applyInverseMap(self, *args):
        return _NonGuiOpenVisus.MatrixMap_applyInverseMap(self, *args)
    __swig_destroy__ = _NonGuiOpenVisus.delete_MatrixMap
    __del__ = lambda self: None
MatrixMap_swigregister = _NonGuiOpenVisus.MatrixMap_swigregister
MatrixMap_swigregister(MatrixMap)

def MatrixMap_getVisusClassName():
    return _NonGuiOpenVisus.MatrixMap_getVisusClassName()
MatrixMap_getVisusClassName = _NonGuiOpenVisus.MatrixMap_getVisusClassName

class Position(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Position_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Position_getVisusClassName

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Position(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_NonGuiOpenVisus.Position_invalid)
    else:
        invalid = _NonGuiOpenVisus.Position_invalid

    def getPointDim(self):
        return _NonGuiOpenVisus.Position_getPointDim(self)

    def __eq__(self, other):
        return _NonGuiOpenVisus.Position___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.Position___ne__(self, other)

    def valid(self):
        return _NonGuiOpenVisus.Position_valid(self)

    def getTransformation(self):
        return _NonGuiOpenVisus.Position_getTransformation(self)

    def setTransformation(self, value):
        return _NonGuiOpenVisus.Position_setTransformation(self, value)

    def getBox(self):
        return _NonGuiOpenVisus.Position_getBox(self)

    def getNdBox(self):
        return _NonGuiOpenVisus.Position_getNdBox(self)

    def withoutTransformation(self):
        return _NonGuiOpenVisus.Position_withoutTransformation(self)

    def toAxisAlignedBox(self):
        return _NonGuiOpenVisus.Position_toAxisAlignedBox(self)
    if _newclass:
        shrink = staticmethod(_NonGuiOpenVisus.Position_shrink)
    else:
        shrink = _NonGuiOpenVisus.Position_shrink

    def toString(self):
        return _NonGuiOpenVisus.Position_toString(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Position_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Position_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Position
    __del__ = lambda self: None
Position_swigregister = _NonGuiOpenVisus.Position_swigregister
Position_swigregister(Position)

def Position_getVisusClassName():
    return _NonGuiOpenVisus.Position_getVisusClassName()
Position_getVisusClassName = _NonGuiOpenVisus.Position_getVisusClassName

def Position_invalid():
    return _NonGuiOpenVisus.Position_invalid()
Position_invalid = _NonGuiOpenVisus.Position_invalid

def Position_shrink(dst_box, map, position):
    return _NonGuiOpenVisus.Position_shrink(dst_box, map, position)
Position_shrink = _NonGuiOpenVisus.Position_shrink

class Range(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Range_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Range_getVisusClassName
    __swig_setmethods__["From"] = _NonGuiOpenVisus.Range_From_set
    __swig_getmethods__["From"] = _NonGuiOpenVisus.Range_From_get
    if _newclass:
        From = _swig_property(_NonGuiOpenVisus.Range_From_get, _NonGuiOpenVisus.Range_From_set)
    __swig_setmethods__["To"] = _NonGuiOpenVisus.Range_To_set
    __swig_getmethods__["To"] = _NonGuiOpenVisus.Range_To_get
    if _newclass:
        To = _swig_property(_NonGuiOpenVisus.Range_To_get, _NonGuiOpenVisus.Range_To_set)
    __swig_setmethods__["step"] = _NonGuiOpenVisus.Range_step_set
    __swig_getmethods__["step"] = _NonGuiOpenVisus.Range_step_get
    if _newclass:
        step = _swig_property(_NonGuiOpenVisus.Range_step_get, _NonGuiOpenVisus.Range_step_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Range(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Range
    __del__ = lambda self: None

    def __eq__(self, other):
        return _NonGuiOpenVisus.Range___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.Range___ne__(self, other)

    def contains(self, value):
        return _NonGuiOpenVisus.Range_contains(self, value)
    if _newclass:
        invalid = staticmethod(_NonGuiOpenVisus.Range_invalid)
    else:
        invalid = _NonGuiOpenVisus.Range_invalid

    def valid(self):
        return _NonGuiOpenVisus.Range_valid(self)

    def delta(self):
        return _NonGuiOpenVisus.Range_delta(self)

    def clamp(self, v):
        return _NonGuiOpenVisus.Range_clamp(self, v)

    def toString(self):
        return _NonGuiOpenVisus.Range_toString(self)

    def getUnion(self, other):
        return _NonGuiOpenVisus.Range_getUnion(self, other)

    def getIntersection(self, other):
        return _NonGuiOpenVisus.Range_getIntersection(self, other)

    def getScaleTranslate(self, *args):
        return _NonGuiOpenVisus.Range_getScaleTranslate(self, *args)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Range_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Range_readFromObjectStream(self, istream)
Range_swigregister = _NonGuiOpenVisus.Range_swigregister
Range_swigregister(Range)

def Range_getVisusClassName():
    return _NonGuiOpenVisus.Range_getVisusClassName()
Range_getVisusClassName = _NonGuiOpenVisus.Range_getVisusClassName

def Range_invalid():
    return _NonGuiOpenVisus.Range_invalid()
Range_invalid = _NonGuiOpenVisus.Range_invalid

class DType(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DType, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DType, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.DType_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.DType_getVisusClassName

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_DType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_NonGuiOpenVisus.DType_fromString)
    else:
        fromString = _NonGuiOpenVisus.DType_fromString

    def toString(self):
        return _NonGuiOpenVisus.DType_toString(self)

    def isDecimal(self):
        return _NonGuiOpenVisus.DType_isDecimal(self)

    def __eq__(self, other):
        return _NonGuiOpenVisus.DType___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.DType___ne__(self, other)

    def valid(self):
        return _NonGuiOpenVisus.DType_valid(self)

    def isVectorOf(self, other):
        return _NonGuiOpenVisus.DType_isVectorOf(self, other)

    def ncomponents(self):
        return _NonGuiOpenVisus.DType_ncomponents(self)

    def getBitSize(self, *args):
        return _NonGuiOpenVisus.DType_getBitSize(self, *args)

    def getByteSize(self, *args):
        return _NonGuiOpenVisus.DType_getByteSize(self, *args)

    def isUnsigned(self):
        return _NonGuiOpenVisus.DType_isUnsigned(self)

    def getBitsOffset(self, C):
        return _NonGuiOpenVisus.DType_getBitsOffset(self, C)

    def get(self, C):
        return _NonGuiOpenVisus.DType_get(self, C)

    def getDTypeRange(self, component=0):
        return _NonGuiOpenVisus.DType_getDTypeRange(self, component)

    def withDTypeRange(self, value, component=0):
        return _NonGuiOpenVisus.DType_withDTypeRange(self, value, component)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.DType_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.DType_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_DType
    __del__ = lambda self: None
DType_swigregister = _NonGuiOpenVisus.DType_swigregister
DType_swigregister(DType)

def DType_getVisusClassName():
    return _NonGuiOpenVisus.DType_getVisusClassName()
DType_getVisusClassName = _NonGuiOpenVisus.DType_getVisusClassName

def DType_fromString(s):
    return _NonGuiOpenVisus.DType_fromString(s)
DType_fromString = _NonGuiOpenVisus.DType_fromString

class DTypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DTypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DTypes, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["UINT1"] = _NonGuiOpenVisus.DTypes_UINT1_set
    __swig_getmethods__["UINT1"] = _NonGuiOpenVisus.DTypes_UINT1_get
    if _newclass:
        UINT1 = _swig_property(_NonGuiOpenVisus.DTypes_UINT1_get, _NonGuiOpenVisus.DTypes_UINT1_set)
    __swig_setmethods__["INT8"] = _NonGuiOpenVisus.DTypes_INT8_set
    __swig_getmethods__["INT8"] = _NonGuiOpenVisus.DTypes_INT8_get
    if _newclass:
        INT8 = _swig_property(_NonGuiOpenVisus.DTypes_INT8_get, _NonGuiOpenVisus.DTypes_INT8_set)
    __swig_setmethods__["INT8_GA"] = _NonGuiOpenVisus.DTypes_INT8_GA_set
    __swig_getmethods__["INT8_GA"] = _NonGuiOpenVisus.DTypes_INT8_GA_get
    if _newclass:
        INT8_GA = _swig_property(_NonGuiOpenVisus.DTypes_INT8_GA_get, _NonGuiOpenVisus.DTypes_INT8_GA_set)
    __swig_setmethods__["INT8_RGB"] = _NonGuiOpenVisus.DTypes_INT8_RGB_set
    __swig_getmethods__["INT8_RGB"] = _NonGuiOpenVisus.DTypes_INT8_RGB_get
    if _newclass:
        INT8_RGB = _swig_property(_NonGuiOpenVisus.DTypes_INT8_RGB_get, _NonGuiOpenVisus.DTypes_INT8_RGB_set)
    __swig_setmethods__["INT8_RGBA"] = _NonGuiOpenVisus.DTypes_INT8_RGBA_set
    __swig_getmethods__["INT8_RGBA"] = _NonGuiOpenVisus.DTypes_INT8_RGBA_get
    if _newclass:
        INT8_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_INT8_RGBA_get, _NonGuiOpenVisus.DTypes_INT8_RGBA_set)
    __swig_setmethods__["UINT8"] = _NonGuiOpenVisus.DTypes_UINT8_set
    __swig_getmethods__["UINT8"] = _NonGuiOpenVisus.DTypes_UINT8_get
    if _newclass:
        UINT8 = _swig_property(_NonGuiOpenVisus.DTypes_UINT8_get, _NonGuiOpenVisus.DTypes_UINT8_set)
    __swig_setmethods__["UINT8_GA"] = _NonGuiOpenVisus.DTypes_UINT8_GA_set
    __swig_getmethods__["UINT8_GA"] = _NonGuiOpenVisus.DTypes_UINT8_GA_get
    if _newclass:
        UINT8_GA = _swig_property(_NonGuiOpenVisus.DTypes_UINT8_GA_get, _NonGuiOpenVisus.DTypes_UINT8_GA_set)
    __swig_setmethods__["UINT8_RGB"] = _NonGuiOpenVisus.DTypes_UINT8_RGB_set
    __swig_getmethods__["UINT8_RGB"] = _NonGuiOpenVisus.DTypes_UINT8_RGB_get
    if _newclass:
        UINT8_RGB = _swig_property(_NonGuiOpenVisus.DTypes_UINT8_RGB_get, _NonGuiOpenVisus.DTypes_UINT8_RGB_set)
    __swig_setmethods__["UINT8_RGBA"] = _NonGuiOpenVisus.DTypes_UINT8_RGBA_set
    __swig_getmethods__["UINT8_RGBA"] = _NonGuiOpenVisus.DTypes_UINT8_RGBA_get
    if _newclass:
        UINT8_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_UINT8_RGBA_get, _NonGuiOpenVisus.DTypes_UINT8_RGBA_set)
    __swig_setmethods__["INT16"] = _NonGuiOpenVisus.DTypes_INT16_set
    __swig_getmethods__["INT16"] = _NonGuiOpenVisus.DTypes_INT16_get
    if _newclass:
        INT16 = _swig_property(_NonGuiOpenVisus.DTypes_INT16_get, _NonGuiOpenVisus.DTypes_INT16_set)
    __swig_setmethods__["INT16_GA"] = _NonGuiOpenVisus.DTypes_INT16_GA_set
    __swig_getmethods__["INT16_GA"] = _NonGuiOpenVisus.DTypes_INT16_GA_get
    if _newclass:
        INT16_GA = _swig_property(_NonGuiOpenVisus.DTypes_INT16_GA_get, _NonGuiOpenVisus.DTypes_INT16_GA_set)
    __swig_setmethods__["INT16_RGB"] = _NonGuiOpenVisus.DTypes_INT16_RGB_set
    __swig_getmethods__["INT16_RGB"] = _NonGuiOpenVisus.DTypes_INT16_RGB_get
    if _newclass:
        INT16_RGB = _swig_property(_NonGuiOpenVisus.DTypes_INT16_RGB_get, _NonGuiOpenVisus.DTypes_INT16_RGB_set)
    __swig_setmethods__["INT16_RGBA"] = _NonGuiOpenVisus.DTypes_INT16_RGBA_set
    __swig_getmethods__["INT16_RGBA"] = _NonGuiOpenVisus.DTypes_INT16_RGBA_get
    if _newclass:
        INT16_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_INT16_RGBA_get, _NonGuiOpenVisus.DTypes_INT16_RGBA_set)
    __swig_setmethods__["UINT16"] = _NonGuiOpenVisus.DTypes_UINT16_set
    __swig_getmethods__["UINT16"] = _NonGuiOpenVisus.DTypes_UINT16_get
    if _newclass:
        UINT16 = _swig_property(_NonGuiOpenVisus.DTypes_UINT16_get, _NonGuiOpenVisus.DTypes_UINT16_set)
    __swig_setmethods__["UINT16_GA"] = _NonGuiOpenVisus.DTypes_UINT16_GA_set
    __swig_getmethods__["UINT16_GA"] = _NonGuiOpenVisus.DTypes_UINT16_GA_get
    if _newclass:
        UINT16_GA = _swig_property(_NonGuiOpenVisus.DTypes_UINT16_GA_get, _NonGuiOpenVisus.DTypes_UINT16_GA_set)
    __swig_setmethods__["UINT16_RGB"] = _NonGuiOpenVisus.DTypes_UINT16_RGB_set
    __swig_getmethods__["UINT16_RGB"] = _NonGuiOpenVisus.DTypes_UINT16_RGB_get
    if _newclass:
        UINT16_RGB = _swig_property(_NonGuiOpenVisus.DTypes_UINT16_RGB_get, _NonGuiOpenVisus.DTypes_UINT16_RGB_set)
    __swig_setmethods__["UINT16_RGBA"] = _NonGuiOpenVisus.DTypes_UINT16_RGBA_set
    __swig_getmethods__["UINT16_RGBA"] = _NonGuiOpenVisus.DTypes_UINT16_RGBA_get
    if _newclass:
        UINT16_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_UINT16_RGBA_get, _NonGuiOpenVisus.DTypes_UINT16_RGBA_set)
    __swig_setmethods__["INT32"] = _NonGuiOpenVisus.DTypes_INT32_set
    __swig_getmethods__["INT32"] = _NonGuiOpenVisus.DTypes_INT32_get
    if _newclass:
        INT32 = _swig_property(_NonGuiOpenVisus.DTypes_INT32_get, _NonGuiOpenVisus.DTypes_INT32_set)
    __swig_setmethods__["INT32_GA"] = _NonGuiOpenVisus.DTypes_INT32_GA_set
    __swig_getmethods__["INT32_GA"] = _NonGuiOpenVisus.DTypes_INT32_GA_get
    if _newclass:
        INT32_GA = _swig_property(_NonGuiOpenVisus.DTypes_INT32_GA_get, _NonGuiOpenVisus.DTypes_INT32_GA_set)
    __swig_setmethods__["INT32_RGB"] = _NonGuiOpenVisus.DTypes_INT32_RGB_set
    __swig_getmethods__["INT32_RGB"] = _NonGuiOpenVisus.DTypes_INT32_RGB_get
    if _newclass:
        INT32_RGB = _swig_property(_NonGuiOpenVisus.DTypes_INT32_RGB_get, _NonGuiOpenVisus.DTypes_INT32_RGB_set)
    __swig_setmethods__["INT32_RGBA"] = _NonGuiOpenVisus.DTypes_INT32_RGBA_set
    __swig_getmethods__["INT32_RGBA"] = _NonGuiOpenVisus.DTypes_INT32_RGBA_get
    if _newclass:
        INT32_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_INT32_RGBA_get, _NonGuiOpenVisus.DTypes_INT32_RGBA_set)
    __swig_setmethods__["UINT32"] = _NonGuiOpenVisus.DTypes_UINT32_set
    __swig_getmethods__["UINT32"] = _NonGuiOpenVisus.DTypes_UINT32_get
    if _newclass:
        UINT32 = _swig_property(_NonGuiOpenVisus.DTypes_UINT32_get, _NonGuiOpenVisus.DTypes_UINT32_set)
    __swig_setmethods__["UINT32_GA"] = _NonGuiOpenVisus.DTypes_UINT32_GA_set
    __swig_getmethods__["UINT32_GA"] = _NonGuiOpenVisus.DTypes_UINT32_GA_get
    if _newclass:
        UINT32_GA = _swig_property(_NonGuiOpenVisus.DTypes_UINT32_GA_get, _NonGuiOpenVisus.DTypes_UINT32_GA_set)
    __swig_setmethods__["UINT32_RGB"] = _NonGuiOpenVisus.DTypes_UINT32_RGB_set
    __swig_getmethods__["UINT32_RGB"] = _NonGuiOpenVisus.DTypes_UINT32_RGB_get
    if _newclass:
        UINT32_RGB = _swig_property(_NonGuiOpenVisus.DTypes_UINT32_RGB_get, _NonGuiOpenVisus.DTypes_UINT32_RGB_set)
    __swig_setmethods__["UINT32_RGBA"] = _NonGuiOpenVisus.DTypes_UINT32_RGBA_set
    __swig_getmethods__["UINT32_RGBA"] = _NonGuiOpenVisus.DTypes_UINT32_RGBA_get
    if _newclass:
        UINT32_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_UINT32_RGBA_get, _NonGuiOpenVisus.DTypes_UINT32_RGBA_set)
    __swig_setmethods__["INT64"] = _NonGuiOpenVisus.DTypes_INT64_set
    __swig_getmethods__["INT64"] = _NonGuiOpenVisus.DTypes_INT64_get
    if _newclass:
        INT64 = _swig_property(_NonGuiOpenVisus.DTypes_INT64_get, _NonGuiOpenVisus.DTypes_INT64_set)
    __swig_setmethods__["INT64_GA"] = _NonGuiOpenVisus.DTypes_INT64_GA_set
    __swig_getmethods__["INT64_GA"] = _NonGuiOpenVisus.DTypes_INT64_GA_get
    if _newclass:
        INT64_GA = _swig_property(_NonGuiOpenVisus.DTypes_INT64_GA_get, _NonGuiOpenVisus.DTypes_INT64_GA_set)
    __swig_setmethods__["INT64_RGB"] = _NonGuiOpenVisus.DTypes_INT64_RGB_set
    __swig_getmethods__["INT64_RGB"] = _NonGuiOpenVisus.DTypes_INT64_RGB_get
    if _newclass:
        INT64_RGB = _swig_property(_NonGuiOpenVisus.DTypes_INT64_RGB_get, _NonGuiOpenVisus.DTypes_INT64_RGB_set)
    __swig_setmethods__["INT64_RGBA"] = _NonGuiOpenVisus.DTypes_INT64_RGBA_set
    __swig_getmethods__["INT64_RGBA"] = _NonGuiOpenVisus.DTypes_INT64_RGBA_get
    if _newclass:
        INT64_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_INT64_RGBA_get, _NonGuiOpenVisus.DTypes_INT64_RGBA_set)
    __swig_setmethods__["UINT64"] = _NonGuiOpenVisus.DTypes_UINT64_set
    __swig_getmethods__["UINT64"] = _NonGuiOpenVisus.DTypes_UINT64_get
    if _newclass:
        UINT64 = _swig_property(_NonGuiOpenVisus.DTypes_UINT64_get, _NonGuiOpenVisus.DTypes_UINT64_set)
    __swig_setmethods__["UINT64_GA"] = _NonGuiOpenVisus.DTypes_UINT64_GA_set
    __swig_getmethods__["UINT64_GA"] = _NonGuiOpenVisus.DTypes_UINT64_GA_get
    if _newclass:
        UINT64_GA = _swig_property(_NonGuiOpenVisus.DTypes_UINT64_GA_get, _NonGuiOpenVisus.DTypes_UINT64_GA_set)
    __swig_setmethods__["UINT64_RGB"] = _NonGuiOpenVisus.DTypes_UINT64_RGB_set
    __swig_getmethods__["UINT64_RGB"] = _NonGuiOpenVisus.DTypes_UINT64_RGB_get
    if _newclass:
        UINT64_RGB = _swig_property(_NonGuiOpenVisus.DTypes_UINT64_RGB_get, _NonGuiOpenVisus.DTypes_UINT64_RGB_set)
    __swig_setmethods__["UINT64_RGBA"] = _NonGuiOpenVisus.DTypes_UINT64_RGBA_set
    __swig_getmethods__["UINT64_RGBA"] = _NonGuiOpenVisus.DTypes_UINT64_RGBA_get
    if _newclass:
        UINT64_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_UINT64_RGBA_get, _NonGuiOpenVisus.DTypes_UINT64_RGBA_set)
    __swig_setmethods__["FLOAT32"] = _NonGuiOpenVisus.DTypes_FLOAT32_set
    __swig_getmethods__["FLOAT32"] = _NonGuiOpenVisus.DTypes_FLOAT32_get
    if _newclass:
        FLOAT32 = _swig_property(_NonGuiOpenVisus.DTypes_FLOAT32_get, _NonGuiOpenVisus.DTypes_FLOAT32_set)
    __swig_setmethods__["FLOAT32_GA"] = _NonGuiOpenVisus.DTypes_FLOAT32_GA_set
    __swig_getmethods__["FLOAT32_GA"] = _NonGuiOpenVisus.DTypes_FLOAT32_GA_get
    if _newclass:
        FLOAT32_GA = _swig_property(_NonGuiOpenVisus.DTypes_FLOAT32_GA_get, _NonGuiOpenVisus.DTypes_FLOAT32_GA_set)
    __swig_setmethods__["FLOAT32_RGB"] = _NonGuiOpenVisus.DTypes_FLOAT32_RGB_set
    __swig_getmethods__["FLOAT32_RGB"] = _NonGuiOpenVisus.DTypes_FLOAT32_RGB_get
    if _newclass:
        FLOAT32_RGB = _swig_property(_NonGuiOpenVisus.DTypes_FLOAT32_RGB_get, _NonGuiOpenVisus.DTypes_FLOAT32_RGB_set)
    __swig_setmethods__["FLOAT32_RGBA"] = _NonGuiOpenVisus.DTypes_FLOAT32_RGBA_set
    __swig_getmethods__["FLOAT32_RGBA"] = _NonGuiOpenVisus.DTypes_FLOAT32_RGBA_get
    if _newclass:
        FLOAT32_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_FLOAT32_RGBA_get, _NonGuiOpenVisus.DTypes_FLOAT32_RGBA_set)
    __swig_setmethods__["FLOAT64"] = _NonGuiOpenVisus.DTypes_FLOAT64_set
    __swig_getmethods__["FLOAT64"] = _NonGuiOpenVisus.DTypes_FLOAT64_get
    if _newclass:
        FLOAT64 = _swig_property(_NonGuiOpenVisus.DTypes_FLOAT64_get, _NonGuiOpenVisus.DTypes_FLOAT64_set)
    __swig_setmethods__["FLOAT64_GA"] = _NonGuiOpenVisus.DTypes_FLOAT64_GA_set
    __swig_getmethods__["FLOAT64_GA"] = _NonGuiOpenVisus.DTypes_FLOAT64_GA_get
    if _newclass:
        FLOAT64_GA = _swig_property(_NonGuiOpenVisus.DTypes_FLOAT64_GA_get, _NonGuiOpenVisus.DTypes_FLOAT64_GA_set)
    __swig_setmethods__["FLOAT64_RGB"] = _NonGuiOpenVisus.DTypes_FLOAT64_RGB_set
    __swig_getmethods__["FLOAT64_RGB"] = _NonGuiOpenVisus.DTypes_FLOAT64_RGB_get
    if _newclass:
        FLOAT64_RGB = _swig_property(_NonGuiOpenVisus.DTypes_FLOAT64_RGB_get, _NonGuiOpenVisus.DTypes_FLOAT64_RGB_set)
    __swig_setmethods__["FLOAT64_RGBA"] = _NonGuiOpenVisus.DTypes_FLOAT64_RGBA_set
    __swig_getmethods__["FLOAT64_RGBA"] = _NonGuiOpenVisus.DTypes_FLOAT64_RGBA_get
    if _newclass:
        FLOAT64_RGBA = _swig_property(_NonGuiOpenVisus.DTypes_FLOAT64_RGBA_get, _NonGuiOpenVisus.DTypes_FLOAT64_RGBA_set)
    __swig_destroy__ = _NonGuiOpenVisus.delete_DTypes
    __del__ = lambda self: None
DTypes_swigregister = _NonGuiOpenVisus.DTypes_swigregister
DTypes_swigregister(DTypes)

class Field(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Field_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Field_getVisusClassName
    __swig_setmethods__["name"] = _NonGuiOpenVisus.Field_name_set
    __swig_getmethods__["name"] = _NonGuiOpenVisus.Field_name_get
    if _newclass:
        name = _swig_property(_NonGuiOpenVisus.Field_name_get, _NonGuiOpenVisus.Field_name_set)
    __swig_setmethods__["dtype"] = _NonGuiOpenVisus.Field_dtype_set
    __swig_getmethods__["dtype"] = _NonGuiOpenVisus.Field_dtype_get
    if _newclass:
        dtype = _swig_property(_NonGuiOpenVisus.Field_dtype_get, _NonGuiOpenVisus.Field_dtype_set)
    __swig_setmethods__["description"] = _NonGuiOpenVisus.Field_description_set
    __swig_getmethods__["description"] = _NonGuiOpenVisus.Field_description_get
    if _newclass:
        description = _swig_property(_NonGuiOpenVisus.Field_description_get, _NonGuiOpenVisus.Field_description_set)
    __swig_setmethods__["index"] = _NonGuiOpenVisus.Field_index_set
    __swig_getmethods__["index"] = _NonGuiOpenVisus.Field_index_get
    if _newclass:
        index = _swig_property(_NonGuiOpenVisus.Field_index_get, _NonGuiOpenVisus.Field_index_set)
    __swig_setmethods__["default_compression"] = _NonGuiOpenVisus.Field_default_compression_set
    __swig_getmethods__["default_compression"] = _NonGuiOpenVisus.Field_default_compression_get
    if _newclass:
        default_compression = _swig_property(_NonGuiOpenVisus.Field_default_compression_get, _NonGuiOpenVisus.Field_default_compression_set)
    __swig_setmethods__["default_layout"] = _NonGuiOpenVisus.Field_default_layout_set
    __swig_getmethods__["default_layout"] = _NonGuiOpenVisus.Field_default_layout_get
    if _newclass:
        default_layout = _swig_property(_NonGuiOpenVisus.Field_default_layout_get, _NonGuiOpenVisus.Field_default_layout_set)
    __swig_setmethods__["default_value"] = _NonGuiOpenVisus.Field_default_value_set
    __swig_getmethods__["default_value"] = _NonGuiOpenVisus.Field_default_value_get
    if _newclass:
        default_value = _swig_property(_NonGuiOpenVisus.Field_default_value_get, _NonGuiOpenVisus.Field_default_value_set)
    __swig_setmethods__["filter"] = _NonGuiOpenVisus.Field_filter_set
    __swig_getmethods__["filter"] = _NonGuiOpenVisus.Field_filter_get
    if _newclass:
        filter = _swig_property(_NonGuiOpenVisus.Field_filter_get, _NonGuiOpenVisus.Field_filter_set)
    __swig_setmethods__["params"] = _NonGuiOpenVisus.Field_params_set
    __swig_getmethods__["params"] = _NonGuiOpenVisus.Field_params_get
    if _newclass:
        params = _swig_property(_NonGuiOpenVisus.Field_params_get, _NonGuiOpenVisus.Field_params_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Field(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valid(self):
        return _NonGuiOpenVisus.Field_valid(self)

    def getDescription(self, bUseNameIfEmpty=True):
        return _NonGuiOpenVisus.Field_getDescription(self, bUseNameIfEmpty)

    def setDescription(self, value):
        return _NonGuiOpenVisus.Field_setDescription(self, value)

    def hasParam(self, key):
        return _NonGuiOpenVisus.Field_hasParam(self, key)

    def getParam(self, *args):
        return _NonGuiOpenVisus.Field_getParam(self, *args)

    def getDTypeRange(self, component=0):
        return _NonGuiOpenVisus.Field_getDTypeRange(self, component)

    def setDTypeRange(self, value, component=0):
        return _NonGuiOpenVisus.Field_setDTypeRange(self, value, component)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Field_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Field_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Field
    __del__ = lambda self: None
Field_swigregister = _NonGuiOpenVisus.Field_swigregister
Field_swigregister(Field)

def Field_getVisusClassName():
    return _NonGuiOpenVisus.Field_getVisusClassName()
Field_getVisusClassName = _NonGuiOpenVisus.Field_getVisusClassName

class Array(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Array_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Array_getVisusClassName
    __swig_setmethods__["dtype"] = _NonGuiOpenVisus.Array_dtype_set
    __swig_getmethods__["dtype"] = _NonGuiOpenVisus.Array_dtype_get
    if _newclass:
        dtype = _swig_property(_NonGuiOpenVisus.Array_dtype_get, _NonGuiOpenVisus.Array_dtype_set)
    __swig_setmethods__["dims"] = _NonGuiOpenVisus.Array_dims_set
    __swig_getmethods__["dims"] = _NonGuiOpenVisus.Array_dims_get
    if _newclass:
        dims = _swig_property(_NonGuiOpenVisus.Array_dims_get, _NonGuiOpenVisus.Array_dims_set)
    __swig_setmethods__["url"] = _NonGuiOpenVisus.Array_url_set
    __swig_getmethods__["url"] = _NonGuiOpenVisus.Array_url_get
    if _newclass:
        url = _swig_property(_NonGuiOpenVisus.Array_url_get, _NonGuiOpenVisus.Array_url_set)
    __swig_setmethods__["layout"] = _NonGuiOpenVisus.Array_layout_set
    __swig_getmethods__["layout"] = _NonGuiOpenVisus.Array_layout_get
    if _newclass:
        layout = _swig_property(_NonGuiOpenVisus.Array_layout_get, _NonGuiOpenVisus.Array_layout_set)
    __swig_setmethods__["bounds"] = _NonGuiOpenVisus.Array_bounds_set
    __swig_getmethods__["bounds"] = _NonGuiOpenVisus.Array_bounds_get
    if _newclass:
        bounds = _swig_property(_NonGuiOpenVisus.Array_bounds_get, _NonGuiOpenVisus.Array_bounds_set)
    __swig_setmethods__["clipping"] = _NonGuiOpenVisus.Array_clipping_set
    __swig_getmethods__["clipping"] = _NonGuiOpenVisus.Array_clipping_get
    if _newclass:
        clipping = _swig_property(_NonGuiOpenVisus.Array_clipping_get, _NonGuiOpenVisus.Array_clipping_set)
    __swig_setmethods__["heap"] = _NonGuiOpenVisus.Array_heap_set
    __swig_getmethods__["heap"] = _NonGuiOpenVisus.Array_heap_get
    if _newclass:
        heap = _swig_property(_NonGuiOpenVisus.Array_heap_get, _NonGuiOpenVisus.Array_heap_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Array
    __del__ = lambda self: None

    def __nonzero__(self):
        return _NonGuiOpenVisus.Array___nonzero__(self)
    __bool__ = __nonzero__



    def getPointDim(self):
        return _NonGuiOpenVisus.Array_getPointDim(self)

    def getWidth(self):
        return _NonGuiOpenVisus.Array_getWidth(self)

    def getHeight(self):
        return _NonGuiOpenVisus.Array_getHeight(self)

    def getDepth(self):
        return _NonGuiOpenVisus.Array_getDepth(self)

    def getTotalNumberOfSamples(self):
        return _NonGuiOpenVisus.Array_getTotalNumberOfSamples(self)

    def shareProperties(self, other):
        return _NonGuiOpenVisus.Array_shareProperties(self, other)
    if _newclass:
        createView = staticmethod(_NonGuiOpenVisus.Array_createView)
    else:
        createView = _NonGuiOpenVisus.Array_createView

    def isAllZero(self):
        return _NonGuiOpenVisus.Array_isAllZero(self)

    def c_capacity(self):
        return _NonGuiOpenVisus.Array_c_capacity(self)

    def c_size(self):
        return _NonGuiOpenVisus.Array_c_size(self)

    def c_ptr(self):
        return _NonGuiOpenVisus.Array_c_ptr(self)

    def shrink(self):
        return _NonGuiOpenVisus.Array_shrink(self)

    def fillWithValue(self, value):
        return _NonGuiOpenVisus.Array_fillWithValue(self, value)

    def resize(self, *args):
        return _NonGuiOpenVisus.Array_resize(self, *args)

    def getComponent(self, *args):
        return _NonGuiOpenVisus.Array_getComponent(self, *args)

    def setComponent(self, *args):
        return _NonGuiOpenVisus.Array_setComponent(self, *args)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Array_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Array_readFromObjectStream(self, istream)

    def __getitem__(self, index):
        return _NonGuiOpenVisus.Array___getitem__(self, index)

    def __add__(self, other):
        return _NonGuiOpenVisus.Array___add__(self, other)

    def __sub__(self, other):
        return _NonGuiOpenVisus.Array___sub__(self, other)

    def __mul__(self, *args):
        return _NonGuiOpenVisus.Array___mul__(self, *args)

    def __truediv__(self, *args):
        return _NonGuiOpenVisus.Array___div__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, other):
        return _NonGuiOpenVisus.Array___iadd__(self, other)

    def __isub__(self, other):
        return _NonGuiOpenVisus.Array___isub__(self, other)

    def __imul__(self, *args):
        return _NonGuiOpenVisus.Array___imul__(self, *args)

    def __itruediv__(self, *args):
        return _NonGuiOpenVisus.Array___itruediv__(self, *args)
    __idiv__ = __itruediv__


    if _newclass:
        fromVectorInt32 = staticmethod(_NonGuiOpenVisus.Array_fromVectorInt32)
    else:
        fromVectorInt32 = _NonGuiOpenVisus.Array_fromVectorInt32
    if _newclass:
        fromVectorFloat64 = staticmethod(_NonGuiOpenVisus.Array_fromVectorFloat64)
    else:
        fromVectorFloat64 = _NonGuiOpenVisus.Array_fromVectorFloat64

    def toNumPy(self):
        return _NonGuiOpenVisus.Array_toNumPy(self)
    if _newclass:
        fromNumPy = staticmethod(_NonGuiOpenVisus.Array_fromNumPy)
    else:
        fromNumPy = _NonGuiOpenVisus.Array_fromNumPy

    def __rmul__(self, v):
      return self.__mul__(v)

Array_swigregister = _NonGuiOpenVisus.Array_swigregister
Array_swigregister(Array)

def Array_getVisusClassName():
    return _NonGuiOpenVisus.Array_getVisusClassName()
Array_getVisusClassName = _NonGuiOpenVisus.Array_getVisusClassName

def Array_createView(*args):
    return _NonGuiOpenVisus.Array_createView(*args)
Array_createView = _NonGuiOpenVisus.Array_createView

def Array_fromVectorInt32(dims, vector):
    return _NonGuiOpenVisus.Array_fromVectorInt32(dims, vector)
Array_fromVectorInt32 = _NonGuiOpenVisus.Array_fromVectorInt32

def Array_fromVectorFloat64(dims, vector):
    return _NonGuiOpenVisus.Array_fromVectorFloat64(dims, vector)
Array_fromVectorFloat64 = _NonGuiOpenVisus.Array_fromVectorFloat64

def Array_fromNumPy(obj, ndim=0):
    return _NonGuiOpenVisus.Array_fromNumPy(obj, ndim)
Array_fromNumPy = _NonGuiOpenVisus.Array_fromNumPy

class ArrayPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPlugin, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.ArrayPlugin_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.ArrayPlugin_getVisusClassName
    __swig_destroy__ = _NonGuiOpenVisus.delete_ArrayPlugin
    __del__ = lambda self: None

    def handleStatImage(self, url):
        return _NonGuiOpenVisus.ArrayPlugin_handleStatImage(self, url)

    def handleLoadImage(self, url, args):
        return _NonGuiOpenVisus.ArrayPlugin_handleLoadImage(self, url, args)

    def handleSaveImage(self, url, src, args):
        return _NonGuiOpenVisus.ArrayPlugin_handleSaveImage(self, url, src, args)

    def handleLoadImageFromMemory(self, src, args):
        return _NonGuiOpenVisus.ArrayPlugin_handleLoadImageFromMemory(self, src, args)
ArrayPlugin_swigregister = _NonGuiOpenVisus.ArrayPlugin_swigregister
ArrayPlugin_swigregister(ArrayPlugin)

def ArrayPlugin_getVisusClassName():
    return _NonGuiOpenVisus.ArrayPlugin_getVisusClassName()
ArrayPlugin_getVisusClassName = _NonGuiOpenVisus.ArrayPlugin_getVisusClassName

class DevNullArrayPlugin(ArrayPlugin):
    __swig_setmethods__ = {}
    for _s in [ArrayPlugin]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DevNullArrayPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayPlugin]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DevNullArrayPlugin, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.DevNullArrayPlugin_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.DevNullArrayPlugin_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_DevNullArrayPlugin()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DevNullArrayPlugin
    __del__ = lambda self: None

    def handleLoadImage(self, url, args):
        return _NonGuiOpenVisus.DevNullArrayPlugin_handleLoadImage(self, url, args)

    def handleSaveImage(self, url, src, args):
        return _NonGuiOpenVisus.DevNullArrayPlugin_handleSaveImage(self, url, src, args)
DevNullArrayPlugin_swigregister = _NonGuiOpenVisus.DevNullArrayPlugin_swigregister
DevNullArrayPlugin_swigregister(DevNullArrayPlugin)

def DevNullArrayPlugin_getVisusClassName():
    return _NonGuiOpenVisus.DevNullArrayPlugin_getVisusClassName()
DevNullArrayPlugin_getVisusClassName = _NonGuiOpenVisus.DevNullArrayPlugin_getVisusClassName

class FreeImageArrayPlugin(ArrayPlugin):
    __swig_setmethods__ = {}
    for _s in [ArrayPlugin]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreeImageArrayPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayPlugin]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FreeImageArrayPlugin, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.FreeImageArrayPlugin_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.FreeImageArrayPlugin_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_FreeImageArrayPlugin()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_FreeImageArrayPlugin
    __del__ = lambda self: None

    def handleStatImage(self, url):
        return _NonGuiOpenVisus.FreeImageArrayPlugin_handleStatImage(self, url)

    def handleLoadImage(self, url, args):
        return _NonGuiOpenVisus.FreeImageArrayPlugin_handleLoadImage(self, url, args)

    def handleSaveImage(self, url, src, args):
        return _NonGuiOpenVisus.FreeImageArrayPlugin_handleSaveImage(self, url, src, args)

    def handleLoadImageFromMemory(self, src, args):
        return _NonGuiOpenVisus.FreeImageArrayPlugin_handleLoadImageFromMemory(self, src, args)
FreeImageArrayPlugin_swigregister = _NonGuiOpenVisus.FreeImageArrayPlugin_swigregister
FreeImageArrayPlugin_swigregister(FreeImageArrayPlugin)

def FreeImageArrayPlugin_getVisusClassName():
    return _NonGuiOpenVisus.FreeImageArrayPlugin_getVisusClassName()
FreeImageArrayPlugin_getVisusClassName = _NonGuiOpenVisus.FreeImageArrayPlugin_getVisusClassName

class RawArrayPlugin(ArrayPlugin):
    __swig_setmethods__ = {}
    for _s in [ArrayPlugin]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RawArrayPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [ArrayPlugin]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RawArrayPlugin, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.RawArrayPlugin_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.RawArrayPlugin_getVisusClassName
    __swig_setmethods__["extensions"] = _NonGuiOpenVisus.RawArrayPlugin_extensions_set
    __swig_getmethods__["extensions"] = _NonGuiOpenVisus.RawArrayPlugin_extensions_get
    if _newclass:
        extensions = _swig_property(_NonGuiOpenVisus.RawArrayPlugin_extensions_get, _NonGuiOpenVisus.RawArrayPlugin_extensions_set)

    def __init__(self):
        this = _NonGuiOpenVisus.new_RawArrayPlugin()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_RawArrayPlugin
    __del__ = lambda self: None

    def handleStatImage(self, url):
        return _NonGuiOpenVisus.RawArrayPlugin_handleStatImage(self, url)

    def handleLoadImage(self, url, args):
        return _NonGuiOpenVisus.RawArrayPlugin_handleLoadImage(self, url, args)

    def handleSaveImage(self, url, src, args):
        return _NonGuiOpenVisus.RawArrayPlugin_handleSaveImage(self, url, src, args)
RawArrayPlugin_swigregister = _NonGuiOpenVisus.RawArrayPlugin_swigregister
RawArrayPlugin_swigregister(RawArrayPlugin)

def RawArrayPlugin_getVisusClassName():
    return _NonGuiOpenVisus.RawArrayPlugin_getVisusClassName()
RawArrayPlugin_getVisusClassName = _NonGuiOpenVisus.RawArrayPlugin_getVisusClassName

class ArrayPlugins(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPlugins, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPlugins, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_NonGuiOpenVisus.ArrayPlugins_getSingleton)
    else:
        getSingleton = _NonGuiOpenVisus.ArrayPlugins_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_NonGuiOpenVisus.ArrayPlugins_allocSingleton)
    else:
        allocSingleton = _NonGuiOpenVisus.ArrayPlugins_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_NonGuiOpenVisus.ArrayPlugins_releaseSingleton)
    else:
        releaseSingleton = _NonGuiOpenVisus.ArrayPlugins_releaseSingleton
    __swig_setmethods__["values"] = _NonGuiOpenVisus.ArrayPlugins_values_set
    __swig_getmethods__["values"] = _NonGuiOpenVisus.ArrayPlugins_values_get
    if _newclass:
        values = _swig_property(_NonGuiOpenVisus.ArrayPlugins_values_get, _NonGuiOpenVisus.ArrayPlugins_values_set)
    __swig_destroy__ = _NonGuiOpenVisus.delete_ArrayPlugins
    __del__ = lambda self: None
ArrayPlugins_swigregister = _NonGuiOpenVisus.ArrayPlugins_swigregister
ArrayPlugins_swigregister(ArrayPlugins)

def ArrayPlugins_getSingleton():
    return _NonGuiOpenVisus.ArrayPlugins_getSingleton()
ArrayPlugins_getSingleton = _NonGuiOpenVisus.ArrayPlugins_getSingleton

def ArrayPlugins_allocSingleton():
    return _NonGuiOpenVisus.ArrayPlugins_allocSingleton()
ArrayPlugins_allocSingleton = _NonGuiOpenVisus.ArrayPlugins_allocSingleton

def ArrayPlugins_releaseSingleton():
    return _NonGuiOpenVisus.ArrayPlugins_releaseSingleton()
ArrayPlugins_releaseSingleton = _NonGuiOpenVisus.ArrayPlugins_releaseSingleton

class ComputeRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputeRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputeRange, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.ComputeRange_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.ComputeRange_getVisusClassName
    UseArrayRange = _NonGuiOpenVisus.ComputeRange_UseArrayRange
    PerComponentRange = _NonGuiOpenVisus.ComputeRange_PerComponentRange
    ComputeOverallRange = _NonGuiOpenVisus.ComputeRange_ComputeOverallRange
    UseCustomRange = _NonGuiOpenVisus.ComputeRange_UseCustomRange
    __swig_setmethods__["mode"] = _NonGuiOpenVisus.ComputeRange_mode_set
    __swig_getmethods__["mode"] = _NonGuiOpenVisus.ComputeRange_mode_get
    if _newclass:
        mode = _swig_property(_NonGuiOpenVisus.ComputeRange_mode_get, _NonGuiOpenVisus.ComputeRange_mode_set)
    __swig_setmethods__["custom_range"] = _NonGuiOpenVisus.ComputeRange_custom_range_set
    __swig_getmethods__["custom_range"] = _NonGuiOpenVisus.ComputeRange_custom_range_get
    if _newclass:
        custom_range = _swig_property(_NonGuiOpenVisus.ComputeRange_custom_range_get, _NonGuiOpenVisus.ComputeRange_custom_range_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_ComputeRange(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        createCustom = staticmethod(_NonGuiOpenVisus.ComputeRange_createCustom)
    else:
        createCustom = _NonGuiOpenVisus.ComputeRange_createCustom

    def isCustom(self):
        return _NonGuiOpenVisus.ComputeRange_isCustom(self)

    def doCompute(self, *args):
        return _NonGuiOpenVisus.ComputeRange_doCompute(self, *args)
    __swig_destroy__ = _NonGuiOpenVisus.delete_ComputeRange
    __del__ = lambda self: None
ComputeRange_swigregister = _NonGuiOpenVisus.ComputeRange_swigregister
ComputeRange_swigregister(ComputeRange)

def ComputeRange_getVisusClassName():
    return _NonGuiOpenVisus.ComputeRange_getVisusClassName()
ComputeRange_getVisusClassName = _NonGuiOpenVisus.ComputeRange_getVisusClassName

def ComputeRange_createCustom(*args):
    return _NonGuiOpenVisus.ComputeRange_createCustom(*args)
ComputeRange_createCustom = _NonGuiOpenVisus.ComputeRange_createCustom

class ArrayUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayUtils, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        loadImage = staticmethod(_NonGuiOpenVisus.ArrayUtils_loadImage)
    else:
        loadImage = _NonGuiOpenVisus.ArrayUtils_loadImage
    if _newclass:
        loadImageFromMemory = staticmethod(_NonGuiOpenVisus.ArrayUtils_loadImageFromMemory)
    else:
        loadImageFromMemory = _NonGuiOpenVisus.ArrayUtils_loadImageFromMemory
    if _newclass:
        statImage = staticmethod(_NonGuiOpenVisus.ArrayUtils_statImage)
    else:
        statImage = _NonGuiOpenVisus.ArrayUtils_statImage
    if _newclass:
        saveImage = staticmethod(_NonGuiOpenVisus.ArrayUtils_saveImage)
    else:
        saveImage = _NonGuiOpenVisus.ArrayUtils_saveImage
    if _newclass:
        saveImageUINT8 = staticmethod(_NonGuiOpenVisus.ArrayUtils_saveImageUINT8)
    else:
        saveImageUINT8 = _NonGuiOpenVisus.ArrayUtils_saveImageUINT8
    if _newclass:
        encodeArray = staticmethod(_NonGuiOpenVisus.ArrayUtils_encodeArray)
    else:
        encodeArray = _NonGuiOpenVisus.ArrayUtils_encodeArray
    if _newclass:
        decodeArray = staticmethod(_NonGuiOpenVisus.ArrayUtils_decodeArray)
    else:
        decodeArray = _NonGuiOpenVisus.ArrayUtils_decodeArray
    if _newclass:
        deepCopy = staticmethod(_NonGuiOpenVisus.ArrayUtils_deepCopy)
    else:
        deepCopy = _NonGuiOpenVisus.ArrayUtils_deepCopy
    if _newclass:
        computeRange = staticmethod(_NonGuiOpenVisus.ArrayUtils_computeRange)
    else:
        computeRange = _NonGuiOpenVisus.ArrayUtils_computeRange
    if _newclass:
        interleave = staticmethod(_NonGuiOpenVisus.ArrayUtils_interleave)
    else:
        interleave = _NonGuiOpenVisus.ArrayUtils_interleave
    if _newclass:
        insert = staticmethod(_NonGuiOpenVisus.ArrayUtils_insert)
    else:
        insert = _NonGuiOpenVisus.ArrayUtils_insert
    if _newclass:
        interpolate = staticmethod(_NonGuiOpenVisus.ArrayUtils_interpolate)
    else:
        interpolate = _NonGuiOpenVisus.ArrayUtils_interpolate
    if _newclass:
        paste = staticmethod(_NonGuiOpenVisus.ArrayUtils_paste)
    else:
        paste = _NonGuiOpenVisus.ArrayUtils_paste
    if _newclass:
        smartCast = staticmethod(_NonGuiOpenVisus.ArrayUtils_smartCast)
    else:
        smartCast = _NonGuiOpenVisus.ArrayUtils_smartCast
    if _newclass:
        crop = staticmethod(_NonGuiOpenVisus.ArrayUtils_crop)
    else:
        crop = _NonGuiOpenVisus.ArrayUtils_crop
    if _newclass:
        mirror = staticmethod(_NonGuiOpenVisus.ArrayUtils_mirror)
    else:
        mirror = _NonGuiOpenVisus.ArrayUtils_mirror
    if _newclass:
        downSample = staticmethod(_NonGuiOpenVisus.ArrayUtils_downSample)
    else:
        downSample = _NonGuiOpenVisus.ArrayUtils_downSample
    if _newclass:
        upSample = staticmethod(_NonGuiOpenVisus.ArrayUtils_upSample)
    else:
        upSample = _NonGuiOpenVisus.ArrayUtils_upSample
    if _newclass:
        splitAndGetFirst = staticmethod(_NonGuiOpenVisus.ArrayUtils_splitAndGetFirst)
    else:
        splitAndGetFirst = _NonGuiOpenVisus.ArrayUtils_splitAndGetFirst
    if _newclass:
        splitAndGetSecond = staticmethod(_NonGuiOpenVisus.ArrayUtils_splitAndGetSecond)
    else:
        splitAndGetSecond = _NonGuiOpenVisus.ArrayUtils_splitAndGetSecond
    if _newclass:
        cast = staticmethod(_NonGuiOpenVisus.ArrayUtils_cast)
    else:
        cast = _NonGuiOpenVisus.ArrayUtils_cast
    if _newclass:
        sqrt = staticmethod(_NonGuiOpenVisus.ArrayUtils_sqrt)
    else:
        sqrt = _NonGuiOpenVisus.ArrayUtils_sqrt
    if _newclass:
        module2 = staticmethod(_NonGuiOpenVisus.ArrayUtils_module2)
    else:
        module2 = _NonGuiOpenVisus.ArrayUtils_module2
    if _newclass:
        module = staticmethod(_NonGuiOpenVisus.ArrayUtils_module)
    else:
        module = _NonGuiOpenVisus.ArrayUtils_module
    if _newclass:
        resample = staticmethod(_NonGuiOpenVisus.ArrayUtils_resample)
    else:
        resample = _NonGuiOpenVisus.ArrayUtils_resample
    if _newclass:
        convolve = staticmethod(_NonGuiOpenVisus.ArrayUtils_convolve)
    else:
        convolve = _NonGuiOpenVisus.ArrayUtils_convolve
    if _newclass:
        medianHybrid = staticmethod(_NonGuiOpenVisus.ArrayUtils_medianHybrid)
    else:
        medianHybrid = _NonGuiOpenVisus.ArrayUtils_medianHybrid
    InvalidOperation = _NonGuiOpenVisus.ArrayUtils_InvalidOperation
    AddOperation = _NonGuiOpenVisus.ArrayUtils_AddOperation
    SubOperation = _NonGuiOpenVisus.ArrayUtils_SubOperation
    MulOperation = _NonGuiOpenVisus.ArrayUtils_MulOperation
    DivOperation = _NonGuiOpenVisus.ArrayUtils_DivOperation
    MinOperation = _NonGuiOpenVisus.ArrayUtils_MinOperation
    MaxOperation = _NonGuiOpenVisus.ArrayUtils_MaxOperation
    AverageOperation = _NonGuiOpenVisus.ArrayUtils_AverageOperation
    StandardDeviationOperation = _NonGuiOpenVisus.ArrayUtils_StandardDeviationOperation
    MedianOperation = _NonGuiOpenVisus.ArrayUtils_MedianOperation
    if _newclass:
        executeOperation = staticmethod(_NonGuiOpenVisus.ArrayUtils_executeOperation)
    else:
        executeOperation = _NonGuiOpenVisus.ArrayUtils_executeOperation
    if _newclass:
        add = staticmethod(_NonGuiOpenVisus.ArrayUtils_add)
    else:
        add = _NonGuiOpenVisus.ArrayUtils_add
    if _newclass:
        sub = staticmethod(_NonGuiOpenVisus.ArrayUtils_sub)
    else:
        sub = _NonGuiOpenVisus.ArrayUtils_sub
    if _newclass:
        mul = staticmethod(_NonGuiOpenVisus.ArrayUtils_mul)
    else:
        mul = _NonGuiOpenVisus.ArrayUtils_mul
    if _newclass:
        div = staticmethod(_NonGuiOpenVisus.ArrayUtils_div)
    else:
        div = _NonGuiOpenVisus.ArrayUtils_div
    if _newclass:
        min = staticmethod(_NonGuiOpenVisus.ArrayUtils_min)
    else:
        min = _NonGuiOpenVisus.ArrayUtils_min
    if _newclass:
        max = staticmethod(_NonGuiOpenVisus.ArrayUtils_max)
    else:
        max = _NonGuiOpenVisus.ArrayUtils_max
    if _newclass:
        average = staticmethod(_NonGuiOpenVisus.ArrayUtils_average)
    else:
        average = _NonGuiOpenVisus.ArrayUtils_average
    if _newclass:
        standardDeviation = staticmethod(_NonGuiOpenVisus.ArrayUtils_standardDeviation)
    else:
        standardDeviation = _NonGuiOpenVisus.ArrayUtils_standardDeviation
    if _newclass:
        median = staticmethod(_NonGuiOpenVisus.ArrayUtils_median)
    else:
        median = _NonGuiOpenVisus.ArrayUtils_median
    if _newclass:
        threshold = staticmethod(_NonGuiOpenVisus.ArrayUtils_threshold)
    else:
        threshold = _NonGuiOpenVisus.ArrayUtils_threshold
    if _newclass:
        brightnessContrast = staticmethod(_NonGuiOpenVisus.ArrayUtils_brightnessContrast)
    else:
        brightnessContrast = _NonGuiOpenVisus.ArrayUtils_brightnessContrast
    if _newclass:
        invert = staticmethod(_NonGuiOpenVisus.ArrayUtils_invert)
    else:
        invert = _NonGuiOpenVisus.ArrayUtils_invert
    if _newclass:
        levels = staticmethod(_NonGuiOpenVisus.ArrayUtils_levels)
    else:
        levels = _NonGuiOpenVisus.ArrayUtils_levels
    if _newclass:
        hueSaturationBrightness = staticmethod(_NonGuiOpenVisus.ArrayUtils_hueSaturationBrightness)
    else:
        hueSaturationBrightness = _NonGuiOpenVisus.ArrayUtils_hueSaturationBrightness
    if _newclass:
        warpPerspective = staticmethod(_NonGuiOpenVisus.ArrayUtils_warpPerspective)
    else:
        warpPerspective = _NonGuiOpenVisus.ArrayUtils_warpPerspective
    if _newclass:
        setBufferColor = staticmethod(_NonGuiOpenVisus.ArrayUtils_setBufferColor)
    else:
        setBufferColor = _NonGuiOpenVisus.ArrayUtils_setBufferColor
    if _newclass:
        createTransformedAlpha = staticmethod(_NonGuiOpenVisus.ArrayUtils_createTransformedAlpha)
    else:
        createTransformedAlpha = _NonGuiOpenVisus.ArrayUtils_createTransformedAlpha
    __swig_destroy__ = _NonGuiOpenVisus.delete_ArrayUtils
    __del__ = lambda self: None
ArrayUtils_swigregister = _NonGuiOpenVisus.ArrayUtils_swigregister
ArrayUtils_swigregister(ArrayUtils)

def ArrayUtils_loadImage(*args):
    return _NonGuiOpenVisus.ArrayUtils_loadImage(*args)
ArrayUtils_loadImage = _NonGuiOpenVisus.ArrayUtils_loadImage

def ArrayUtils_loadImageFromMemory(*args):
    return _NonGuiOpenVisus.ArrayUtils_loadImageFromMemory(*args)
ArrayUtils_loadImageFromMemory = _NonGuiOpenVisus.ArrayUtils_loadImageFromMemory

def ArrayUtils_statImage(url):
    return _NonGuiOpenVisus.ArrayUtils_statImage(url)
ArrayUtils_statImage = _NonGuiOpenVisus.ArrayUtils_statImage

def ArrayUtils_saveImage(*args):
    return _NonGuiOpenVisus.ArrayUtils_saveImage(*args)
ArrayUtils_saveImage = _NonGuiOpenVisus.ArrayUtils_saveImage

def ArrayUtils_saveImageUINT8(*args):
    return _NonGuiOpenVisus.ArrayUtils_saveImageUINT8(*args)
ArrayUtils_saveImageUINT8 = _NonGuiOpenVisus.ArrayUtils_saveImageUINT8

def ArrayUtils_encodeArray(compression, value):
    return _NonGuiOpenVisus.ArrayUtils_encodeArray(compression, value)
ArrayUtils_encodeArray = _NonGuiOpenVisus.ArrayUtils_encodeArray

def ArrayUtils_decodeArray(*args):
    return _NonGuiOpenVisus.ArrayUtils_decodeArray(*args)
ArrayUtils_decodeArray = _NonGuiOpenVisus.ArrayUtils_decodeArray

def ArrayUtils_deepCopy(dst, src):
    return _NonGuiOpenVisus.ArrayUtils_deepCopy(dst, src)
ArrayUtils_deepCopy = _NonGuiOpenVisus.ArrayUtils_deepCopy

def ArrayUtils_computeRange(*args):
    return _NonGuiOpenVisus.ArrayUtils_computeRange(*args)
ArrayUtils_computeRange = _NonGuiOpenVisus.ArrayUtils_computeRange

def ArrayUtils_interleave(*args):
    return _NonGuiOpenVisus.ArrayUtils_interleave(*args)
ArrayUtils_interleave = _NonGuiOpenVisus.ArrayUtils_interleave

def ArrayUtils_insert(*args):
    return _NonGuiOpenVisus.ArrayUtils_insert(*args)
ArrayUtils_insert = _NonGuiOpenVisus.ArrayUtils_insert

def ArrayUtils_interpolate(*args):
    return _NonGuiOpenVisus.ArrayUtils_interpolate(*args)
ArrayUtils_interpolate = _NonGuiOpenVisus.ArrayUtils_interpolate

def ArrayUtils_paste(*args):
    return _NonGuiOpenVisus.ArrayUtils_paste(*args)
ArrayUtils_paste = _NonGuiOpenVisus.ArrayUtils_paste

def ArrayUtils_smartCast(*args):
    return _NonGuiOpenVisus.ArrayUtils_smartCast(*args)
ArrayUtils_smartCast = _NonGuiOpenVisus.ArrayUtils_smartCast

def ArrayUtils_crop(*args):
    return _NonGuiOpenVisus.ArrayUtils_crop(*args)
ArrayUtils_crop = _NonGuiOpenVisus.ArrayUtils_crop

def ArrayUtils_mirror(*args):
    return _NonGuiOpenVisus.ArrayUtils_mirror(*args)
ArrayUtils_mirror = _NonGuiOpenVisus.ArrayUtils_mirror

def ArrayUtils_downSample(*args):
    return _NonGuiOpenVisus.ArrayUtils_downSample(*args)
ArrayUtils_downSample = _NonGuiOpenVisus.ArrayUtils_downSample

def ArrayUtils_upSample(*args):
    return _NonGuiOpenVisus.ArrayUtils_upSample(*args)
ArrayUtils_upSample = _NonGuiOpenVisus.ArrayUtils_upSample

def ArrayUtils_splitAndGetFirst(*args):
    return _NonGuiOpenVisus.ArrayUtils_splitAndGetFirst(*args)
ArrayUtils_splitAndGetFirst = _NonGuiOpenVisus.ArrayUtils_splitAndGetFirst

def ArrayUtils_splitAndGetSecond(*args):
    return _NonGuiOpenVisus.ArrayUtils_splitAndGetSecond(*args)
ArrayUtils_splitAndGetSecond = _NonGuiOpenVisus.ArrayUtils_splitAndGetSecond

def ArrayUtils_cast(*args):
    return _NonGuiOpenVisus.ArrayUtils_cast(*args)
ArrayUtils_cast = _NonGuiOpenVisus.ArrayUtils_cast

def ArrayUtils_sqrt(*args):
    return _NonGuiOpenVisus.ArrayUtils_sqrt(*args)
ArrayUtils_sqrt = _NonGuiOpenVisus.ArrayUtils_sqrt

def ArrayUtils_module2(input, aborted):
    return _NonGuiOpenVisus.ArrayUtils_module2(input, aborted)
ArrayUtils_module2 = _NonGuiOpenVisus.ArrayUtils_module2

def ArrayUtils_module(input, aborted):
    return _NonGuiOpenVisus.ArrayUtils_module(input, aborted)
ArrayUtils_module = _NonGuiOpenVisus.ArrayUtils_module

def ArrayUtils_resample(*args):
    return _NonGuiOpenVisus.ArrayUtils_resample(*args)
ArrayUtils_resample = _NonGuiOpenVisus.ArrayUtils_resample

def ArrayUtils_convolve(*args):
    return _NonGuiOpenVisus.ArrayUtils_convolve(*args)
ArrayUtils_convolve = _NonGuiOpenVisus.ArrayUtils_convolve

def ArrayUtils_medianHybrid(*args):
    return _NonGuiOpenVisus.ArrayUtils_medianHybrid(*args)
ArrayUtils_medianHybrid = _NonGuiOpenVisus.ArrayUtils_medianHybrid

def ArrayUtils_executeOperation(*args):
    return _NonGuiOpenVisus.ArrayUtils_executeOperation(*args)
ArrayUtils_executeOperation = _NonGuiOpenVisus.ArrayUtils_executeOperation

def ArrayUtils_add(*args):
    return _NonGuiOpenVisus.ArrayUtils_add(*args)
ArrayUtils_add = _NonGuiOpenVisus.ArrayUtils_add

def ArrayUtils_sub(*args):
    return _NonGuiOpenVisus.ArrayUtils_sub(*args)
ArrayUtils_sub = _NonGuiOpenVisus.ArrayUtils_sub

def ArrayUtils_mul(*args):
    return _NonGuiOpenVisus.ArrayUtils_mul(*args)
ArrayUtils_mul = _NonGuiOpenVisus.ArrayUtils_mul

def ArrayUtils_div(*args):
    return _NonGuiOpenVisus.ArrayUtils_div(*args)
ArrayUtils_div = _NonGuiOpenVisus.ArrayUtils_div

def ArrayUtils_min(*args):
    return _NonGuiOpenVisus.ArrayUtils_min(*args)
ArrayUtils_min = _NonGuiOpenVisus.ArrayUtils_min

def ArrayUtils_max(*args):
    return _NonGuiOpenVisus.ArrayUtils_max(*args)
ArrayUtils_max = _NonGuiOpenVisus.ArrayUtils_max

def ArrayUtils_average(*args):
    return _NonGuiOpenVisus.ArrayUtils_average(*args)
ArrayUtils_average = _NonGuiOpenVisus.ArrayUtils_average

def ArrayUtils_standardDeviation(*args):
    return _NonGuiOpenVisus.ArrayUtils_standardDeviation(*args)
ArrayUtils_standardDeviation = _NonGuiOpenVisus.ArrayUtils_standardDeviation

def ArrayUtils_median(*args):
    return _NonGuiOpenVisus.ArrayUtils_median(*args)
ArrayUtils_median = _NonGuiOpenVisus.ArrayUtils_median

def ArrayUtils_threshold(*args):
    return _NonGuiOpenVisus.ArrayUtils_threshold(*args)
ArrayUtils_threshold = _NonGuiOpenVisus.ArrayUtils_threshold

def ArrayUtils_brightnessContrast(*args):
    return _NonGuiOpenVisus.ArrayUtils_brightnessContrast(*args)
ArrayUtils_brightnessContrast = _NonGuiOpenVisus.ArrayUtils_brightnessContrast

def ArrayUtils_invert(*args):
    return _NonGuiOpenVisus.ArrayUtils_invert(*args)
ArrayUtils_invert = _NonGuiOpenVisus.ArrayUtils_invert

def ArrayUtils_levels(*args):
    return _NonGuiOpenVisus.ArrayUtils_levels(*args)
ArrayUtils_levels = _NonGuiOpenVisus.ArrayUtils_levels

def ArrayUtils_hueSaturationBrightness(*args):
    return _NonGuiOpenVisus.ArrayUtils_hueSaturationBrightness(*args)
ArrayUtils_hueSaturationBrightness = _NonGuiOpenVisus.ArrayUtils_hueSaturationBrightness

def ArrayUtils_warpPerspective(dst, dst_alpha, T, src, src_alpha, aborted):
    return _NonGuiOpenVisus.ArrayUtils_warpPerspective(dst, dst_alpha, T, src, src_alpha, aborted)
ArrayUtils_warpPerspective = _NonGuiOpenVisus.ArrayUtils_warpPerspective

def ArrayUtils_setBufferColor(buffer, alpha, color):
    return _NonGuiOpenVisus.ArrayUtils_setBufferColor(buffer, alpha, color)
ArrayUtils_setBufferColor = _NonGuiOpenVisus.ArrayUtils_setBufferColor

def ArrayUtils_createTransformedAlpha(bounds, T, dims, aborted):
    return _NonGuiOpenVisus.ArrayUtils_createTransformedAlpha(bounds, T, dims, aborted)
ArrayUtils_createTransformedAlpha = _NonGuiOpenVisus.ArrayUtils_createTransformedAlpha

class BlendBuffers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendBuffers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlendBuffers, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.BlendBuffers_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.BlendBuffers_getVisusClassName
    __swig_setmethods__["pimpl"] = _NonGuiOpenVisus.BlendBuffers_pimpl_set
    __swig_getmethods__["pimpl"] = _NonGuiOpenVisus.BlendBuffers_pimpl_get
    if _newclass:
        pimpl = _swig_property(_NonGuiOpenVisus.BlendBuffers_pimpl_get, _NonGuiOpenVisus.BlendBuffers_pimpl_set)
    GenericBlend = _NonGuiOpenVisus.BlendBuffers_GenericBlend
    NoBlend = _NonGuiOpenVisus.BlendBuffers_NoBlend
    AverageBlend = _NonGuiOpenVisus.BlendBuffers_AverageBlend
    VororoiBlend = _NonGuiOpenVisus.BlendBuffers_VororoiBlend
    __swig_setmethods__["result"] = _NonGuiOpenVisus.BlendBuffers_result_set
    __swig_getmethods__["result"] = _NonGuiOpenVisus.BlendBuffers_result_get
    if _newclass:
        result = _swig_property(_NonGuiOpenVisus.BlendBuffers_result_get, _NonGuiOpenVisus.BlendBuffers_result_set)

    def __init__(self, type, aborted_):
        this = _NonGuiOpenVisus.new_BlendBuffers(type, aborted_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_BlendBuffers
    __del__ = lambda self: None

    def addArg(self, *args):
        return _NonGuiOpenVisus.BlendBuffers_addArg(self, *args)
BlendBuffers_swigregister = _NonGuiOpenVisus.BlendBuffers_swigregister
BlendBuffers_swigregister(BlendBuffers)

def BlendBuffers_getVisusClassName():
    return _NonGuiOpenVisus.BlendBuffers_getVisusClassName()
BlendBuffers_getVisusClassName = _NonGuiOpenVisus.BlendBuffers_getVisusClassName

class AccessPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AccessPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_AccessPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_AccessPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.AccessPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.AccessPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.AccessPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.AccessPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.AccessPtr___nonzero__(self)
    __bool__ = __nonzero__


AccessPtr_swigregister = _NonGuiOpenVisus.AccessPtr_swigregister
AccessPtr_swigregister(AccessPtr)

class BlockQueryPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockQueryPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockQueryPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_BlockQueryPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_BlockQueryPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.BlockQueryPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.BlockQueryPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.BlockQueryPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.BlockQueryPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.BlockQueryPtr___nonzero__(self)
    __bool__ = __nonzero__


BlockQueryPtr_swigregister = _NonGuiOpenVisus.BlockQueryPtr_swigregister
BlockQueryPtr_swigregister(BlockQueryPtr)

class QueryPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QueryPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QueryPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_QueryPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_QueryPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.QueryPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.QueryPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.QueryPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.QueryPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.QueryPtr___nonzero__(self)
    __bool__ = __nonzero__


QueryPtr_swigregister = _NonGuiOpenVisus.QueryPtr_swigregister
QueryPtr_swigregister(QueryPtr)

class DatasetPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_DatasetPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DatasetPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.DatasetPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.DatasetPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.DatasetPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.DatasetPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.DatasetPtr___nonzero__(self)
    __bool__ = __nonzero__


DatasetPtr_swigregister = _NonGuiOpenVisus.DatasetPtr_swigregister
DatasetPtr_swigregister(DatasetPtr)

class DbModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DbModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DbModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _NonGuiOpenVisus.DbModule_bAttached_set
    __swig_getmethods__["bAttached"] = _NonGuiOpenVisus.DbModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_NonGuiOpenVisus.DbModule_bAttached_get, _NonGuiOpenVisus.DbModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_NonGuiOpenVisus.DbModule_attach)
    else:
        attach = _NonGuiOpenVisus.DbModule_attach
    if _newclass:
        detach = staticmethod(_NonGuiOpenVisus.DbModule_detach)
    else:
        detach = _NonGuiOpenVisus.DbModule_detach

    def __init__(self):
        this = _NonGuiOpenVisus.new_DbModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DbModule
    __del__ = lambda self: None
DbModule_swigregister = _NonGuiOpenVisus.DbModule_swigregister
DbModule_swigregister(DbModule)

def DbModule_attach():
    return _NonGuiOpenVisus.DbModule_attach()
DbModule_attach = _NonGuiOpenVisus.DbModule_attach

def DbModule_detach():
    return _NonGuiOpenVisus.DbModule_detach()
DbModule_detach = _NonGuiOpenVisus.DbModule_detach

class Access(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Access, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Access, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Access_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Access_getVisusClassName
    __swig_setmethods__["name"] = _NonGuiOpenVisus.Access_name_set
    __swig_getmethods__["name"] = _NonGuiOpenVisus.Access_name_get
    if _newclass:
        name = _swig_property(_NonGuiOpenVisus.Access_name_get, _NonGuiOpenVisus.Access_name_set)
    __swig_setmethods__["can_read"] = _NonGuiOpenVisus.Access_can_read_set
    __swig_getmethods__["can_read"] = _NonGuiOpenVisus.Access_can_read_get
    if _newclass:
        can_read = _swig_property(_NonGuiOpenVisus.Access_can_read_get, _NonGuiOpenVisus.Access_can_read_set)
    __swig_setmethods__["can_write"] = _NonGuiOpenVisus.Access_can_write_set
    __swig_getmethods__["can_write"] = _NonGuiOpenVisus.Access_can_write_get
    if _newclass:
        can_write = _swig_property(_NonGuiOpenVisus.Access_can_write_get, _NonGuiOpenVisus.Access_can_write_set)
    __swig_setmethods__["bitsperblock"] = _NonGuiOpenVisus.Access_bitsperblock_set
    __swig_getmethods__["bitsperblock"] = _NonGuiOpenVisus.Access_bitsperblock_get
    if _newclass:
        bitsperblock = _swig_property(_NonGuiOpenVisus.Access_bitsperblock_get, _NonGuiOpenVisus.Access_bitsperblock_set)
    __swig_setmethods__["statistics"] = _NonGuiOpenVisus.Access_statistics_set
    __swig_getmethods__["statistics"] = _NonGuiOpenVisus.Access_statistics_get
    if _newclass:
        statistics = _swig_property(_NonGuiOpenVisus.Access_statistics_get, _NonGuiOpenVisus.Access_statistics_set)
    __swig_setmethods__["bVerbose"] = _NonGuiOpenVisus.Access_bVerbose_set
    __swig_getmethods__["bVerbose"] = _NonGuiOpenVisus.Access_bVerbose_get
    if _newclass:
        bVerbose = _swig_property(_NonGuiOpenVisus.Access_bVerbose_get, _NonGuiOpenVisus.Access_bVerbose_set)
    __swig_destroy__ = _NonGuiOpenVisus.delete_Access
    __del__ = lambda self: None

    def getSamplesPerBlock(self):
        return _NonGuiOpenVisus.Access_getSamplesPerBlock(self)

    def getFilename(self, *args):
        return _NonGuiOpenVisus.Access_getFilename(self, *args)

    def getStartAddress(self, block_id):
        return _NonGuiOpenVisus.Access_getStartAddress(self, block_id)

    def getEndAddress(self, block_id):
        return _NonGuiOpenVisus.Access_getEndAddress(self, block_id)

    def getMode(self):
        return _NonGuiOpenVisus.Access_getMode(self)

    def isReading(self):
        return _NonGuiOpenVisus.Access_isReading(self)

    def isWriting(self):
        return _NonGuiOpenVisus.Access_isWriting(self)

    def beginIO(self, mode):
        return _NonGuiOpenVisus.Access_beginIO(self, mode)

    def readBlock(self, query):
        return _NonGuiOpenVisus.Access_readBlock(self, query)

    def writeBlock(self, query):
        return _NonGuiOpenVisus.Access_writeBlock(self, query)

    def endIO(self):
        return _NonGuiOpenVisus.Access_endIO(self)

    def beginRead(self):
        return _NonGuiOpenVisus.Access_beginRead(self)

    def endRead(self):
        return _NonGuiOpenVisus.Access_endRead(self)

    def beginWrite(self):
        return _NonGuiOpenVisus.Access_beginWrite(self)

    def endWrite(self):
        return _NonGuiOpenVisus.Access_endWrite(self)

    def beginReadWrite(self):
        return _NonGuiOpenVisus.Access_beginReadWrite(self)

    def endReadWrite(self):
        return _NonGuiOpenVisus.Access_endReadWrite(self)

    def acquireWriteLock(self, query):
        return _NonGuiOpenVisus.Access_acquireWriteLock(self, query)

    def releaseWriteLock(self, query):
        return _NonGuiOpenVisus.Access_releaseWriteLock(self, query)

    def resetStatistics(self):
        return _NonGuiOpenVisus.Access_resetStatistics(self)

    def printStatistics(self):
        return _NonGuiOpenVisus.Access_printStatistics(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Access_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Access_readFromObjectStream(self, istream)

    def readOk(self, query):
        return _NonGuiOpenVisus.Access_readOk(self, query)

    def readFailed(self, query):
        return _NonGuiOpenVisus.Access_readFailed(self, query)

    def writeOk(self, query):
        return _NonGuiOpenVisus.Access_writeOk(self, query)

    def writeFailed(self, query):
        return _NonGuiOpenVisus.Access_writeFailed(self, query)
Access_swigregister = _NonGuiOpenVisus.Access_swigregister
Access_swigregister(Access)

def Access_getVisusClassName():
    return _NonGuiOpenVisus.Access_getVisusClassName()
Access_getVisusClassName = _NonGuiOpenVisus.Access_getVisusClassName

class LogicBox(NdBox):
    __swig_setmethods__ = {}
    for _s in [NdBox]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicBox, name, value)
    __swig_getmethods__ = {}
    for _s in [NdBox]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LogicBox, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.LogicBox_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.LogicBox_getVisusClassName
    __swig_setmethods__["nsamples"] = _NonGuiOpenVisus.LogicBox_nsamples_set
    __swig_getmethods__["nsamples"] = _NonGuiOpenVisus.LogicBox_nsamples_get
    if _newclass:
        nsamples = _swig_property(_NonGuiOpenVisus.LogicBox_nsamples_get, _NonGuiOpenVisus.LogicBox_nsamples_set)
    __swig_setmethods__["delta"] = _NonGuiOpenVisus.LogicBox_delta_set
    __swig_getmethods__["delta"] = _NonGuiOpenVisus.LogicBox_delta_get
    if _newclass:
        delta = _swig_property(_NonGuiOpenVisus.LogicBox_delta_get, _NonGuiOpenVisus.LogicBox_delta_set)
    __swig_setmethods__["shift"] = _NonGuiOpenVisus.LogicBox_shift_set
    __swig_getmethods__["shift"] = _NonGuiOpenVisus.LogicBox_shift_get
    if _newclass:
        shift = _swig_property(_NonGuiOpenVisus.LogicBox_shift_get, _NonGuiOpenVisus.LogicBox_shift_set)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_LogicBox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valid(self):
        return _NonGuiOpenVisus.LogicBox_valid(self)

    def pixelToLogic(self, value):
        return _NonGuiOpenVisus.LogicBox_pixelToLogic(self, value)

    def logicToPixel(self, value):
        return _NonGuiOpenVisus.LogicBox_logicToPixel(self, value)

    def alignBox(self, value):
        return _NonGuiOpenVisus.LogicBox_alignBox(self, value)
    __swig_destroy__ = _NonGuiOpenVisus.delete_LogicBox
    __del__ = lambda self: None
LogicBox_swigregister = _NonGuiOpenVisus.LogicBox_swigregister
LogicBox_swigregister(LogicBox)

def LogicBox_getVisusClassName():
    return _NonGuiOpenVisus.LogicBox_getVisusClassName()
LogicBox_getVisusClassName = _NonGuiOpenVisus.LogicBox_getVisusClassName

QueryCreated = _NonGuiOpenVisus.QueryCreated
QueryRunning = _NonGuiOpenVisus.QueryRunning
QueryFailed = _NonGuiOpenVisus.QueryFailed
QueryOk = _NonGuiOpenVisus.QueryOk
class BlockQuery(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockQuery, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.BlockQuery_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.BlockQuery_getVisusClassName
    __swig_setmethods__["aborted"] = _NonGuiOpenVisus.BlockQuery_aborted_set
    __swig_getmethods__["aborted"] = _NonGuiOpenVisus.BlockQuery_aborted_get
    if _newclass:
        aborted = _swig_property(_NonGuiOpenVisus.BlockQuery_aborted_get, _NonGuiOpenVisus.BlockQuery_aborted_set)
    __swig_setmethods__["field"] = _NonGuiOpenVisus.BlockQuery_field_set
    __swig_getmethods__["field"] = _NonGuiOpenVisus.BlockQuery_field_get
    if _newclass:
        field = _swig_property(_NonGuiOpenVisus.BlockQuery_field_get, _NonGuiOpenVisus.BlockQuery_field_set)
    __swig_setmethods__["time"] = _NonGuiOpenVisus.BlockQuery_time_set
    __swig_getmethods__["time"] = _NonGuiOpenVisus.BlockQuery_time_get
    if _newclass:
        time = _swig_property(_NonGuiOpenVisus.BlockQuery_time_get, _NonGuiOpenVisus.BlockQuery_time_set)
    __swig_setmethods__["buffer"] = _NonGuiOpenVisus.BlockQuery_buffer_set
    __swig_getmethods__["buffer"] = _NonGuiOpenVisus.BlockQuery_buffer_get
    if _newclass:
        buffer = _swig_property(_NonGuiOpenVisus.BlockQuery_buffer_get, _NonGuiOpenVisus.BlockQuery_buffer_set)
    __swig_setmethods__["nsamples"] = _NonGuiOpenVisus.BlockQuery_nsamples_set
    __swig_getmethods__["nsamples"] = _NonGuiOpenVisus.BlockQuery_nsamples_get
    if _newclass:
        nsamples = _swig_property(_NonGuiOpenVisus.BlockQuery_nsamples_get, _NonGuiOpenVisus.BlockQuery_nsamples_set)
    __swig_setmethods__["logic_box"] = _NonGuiOpenVisus.BlockQuery_logic_box_set
    __swig_getmethods__["logic_box"] = _NonGuiOpenVisus.BlockQuery_logic_box_get
    if _newclass:
        logic_box = _swig_property(_NonGuiOpenVisus.BlockQuery_logic_box_get, _NonGuiOpenVisus.BlockQuery_logic_box_set)
    __swig_setmethods__["done"] = _NonGuiOpenVisus.BlockQuery_done_set
    __swig_getmethods__["done"] = _NonGuiOpenVisus.BlockQuery_done_get
    if _newclass:
        done = _swig_property(_NonGuiOpenVisus.BlockQuery_done_get, _NonGuiOpenVisus.BlockQuery_done_set)
    __swig_setmethods__["start_address"] = _NonGuiOpenVisus.BlockQuery_start_address_set
    __swig_getmethods__["start_address"] = _NonGuiOpenVisus.BlockQuery_start_address_get
    if _newclass:
        start_address = _swig_property(_NonGuiOpenVisus.BlockQuery_start_address_get, _NonGuiOpenVisus.BlockQuery_start_address_set)
    __swig_setmethods__["end_address"] = _NonGuiOpenVisus.BlockQuery_end_address_set
    __swig_getmethods__["end_address"] = _NonGuiOpenVisus.BlockQuery_end_address_get
    if _newclass:
        end_address = _swig_property(_NonGuiOpenVisus.BlockQuery_end_address_get, _NonGuiOpenVisus.BlockQuery_end_address_set)

    def __init__(self, field_, time_, start_address_, end_address_, aborted_):
        this = _NonGuiOpenVisus.new_BlockQuery(field_, time_, start_address_, end_address_, aborted_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_BlockQuery
    __del__ = lambda self: None

    def getByteSize(self):
        return _NonGuiOpenVisus.BlockQuery_getByteSize(self)

    def getBlockNumber(self, bitsperblock):
        return _NonGuiOpenVisus.BlockQuery_getBlockNumber(self, bitsperblock)

    def setRunning(self):
        return _NonGuiOpenVisus.BlockQuery_setRunning(self)

    def ok(self):
        return _NonGuiOpenVisus.BlockQuery_ok(self)

    def setOk(self):
        return _NonGuiOpenVisus.BlockQuery_setOk(self)

    def failed(self):
        return _NonGuiOpenVisus.BlockQuery_failed(self)

    def setFailed(self):
        return _NonGuiOpenVisus.BlockQuery_setFailed(self)

    def allocateBufferIfNeeded(self):
        return _NonGuiOpenVisus.BlockQuery_allocateBufferIfNeeded(self)
BlockQuery_swigregister = _NonGuiOpenVisus.BlockQuery_swigregister
BlockQuery_swigregister(BlockQuery)

def BlockQuery_getVisusClassName():
    return _NonGuiOpenVisus.BlockQuery_getVisusClassName()
BlockQuery_getVisusClassName = _NonGuiOpenVisus.BlockQuery_getVisusClassName

class Query(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Query, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Query, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Query_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Query_getVisusClassName
    InsertSamples = _NonGuiOpenVisus.Query_InsertSamples
    InterpolateSamples = _NonGuiOpenVisus.Query_InterpolateSamples
    __swig_setmethods__["aborted"] = _NonGuiOpenVisus.Query_aborted_set
    __swig_getmethods__["aborted"] = _NonGuiOpenVisus.Query_aborted_get
    if _newclass:
        aborted = _swig_property(_NonGuiOpenVisus.Query_aborted_get, _NonGuiOpenVisus.Query_aborted_set)
    __swig_setmethods__["field"] = _NonGuiOpenVisus.Query_field_set
    __swig_getmethods__["field"] = _NonGuiOpenVisus.Query_field_get
    if _newclass:
        field = _swig_property(_NonGuiOpenVisus.Query_field_get, _NonGuiOpenVisus.Query_field_set)
    __swig_setmethods__["time"] = _NonGuiOpenVisus.Query_time_set
    __swig_getmethods__["time"] = _NonGuiOpenVisus.Query_time_get
    if _newclass:
        time = _swig_property(_NonGuiOpenVisus.Query_time_get, _NonGuiOpenVisus.Query_time_set)
    __swig_setmethods__["buffer"] = _NonGuiOpenVisus.Query_buffer_set
    __swig_getmethods__["buffer"] = _NonGuiOpenVisus.Query_buffer_get
    if _newclass:
        buffer = _swig_property(_NonGuiOpenVisus.Query_buffer_get, _NonGuiOpenVisus.Query_buffer_set)
    __swig_setmethods__["nsamples"] = _NonGuiOpenVisus.Query_nsamples_set
    __swig_getmethods__["nsamples"] = _NonGuiOpenVisus.Query_nsamples_get
    if _newclass:
        nsamples = _swig_property(_NonGuiOpenVisus.Query_nsamples_get, _NonGuiOpenVisus.Query_nsamples_set)
    __swig_setmethods__["logic_box"] = _NonGuiOpenVisus.Query_logic_box_set
    __swig_getmethods__["logic_box"] = _NonGuiOpenVisus.Query_logic_box_get
    if _newclass:
        logic_box = _swig_property(_NonGuiOpenVisus.Query_logic_box_get, _NonGuiOpenVisus.Query_logic_box_set)
    GuessProgression = _NonGuiOpenVisus.Query_GuessProgression
    NoProgression = _NonGuiOpenVisus.Query_NoProgression
    DefaultQuality = _NonGuiOpenVisus.Query_DefaultQuality
    __swig_setmethods__["mode"] = _NonGuiOpenVisus.Query_mode_set
    __swig_getmethods__["mode"] = _NonGuiOpenVisus.Query_mode_get
    if _newclass:
        mode = _swig_property(_NonGuiOpenVisus.Query_mode_get, _NonGuiOpenVisus.Query_mode_set)
    __swig_setmethods__["merge_mode"] = _NonGuiOpenVisus.Query_merge_mode_set
    __swig_getmethods__["merge_mode"] = _NonGuiOpenVisus.Query_merge_mode_get
    if _newclass:
        merge_mode = _swig_property(_NonGuiOpenVisus.Query_merge_mode_get, _NonGuiOpenVisus.Query_merge_mode_set)
    __swig_setmethods__["position"] = _NonGuiOpenVisus.Query_position_set
    __swig_getmethods__["position"] = _NonGuiOpenVisus.Query_position_get
    if _newclass:
        position = _swig_property(_NonGuiOpenVisus.Query_position_get, _NonGuiOpenVisus.Query_position_set)
    __swig_setmethods__["viewdep"] = _NonGuiOpenVisus.Query_viewdep_set
    __swig_getmethods__["viewdep"] = _NonGuiOpenVisus.Query_viewdep_get
    if _newclass:
        viewdep = _swig_property(_NonGuiOpenVisus.Query_viewdep_get, _NonGuiOpenVisus.Query_viewdep_set)
    __swig_setmethods__["clipping"] = _NonGuiOpenVisus.Query_clipping_set
    __swig_getmethods__["clipping"] = _NonGuiOpenVisus.Query_clipping_get
    if _newclass:
        clipping = _swig_property(_NonGuiOpenVisus.Query_clipping_get, _NonGuiOpenVisus.Query_clipping_set)
    __swig_setmethods__["incrementalPublish"] = _NonGuiOpenVisus.Query_incrementalPublish_set
    __swig_getmethods__["incrementalPublish"] = _NonGuiOpenVisus.Query_incrementalPublish_get
    if _newclass:
        incrementalPublish = _swig_property(_NonGuiOpenVisus.Query_incrementalPublish_get, _NonGuiOpenVisus.Query_incrementalPublish_set)
    __swig_setmethods__["start_resolution"] = _NonGuiOpenVisus.Query_start_resolution_set
    __swig_getmethods__["start_resolution"] = _NonGuiOpenVisus.Query_start_resolution_get
    if _newclass:
        start_resolution = _swig_property(_NonGuiOpenVisus.Query_start_resolution_get, _NonGuiOpenVisus.Query_start_resolution_set)
    __swig_setmethods__["cur_resolution"] = _NonGuiOpenVisus.Query_cur_resolution_set
    __swig_getmethods__["cur_resolution"] = _NonGuiOpenVisus.Query_cur_resolution_get
    if _newclass:
        cur_resolution = _swig_property(_NonGuiOpenVisus.Query_cur_resolution_get, _NonGuiOpenVisus.Query_cur_resolution_set)
    __swig_setmethods__["end_resolutions"] = _NonGuiOpenVisus.Query_end_resolutions_set
    __swig_getmethods__["end_resolutions"] = _NonGuiOpenVisus.Query_end_resolutions_get
    if _newclass:
        end_resolutions = _swig_property(_NonGuiOpenVisus.Query_end_resolutions_get, _NonGuiOpenVisus.Query_end_resolutions_set)
    __swig_setmethods__["max_resolution"] = _NonGuiOpenVisus.Query_max_resolution_set
    __swig_getmethods__["max_resolution"] = _NonGuiOpenVisus.Query_max_resolution_get
    if _newclass:
        max_resolution = _swig_property(_NonGuiOpenVisus.Query_max_resolution_get, _NonGuiOpenVisus.Query_max_resolution_set)
    __swig_setmethods__["query_cursor"] = _NonGuiOpenVisus.Query_query_cursor_set
    __swig_getmethods__["query_cursor"] = _NonGuiOpenVisus.Query_query_cursor_get
    if _newclass:
        query_cursor = _swig_property(_NonGuiOpenVisus.Query_query_cursor_get, _NonGuiOpenVisus.Query_query_cursor_set)
    __swig_setmethods__["filter"] = _NonGuiOpenVisus.Query_filter_set
    __swig_getmethods__["filter"] = _NonGuiOpenVisus.Query_filter_get
    if _newclass:
        filter = _swig_property(_NonGuiOpenVisus.Query_filter_get, _NonGuiOpenVisus.Query_filter_set)
    __swig_setmethods__["aligned_box"] = _NonGuiOpenVisus.Query_aligned_box_set
    __swig_getmethods__["aligned_box"] = _NonGuiOpenVisus.Query_aligned_box_get
    if _newclass:
        aligned_box = _swig_property(_NonGuiOpenVisus.Query_aligned_box_get, _NonGuiOpenVisus.Query_aligned_box_set)
    __swig_setmethods__["filter_query"] = _NonGuiOpenVisus.Query_filter_query_set
    __swig_getmethods__["filter_query"] = _NonGuiOpenVisus.Query_filter_query_get
    if _newclass:
        filter_query = _swig_property(_NonGuiOpenVisus.Query_filter_query_get, _NonGuiOpenVisus.Query_filter_query_set)
    __swig_setmethods__["down_queries"] = _NonGuiOpenVisus.Query_down_queries_set
    __swig_getmethods__["down_queries"] = _NonGuiOpenVisus.Query_down_queries_get
    if _newclass:
        down_queries = _swig_property(_NonGuiOpenVisus.Query_down_queries_get, _NonGuiOpenVisus.Query_down_queries_set)
    __swig_setmethods__["point_coordinates"] = _NonGuiOpenVisus.Query_point_coordinates_set
    __swig_getmethods__["point_coordinates"] = _NonGuiOpenVisus.Query_point_coordinates_get
    if _newclass:
        point_coordinates = _swig_property(_NonGuiOpenVisus.Query_point_coordinates_get, _NonGuiOpenVisus.Query_point_coordinates_set)

    def __init__(self, dataset, mode):
        this = _NonGuiOpenVisus.new_Query(dataset, mode)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Query
    __del__ = lambda self: None

    def getByteSize(self):
        return _NonGuiOpenVisus.Query_getByteSize(self)

    def isPointQuery(self):
        return _NonGuiOpenVisus.Query_isPointQuery(self)

    def isRunning(self):
        return _NonGuiOpenVisus.Query_isRunning(self)

    def setRunning(self):
        return _NonGuiOpenVisus.Query_setRunning(self)

    def failed(self):
        return _NonGuiOpenVisus.Query_failed(self)

    def getLastErrorMsg(self):
        return _NonGuiOpenVisus.Query_getLastErrorMsg(self)

    def ok(self):
        return _NonGuiOpenVisus.Query_ok(self)

    def setFailed(self, msg):
        return _NonGuiOpenVisus.Query_setFailed(self, msg)

    def setOk(self):
        return _NonGuiOpenVisus.Query_setOk(self)

    def canBegin(self):
        return _NonGuiOpenVisus.Query_canBegin(self)

    def canNext(self):
        return _NonGuiOpenVisus.Query_canNext(self)

    def canExecute(self):
        return _NonGuiOpenVisus.Query_canExecute(self)

    def getEndResolution(self):
        return _NonGuiOpenVisus.Query_getEndResolution(self)

    def currentLevelReady(self):
        return _NonGuiOpenVisus.Query_currentLevelReady(self)

    def allocateBufferIfNeeded(self):
        return _NonGuiOpenVisus.Query_allocateBufferIfNeeded(self)
    if _newclass:
        mergeSamples = staticmethod(_NonGuiOpenVisus.Query_mergeSamples)
    else:
        mergeSamples = _NonGuiOpenVisus.Query_mergeSamples
Query_swigregister = _NonGuiOpenVisus.Query_swigregister
Query_swigregister(Query)

def Query_getVisusClassName():
    return _NonGuiOpenVisus.Query_getVisusClassName()
Query_getVisusClassName = _NonGuiOpenVisus.Query_getVisusClassName

def Query_mergeSamples(*args):
    return _NonGuiOpenVisus.Query_mergeSamples(*args)
Query_mergeSamples = _NonGuiOpenVisus.Query_mergeSamples

DatasetBitmaskMaxLen = _NonGuiOpenVisus.DatasetBitmaskMaxLen
class DatasetBitmask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetBitmask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetBitmask, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.DatasetBitmask_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.DatasetBitmask_getVisusClassName

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_DatasetBitmask(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        guess = staticmethod(_NonGuiOpenVisus.DatasetBitmask_guess)
    else:
        guess = _NonGuiOpenVisus.DatasetBitmask_guess
    if _newclass:
        invalid = staticmethod(_NonGuiOpenVisus.DatasetBitmask_invalid)
    else:
        invalid = _NonGuiOpenVisus.DatasetBitmask_invalid

    def empty(self):
        return _NonGuiOpenVisus.DatasetBitmask_empty(self)

    def valid(self):
        return _NonGuiOpenVisus.DatasetBitmask_valid(self)

    def getMaxResolution(self):
        return _NonGuiOpenVisus.DatasetBitmask_getMaxResolution(self)

    def hasRegExpr(self):
        return _NonGuiOpenVisus.DatasetBitmask_hasRegExpr(self)

    def getPointDim(self):
        return _NonGuiOpenVisus.DatasetBitmask_getPointDim(self)

    def getPow2Dims(self):
        return _NonGuiOpenVisus.DatasetBitmask_getPow2Dims(self)

    def getPow2Box(self):
        return _NonGuiOpenVisus.DatasetBitmask_getPow2Box(self)

    def clear(self):
        return _NonGuiOpenVisus.DatasetBitmask_clear(self)

    def __getitem__(self, I):
        return _NonGuiOpenVisus.DatasetBitmask___getitem__(self, I)

    def __eq__(self, other):
        return _NonGuiOpenVisus.DatasetBitmask___eq__(self, other)

    def __ne__(self, other):
        return _NonGuiOpenVisus.DatasetBitmask___ne__(self, other)

    def upgradeBox(self, box, maxh):
        return _NonGuiOpenVisus.DatasetBitmask_upgradeBox(self, box, maxh)

    def deinterleave(self, z, max_resolution):
        return _NonGuiOpenVisus.DatasetBitmask_deinterleave(self, z, max_resolution)

    def toString(self):
        return _NonGuiOpenVisus.DatasetBitmask_toString(self)

    def __add__(self, other):
        return _NonGuiOpenVisus.DatasetBitmask___add__(self, other)
    __swig_destroy__ = _NonGuiOpenVisus.delete_DatasetBitmask
    __del__ = lambda self: None
DatasetBitmask_swigregister = _NonGuiOpenVisus.DatasetBitmask_swigregister
DatasetBitmask_swigregister(DatasetBitmask)

def DatasetBitmask_getVisusClassName():
    return _NonGuiOpenVisus.DatasetBitmask_getVisusClassName()
DatasetBitmask_getVisusClassName = _NonGuiOpenVisus.DatasetBitmask_getVisusClassName

def DatasetBitmask_guess(dims, makeRegularAsSoonAsPossible=True):
    return _NonGuiOpenVisus.DatasetBitmask_guess(dims, makeRegularAsSoonAsPossible)
DatasetBitmask_guess = _NonGuiOpenVisus.DatasetBitmask_guess

def DatasetBitmask_invalid():
    return _NonGuiOpenVisus.DatasetBitmask_invalid()
DatasetBitmask_invalid = _NonGuiOpenVisus.DatasetBitmask_invalid

class KdQueryMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KdQueryMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KdQueryMode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NotSpecified = _NonGuiOpenVisus.KdQueryMode_NotSpecified
    UseBlockQuery = _NonGuiOpenVisus.KdQueryMode_UseBlockQuery
    UseQuery = _NonGuiOpenVisus.KdQueryMode_UseQuery
    if _newclass:
        fromString = staticmethod(_NonGuiOpenVisus.KdQueryMode_fromString)
    else:
        fromString = _NonGuiOpenVisus.KdQueryMode_fromString
    if _newclass:
        toString = staticmethod(_NonGuiOpenVisus.KdQueryMode_toString)
    else:
        toString = _NonGuiOpenVisus.KdQueryMode_toString
    __swig_destroy__ = _NonGuiOpenVisus.delete_KdQueryMode
    __del__ = lambda self: None
KdQueryMode_swigregister = _NonGuiOpenVisus.KdQueryMode_swigregister
KdQueryMode_swigregister(KdQueryMode)

def KdQueryMode_fromString(value):
    return _NonGuiOpenVisus.KdQueryMode_fromString(value)
KdQueryMode_fromString = _NonGuiOpenVisus.KdQueryMode_fromString

def KdQueryMode_toString(value):
    return _NonGuiOpenVisus.KdQueryMode_toString(value)
KdQueryMode_toString = _NonGuiOpenVisus.KdQueryMode_toString

class BaseDataset(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseDataset, name)
    __repr__ = _swig_repr
    __swig_setmethods__["url"] = _NonGuiOpenVisus.BaseDataset_url_set
    __swig_getmethods__["url"] = _NonGuiOpenVisus.BaseDataset_url_get
    if _newclass:
        url = _swig_property(_NonGuiOpenVisus.BaseDataset_url_get, _NonGuiOpenVisus.BaseDataset_url_set)
    __swig_setmethods__["dataset_body"] = _NonGuiOpenVisus.BaseDataset_dataset_body_set
    __swig_getmethods__["dataset_body"] = _NonGuiOpenVisus.BaseDataset_dataset_body_get
    if _newclass:
        dataset_body = _swig_property(_NonGuiOpenVisus.BaseDataset_dataset_body_get, _NonGuiOpenVisus.BaseDataset_dataset_body_set)
    __swig_setmethods__["bitmask"] = _NonGuiOpenVisus.BaseDataset_bitmask_set
    __swig_getmethods__["bitmask"] = _NonGuiOpenVisus.BaseDataset_bitmask_get
    if _newclass:
        bitmask = _swig_property(_NonGuiOpenVisus.BaseDataset_bitmask_get, _NonGuiOpenVisus.BaseDataset_bitmask_set)
    __swig_setmethods__["default_bitsperblock"] = _NonGuiOpenVisus.BaseDataset_default_bitsperblock_set
    __swig_getmethods__["default_bitsperblock"] = _NonGuiOpenVisus.BaseDataset_default_bitsperblock_get
    if _newclass:
        default_bitsperblock = _swig_property(_NonGuiOpenVisus.BaseDataset_default_bitsperblock_get, _NonGuiOpenVisus.BaseDataset_default_bitsperblock_set)
    __swig_setmethods__["box"] = _NonGuiOpenVisus.BaseDataset_box_set
    __swig_getmethods__["box"] = _NonGuiOpenVisus.BaseDataset_box_get
    if _newclass:
        box = _swig_property(_NonGuiOpenVisus.BaseDataset_box_get, _NonGuiOpenVisus.BaseDataset_box_set)
    __swig_setmethods__["timesteps"] = _NonGuiOpenVisus.BaseDataset_timesteps_set
    __swig_getmethods__["timesteps"] = _NonGuiOpenVisus.BaseDataset_timesteps_get
    if _newclass:
        timesteps = _swig_property(_NonGuiOpenVisus.BaseDataset_timesteps_get, _NonGuiOpenVisus.BaseDataset_timesteps_set)
    __swig_setmethods__["default_scene"] = _NonGuiOpenVisus.BaseDataset_default_scene_set
    __swig_getmethods__["default_scene"] = _NonGuiOpenVisus.BaseDataset_default_scene_get
    if _newclass:
        default_scene = _swig_property(_NonGuiOpenVisus.BaseDataset_default_scene_get, _NonGuiOpenVisus.BaseDataset_default_scene_set)
    __swig_setmethods__["config"] = _NonGuiOpenVisus.BaseDataset_config_set
    __swig_getmethods__["config"] = _NonGuiOpenVisus.BaseDataset_config_get
    if _newclass:
        config = _swig_property(_NonGuiOpenVisus.BaseDataset_config_get, _NonGuiOpenVisus.BaseDataset_config_set)
    __swig_setmethods__["ram_access"] = _NonGuiOpenVisus.BaseDataset_ram_access_set
    __swig_getmethods__["ram_access"] = _NonGuiOpenVisus.BaseDataset_ram_access_get
    if _newclass:
        ram_access = _swig_property(_NonGuiOpenVisus.BaseDataset_ram_access_get, _NonGuiOpenVisus.BaseDataset_ram_access_set)
    __swig_setmethods__["kdquery_mode"] = _NonGuiOpenVisus.BaseDataset_kdquery_mode_set
    __swig_getmethods__["kdquery_mode"] = _NonGuiOpenVisus.BaseDataset_kdquery_mode_get
    if _newclass:
        kdquery_mode = _swig_property(_NonGuiOpenVisus.BaseDataset_kdquery_mode_get, _NonGuiOpenVisus.BaseDataset_kdquery_mode_set)
    __swig_setmethods__["fields"] = _NonGuiOpenVisus.BaseDataset_fields_set
    __swig_getmethods__["fields"] = _NonGuiOpenVisus.BaseDataset_fields_get
    if _newclass:
        fields = _swig_property(_NonGuiOpenVisus.BaseDataset_fields_get, _NonGuiOpenVisus.BaseDataset_fields_set)
    __swig_setmethods__["find_field"] = _NonGuiOpenVisus.BaseDataset_find_field_set
    __swig_getmethods__["find_field"] = _NonGuiOpenVisus.BaseDataset_find_field_get
    if _newclass:
        find_field = _swig_property(_NonGuiOpenVisus.BaseDataset_find_field_get, _NonGuiOpenVisus.BaseDataset_find_field_set)
    __swig_setmethods__["bServerMode"] = _NonGuiOpenVisus.BaseDataset_bServerMode_set
    __swig_getmethods__["bServerMode"] = _NonGuiOpenVisus.BaseDataset_bServerMode_get
    if _newclass:
        bServerMode = _swig_property(_NonGuiOpenVisus.BaseDataset_bServerMode_get, _NonGuiOpenVisus.BaseDataset_bServerMode_set)

    def __init__(self):
        this = _NonGuiOpenVisus.new_BaseDataset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_BaseDataset
    __del__ = lambda self: None
BaseDataset_swigregister = _NonGuiOpenVisus.BaseDataset_swigregister
BaseDataset_swigregister(BaseDataset)

class Dataset(BaseDataset):
    __swig_setmethods__ = {}
    for _s in [BaseDataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataset, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseDataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dataset, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Dataset_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Dataset_getVisusClassName
    __swig_destroy__ = _NonGuiOpenVisus.delete_Dataset
    __del__ = lambda self: None
    if _newclass:
        copyDataset = staticmethod(_NonGuiOpenVisus.Dataset_copyDataset)
    else:
        copyDataset = _NonGuiOpenVisus.Dataset_copyDataset
    if _newclass:
        findDatasetInVisusConfig = staticmethod(_NonGuiOpenVisus.Dataset_findDatasetInVisusConfig)
    else:
        findDatasetInVisusConfig = _NonGuiOpenVisus.Dataset_findDatasetInVisusConfig
    if _newclass:
        getDefaultDatasetInVisusConfig = staticmethod(_NonGuiOpenVisus.Dataset_getDefaultDatasetInVisusConfig)
    else:
        getDefaultDatasetInVisusConfig = _NonGuiOpenVisus.Dataset_getDefaultDatasetInVisusConfig
    if _newclass:
        loadDataset = staticmethod(_NonGuiOpenVisus.Dataset_loadDataset)
    else:
        loadDataset = _NonGuiOpenVisus.Dataset_loadDataset

    def valid(self):
        return _NonGuiOpenVisus.Dataset_valid(self)

    def invalidate(self):
        return _NonGuiOpenVisus.Dataset_invalidate(self)

    def getUrl(self):
        return _NonGuiOpenVisus.Dataset_getUrl(self)

    def setUrl(self, value):
        return _NonGuiOpenVisus.Dataset_setUrl(self, value)

    def setDatasetBody(self, value):
        return _NonGuiOpenVisus.Dataset_setDatasetBody(self, value)

    def getBitmask(self):
        return _NonGuiOpenVisus.Dataset_getBitmask(self)

    def getBox(self):
        return _NonGuiOpenVisus.Dataset_getBox(self)

    def getTimesteps(self):
        return _NonGuiOpenVisus.Dataset_getTimesteps(self)

    def getDefaultBitsPerBlock(self):
        return _NonGuiOpenVisus.Dataset_getDefaultBitsPerBlock(self)

    def getTotalnumberOfBlocks(self):
        return _NonGuiOpenVisus.Dataset_getTotalnumberOfBlocks(self)

    def getConfig(self):
        return _NonGuiOpenVisus.Dataset_getConfig(self)

    def getDefaultTime(self):
        return _NonGuiOpenVisus.Dataset_getDefaultTime(self)

    def getAccessConfigs(self):
        return _NonGuiOpenVisus.Dataset_getAccessConfigs(self)

    def getDefaultAccessConfig(self):
        return _NonGuiOpenVisus.Dataset_getDefaultAccessConfig(self)

    def getMaxResolution(self):
        return _NonGuiOpenVisus.Dataset_getMaxResolution(self)

    def getPointDim(self):
        return _NonGuiOpenVisus.Dataset_getPointDim(self)

    def getKdQueryMode(self):
        return _NonGuiOpenVisus.Dataset_getKdQueryMode(self)

    def setKdQueryMode(self, value):
        return _NonGuiOpenVisus.Dataset_setKdQueryMode(self, value)

    def getDefaultField(self):
        return _NonGuiOpenVisus.Dataset_getDefaultField(self)

    def getDefaultScene(self):
        return _NonGuiOpenVisus.Dataset_getDefaultScene(self)

    def getFields(self):
        return _NonGuiOpenVisus.Dataset_getFields(self)

    def getDatasetBody(self):
        return _NonGuiOpenVisus.Dataset_getDatasetBody(self)

    def toString(self):
        return _NonGuiOpenVisus.Dataset_toString(self)

    def getDatasetInfos(self):
        return _NonGuiOpenVisus.Dataset_getDatasetInfos(self)

    def extractLevelImage(self, access, field, time, H):
        return _NonGuiOpenVisus.Dataset_extractLevelImage(self, access, field, time, H)

    def openFromUrl(self, url):
        return _NonGuiOpenVisus.Dataset_openFromUrl(self, url)

    def compress(self, compression):
        return _NonGuiOpenVisus.Dataset_compress(self, compression)

    def getInnerDatasets(self):
        return _NonGuiOpenVisus.Dataset_getInnerDatasets(self)

    def guessEndResolutions(self, *args):
        return _NonGuiOpenVisus.Dataset_guessEndResolutions(self, *args)

    def getFieldByNameThrowEx(self, name):
        return _NonGuiOpenVisus.Dataset_getFieldByNameThrowEx(self, name)

    def getFieldByName(self, name):
        return _NonGuiOpenVisus.Dataset_getFieldByName(self, name)

    def createAccess(self, *args):
        return _NonGuiOpenVisus.Dataset_createAccess(self, *args)

    def createAccessForBlockQuery(self):
        return _NonGuiOpenVisus.Dataset_createAccessForBlockQuery(self)

    def getLevelBox(self, H):
        return _NonGuiOpenVisus.Dataset_getLevelBox(self, H)

    def getAddressRangeBox(self, start_address, end_address):
        return _NonGuiOpenVisus.Dataset_getAddressRangeBox(self, start_address, end_address)

    def readBlock(self, access, query):
        return _NonGuiOpenVisus.Dataset_readBlock(self, access, query)

    def writeBlock(self, access, query):
        return _NonGuiOpenVisus.Dataset_writeBlock(self, access, query)

    def readBlockAndWait(self, access, query):
        return _NonGuiOpenVisus.Dataset_readBlockAndWait(self, access, query)

    def writeBlockAndWait(self, access, query):
        return _NonGuiOpenVisus.Dataset_writeBlockAndWait(self, access, query)

    def convertBlockQueryToRowMajor(self, block_query):
        return _NonGuiOpenVisus.Dataset_convertBlockQueryToRowMajor(self, block_query)

    def createQueryFilter(self, field):
        return _NonGuiOpenVisus.Dataset_createQueryFilter(self, field)

    def beginQuery(self, query):
        return _NonGuiOpenVisus.Dataset_beginQuery(self, query)

    def executeQuery(self, access, query):
        return _NonGuiOpenVisus.Dataset_executeQuery(self, access, query)

    def nextQuery(self, query):
        return _NonGuiOpenVisus.Dataset_nextQuery(self, query)

    def mergeQueryWithBlock(self, query, block_query):
        return _NonGuiOpenVisus.Dataset_mergeQueryWithBlock(self, query, block_query)

    def createPureRemoteQueryNetRequest(self, query):
        return _NonGuiOpenVisus.Dataset_createPureRemoteQueryNetRequest(self, query)

    def addField(self, *args):
        return _NonGuiOpenVisus.Dataset_addField(self, *args)

    def executePureRemoteQuery(self, query):
        return _NonGuiOpenVisus.Dataset_executePureRemoteQuery(self, query)

    def generateTiles(self, TileSize):
        return _NonGuiOpenVisus.Dataset_generateTiles(self, TileSize)

    def readMaxResolutionData(self, *args):
        return _NonGuiOpenVisus.Dataset_readMaxResolutionData(self, *args)

    def writeMaxResolutionData(self, *args):
        return _NonGuiOpenVisus.Dataset_writeMaxResolutionData(self, *args)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Dataset_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Dataset_readFromObjectStream(self, istream)
Dataset_swigregister = _NonGuiOpenVisus.Dataset_swigregister
Dataset_swigregister(Dataset)

def Dataset_getVisusClassName():
    return _NonGuiOpenVisus.Dataset_getVisusClassName()
Dataset_getVisusClassName = _NonGuiOpenVisus.Dataset_getVisusClassName

def Dataset_copyDataset(Dvf, Daccess, Dfield, Dtime, Svf, Saccess, Sfield, Stime):
    return _NonGuiOpenVisus.Dataset_copyDataset(Dvf, Daccess, Dfield, Dtime, Svf, Saccess, Sfield, Stime)
Dataset_copyDataset = _NonGuiOpenVisus.Dataset_copyDataset

def Dataset_findDatasetInVisusConfig(name):
    return _NonGuiOpenVisus.Dataset_findDatasetInVisusConfig(name)
Dataset_findDatasetInVisusConfig = _NonGuiOpenVisus.Dataset_findDatasetInVisusConfig

def Dataset_getDefaultDatasetInVisusConfig():
    return _NonGuiOpenVisus.Dataset_getDefaultDatasetInVisusConfig()
Dataset_getDefaultDatasetInVisusConfig = _NonGuiOpenVisus.Dataset_getDefaultDatasetInVisusConfig

def Dataset_loadDataset(name):
    return _NonGuiOpenVisus.Dataset_loadDataset(name)
Dataset_loadDataset = _NonGuiOpenVisus.Dataset_loadDataset

class DatasetPluginFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetPluginFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetPluginFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_NonGuiOpenVisus.DatasetPluginFactory_getSingleton)
    else:
        getSingleton = _NonGuiOpenVisus.DatasetPluginFactory_getSingleton
    if _newclass:
        allocSingleton = staticmethod(_NonGuiOpenVisus.DatasetPluginFactory_allocSingleton)
    else:
        allocSingleton = _NonGuiOpenVisus.DatasetPluginFactory_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_NonGuiOpenVisus.DatasetPluginFactory_releaseSingleton)
    else:
        releaseSingleton = _NonGuiOpenVisus.DatasetPluginFactory_releaseSingleton

    def registerDatasetType(self, extension, TypeName):
        return _NonGuiOpenVisus.DatasetPluginFactory_registerDatasetType(self, extension, TypeName)

    def getRegisteredDatasetType(self, extension):
        return _NonGuiOpenVisus.DatasetPluginFactory_getRegisteredDatasetType(self, extension)
    __swig_destroy__ = _NonGuiOpenVisus.delete_DatasetPluginFactory
    __del__ = lambda self: None
DatasetPluginFactory_swigregister = _NonGuiOpenVisus.DatasetPluginFactory_swigregister
DatasetPluginFactory_swigregister(DatasetPluginFactory)

def DatasetPluginFactory_getSingleton():
    return _NonGuiOpenVisus.DatasetPluginFactory_getSingleton()
DatasetPluginFactory_getSingleton = _NonGuiOpenVisus.DatasetPluginFactory_getSingleton

def DatasetPluginFactory_allocSingleton():
    return _NonGuiOpenVisus.DatasetPluginFactory_allocSingleton()
DatasetPluginFactory_allocSingleton = _NonGuiOpenVisus.DatasetPluginFactory_allocSingleton

def DatasetPluginFactory_releaseSingleton():
    return _NonGuiOpenVisus.DatasetPluginFactory_releaseSingleton()
DatasetPluginFactory_releaseSingleton = _NonGuiOpenVisus.DatasetPluginFactory_releaseSingleton

class DataflowPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataflowPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataflowPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_DataflowPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DataflowPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.DataflowPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.DataflowPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.DataflowPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.DataflowPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.DataflowPtr___nonzero__(self)
    __bool__ = __nonzero__


DataflowPtr_swigregister = _NonGuiOpenVisus.DataflowPtr_swigregister
DataflowPtr_swigregister(DataflowPtr)

class DataflowMessagePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataflowMessagePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataflowMessagePtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_DataflowMessagePtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DataflowMessagePtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.DataflowMessagePtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.DataflowMessagePtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.DataflowMessagePtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.DataflowMessagePtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.DataflowMessagePtr___nonzero__(self)
    __bool__ = __nonzero__


DataflowMessagePtr_swigregister = _NonGuiOpenVisus.DataflowMessagePtr_swigregister
DataflowMessagePtr_swigregister(DataflowMessagePtr)

class ReturnReceiptPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnReceiptPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnReceiptPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_ReturnReceiptPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_ReturnReceiptPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.ReturnReceiptPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.ReturnReceiptPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.ReturnReceiptPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.ReturnReceiptPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.ReturnReceiptPtr___nonzero__(self)
    __bool__ = __nonzero__


ReturnReceiptPtr_swigregister = _NonGuiOpenVisus.ReturnReceiptPtr_swigregister
ReturnReceiptPtr_swigregister(ReturnReceiptPtr)

class NodeJobPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeJobPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeJobPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_NodeJobPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_NodeJobPtr
    __del__ = lambda self: None

    def assign(self, other):
        return _NonGuiOpenVisus.NodeJobPtr_assign(self, other)

    def reset(self, *args):
        return _NonGuiOpenVisus.NodeJobPtr_reset(self, *args)

    def get(self):
        return _NonGuiOpenVisus.NodeJobPtr_get(self)

    def __const_indirection_op__(self):
        return _NonGuiOpenVisus.NodeJobPtr___const_indirection_op__(self)

    def __nonzero__(self):
        return _NonGuiOpenVisus.NodeJobPtr___nonzero__(self)
    __bool__ = __nonzero__


NodeJobPtr_swigregister = _NonGuiOpenVisus.NodeJobPtr_swigregister
NodeJobPtr_swigregister(NodeJobPtr)

class VectorNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorNode, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _NonGuiOpenVisus.VectorNode_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _NonGuiOpenVisus.VectorNode___nonzero__(self)

    def __bool__(self):
        return _NonGuiOpenVisus.VectorNode___bool__(self)

    def __len__(self):
        return _NonGuiOpenVisus.VectorNode___len__(self)

    def __getslice__(self, i, j):
        return _NonGuiOpenVisus.VectorNode___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _NonGuiOpenVisus.VectorNode___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _NonGuiOpenVisus.VectorNode___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _NonGuiOpenVisus.VectorNode___delitem__(self, *args)

    def __getitem__(self, *args):
        return _NonGuiOpenVisus.VectorNode___getitem__(self, *args)

    def __setitem__(self, *args):
        return _NonGuiOpenVisus.VectorNode___setitem__(self, *args)

    def pop(self):
        return _NonGuiOpenVisus.VectorNode_pop(self)

    def append(self, x):
        return _NonGuiOpenVisus.VectorNode_append(self, x)

    def empty(self):
        return _NonGuiOpenVisus.VectorNode_empty(self)

    def size(self):
        return _NonGuiOpenVisus.VectorNode_size(self)

    def swap(self, v):
        return _NonGuiOpenVisus.VectorNode_swap(self, v)

    def begin(self):
        return _NonGuiOpenVisus.VectorNode_begin(self)

    def end(self):
        return _NonGuiOpenVisus.VectorNode_end(self)

    def rbegin(self):
        return _NonGuiOpenVisus.VectorNode_rbegin(self)

    def rend(self):
        return _NonGuiOpenVisus.VectorNode_rend(self)

    def clear(self):
        return _NonGuiOpenVisus.VectorNode_clear(self)

    def get_allocator(self):
        return _NonGuiOpenVisus.VectorNode_get_allocator(self)

    def pop_back(self):
        return _NonGuiOpenVisus.VectorNode_pop_back(self)

    def erase(self, *args):
        return _NonGuiOpenVisus.VectorNode_erase(self, *args)

    def __init__(self, *args):
        this = _NonGuiOpenVisus.new_VectorNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _NonGuiOpenVisus.VectorNode_push_back(self, x)

    def front(self):
        return _NonGuiOpenVisus.VectorNode_front(self)

    def back(self):
        return _NonGuiOpenVisus.VectorNode_back(self)

    def assign(self, n, x):
        return _NonGuiOpenVisus.VectorNode_assign(self, n, x)

    def resize(self, *args):
        return _NonGuiOpenVisus.VectorNode_resize(self, *args)

    def insert(self, *args):
        return _NonGuiOpenVisus.VectorNode_insert(self, *args)

    def reserve(self, n):
        return _NonGuiOpenVisus.VectorNode_reserve(self, n)

    def capacity(self):
        return _NonGuiOpenVisus.VectorNode_capacity(self)
    __swig_destroy__ = _NonGuiOpenVisus.delete_VectorNode
    __del__ = lambda self: None
VectorNode_swigregister = _NonGuiOpenVisus.VectorNode_swigregister
VectorNode_swigregister(VectorNode)

class DataflowModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataflowModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataflowModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _NonGuiOpenVisus.DataflowModule_bAttached_set
    __swig_getmethods__["bAttached"] = _NonGuiOpenVisus.DataflowModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_NonGuiOpenVisus.DataflowModule_bAttached_get, _NonGuiOpenVisus.DataflowModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_NonGuiOpenVisus.DataflowModule_attach)
    else:
        attach = _NonGuiOpenVisus.DataflowModule_attach
    if _newclass:
        detach = staticmethod(_NonGuiOpenVisus.DataflowModule_detach)
    else:
        detach = _NonGuiOpenVisus.DataflowModule_detach

    def __init__(self):
        this = _NonGuiOpenVisus.new_DataflowModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DataflowModule
    __del__ = lambda self: None
DataflowModule_swigregister = _NonGuiOpenVisus.DataflowModule_swigregister
DataflowModule_swigregister(DataflowModule)

def DataflowModule_attach():
    return _NonGuiOpenVisus.DataflowModule_attach()
DataflowModule_attach = _NonGuiOpenVisus.DataflowModule_attach

def DataflowModule_detach():
    return _NonGuiOpenVisus.DataflowModule_detach()
DataflowModule_detach = _NonGuiOpenVisus.DataflowModule_detach

class ReturnReceipt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReturnReceipt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReturnReceipt, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.ReturnReceipt_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.ReturnReceipt_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_ReturnReceipt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_ReturnReceipt
    __del__ = lambda self: None
    if _newclass:
        createPassThroughtReceipt = staticmethod(_NonGuiOpenVisus.ReturnReceipt_createPassThroughtReceipt)
    else:
        createPassThroughtReceipt = _NonGuiOpenVisus.ReturnReceipt_createPassThroughtReceipt

    def isReady(self):
        return _NonGuiOpenVisus.ReturnReceipt_isReady(self)

    def waitReady(self, ready_semaphore):
        return _NonGuiOpenVisus.ReturnReceipt_waitReady(self, ready_semaphore)

    def needSignature(self, signer):
        return _NonGuiOpenVisus.ReturnReceipt_needSignature(self, signer)

    def addSignature(self, signer):
        return _NonGuiOpenVisus.ReturnReceipt_addSignature(self, signer)
ReturnReceipt_swigregister = _NonGuiOpenVisus.ReturnReceipt_swigregister
ReturnReceipt_swigregister(ReturnReceipt)

def ReturnReceipt_getVisusClassName():
    return _NonGuiOpenVisus.ReturnReceipt_getVisusClassName()
ReturnReceipt_getVisusClassName = _NonGuiOpenVisus.ReturnReceipt_getVisusClassName

def ReturnReceipt_createPassThroughtReceipt(node):
    return _NonGuiOpenVisus.ReturnReceipt_createPassThroughtReceipt(node)
ReturnReceipt_createPassThroughtReceipt = _NonGuiOpenVisus.ReturnReceipt_createPassThroughtReceipt

class DataflowMessage(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataflowMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataflowMessage, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _NonGuiOpenVisus.new_DataflowMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DataflowMessage
    __del__ = lambda self: None

    def getSender(self):
        return _NonGuiOpenVisus.DataflowMessage_getSender(self)

    def setSender(self, value):
        return _NonGuiOpenVisus.DataflowMessage_setSender(self, value)

    def getReturnReceipt(self):
        return _NonGuiOpenVisus.DataflowMessage_getReturnReceipt(self)

    def setReturnReceipt(self, value):
        return _NonGuiOpenVisus.DataflowMessage_setReturnReceipt(self, value)

    def getContent(self):
        return _NonGuiOpenVisus.DataflowMessage_getContent(self)

    def hasContent(self, key):
        return _NonGuiOpenVisus.DataflowMessage_hasContent(self, key)

    def readContent(self, *args):
        return _NonGuiOpenVisus.DataflowMessage_readContent(self, *args)

    def writeContent(self, key, value):
        return _NonGuiOpenVisus.DataflowMessage_writeContent(self, key, value)
DataflowMessage_swigregister = _NonGuiOpenVisus.DataflowMessage_swigregister
DataflowMessage_swigregister(DataflowMessage)

class DataflowPortStoredValue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataflowPortStoredValue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataflowPortStoredValue, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.DataflowPortStoredValue_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.DataflowPortStoredValue_getVisusClassName
    __swig_setmethods__["value"] = _NonGuiOpenVisus.DataflowPortStoredValue_value_set
    __swig_getmethods__["value"] = _NonGuiOpenVisus.DataflowPortStoredValue_value_get
    if _newclass:
        value = _swig_property(_NonGuiOpenVisus.DataflowPortStoredValue_value_get, _NonGuiOpenVisus.DataflowPortStoredValue_value_set)
    __swig_setmethods__["write_id"] = _NonGuiOpenVisus.DataflowPortStoredValue_write_id_set
    __swig_getmethods__["write_id"] = _NonGuiOpenVisus.DataflowPortStoredValue_write_id_get
    if _newclass:
        write_id = _swig_property(_NonGuiOpenVisus.DataflowPortStoredValue_write_id_get, _NonGuiOpenVisus.DataflowPortStoredValue_write_id_set)
    __swig_setmethods__["write_timestamp"] = _NonGuiOpenVisus.DataflowPortStoredValue_write_timestamp_set
    __swig_getmethods__["write_timestamp"] = _NonGuiOpenVisus.DataflowPortStoredValue_write_timestamp_get
    if _newclass:
        write_timestamp = _swig_property(_NonGuiOpenVisus.DataflowPortStoredValue_write_timestamp_get, _NonGuiOpenVisus.DataflowPortStoredValue_write_timestamp_set)
    __swig_setmethods__["return_receipt"] = _NonGuiOpenVisus.DataflowPortStoredValue_return_receipt_set
    __swig_getmethods__["return_receipt"] = _NonGuiOpenVisus.DataflowPortStoredValue_return_receipt_get
    if _newclass:
        return_receipt = _swig_property(_NonGuiOpenVisus.DataflowPortStoredValue_return_receipt_get, _NonGuiOpenVisus.DataflowPortStoredValue_return_receipt_set)

    def __init__(self):
        this = _NonGuiOpenVisus.new_DataflowPortStoredValue()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DataflowPortStoredValue
    __del__ = lambda self: None
DataflowPortStoredValue_swigregister = _NonGuiOpenVisus.DataflowPortStoredValue_swigregister
DataflowPortStoredValue_swigregister(DataflowPortStoredValue)

def DataflowPortStoredValue_getVisusClassName():
    return _NonGuiOpenVisus.DataflowPortStoredValue_getVisusClassName()
DataflowPortStoredValue_getVisusClassName = _NonGuiOpenVisus.DataflowPortStoredValue_getVisusClassName

class DataflowPort(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataflowPort, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataflowPort, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.DataflowPort_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.DataflowPort_getVisusClassName
    DoNotStoreValue = _NonGuiOpenVisus.DataflowPort_DoNotStoreValue
    StoreOnlyOnePersistentValue = _NonGuiOpenVisus.DataflowPort_StoreOnlyOnePersistentValue
    StoreOnlyOneVolatileValue = _NonGuiOpenVisus.DataflowPort_StoreOnlyOneVolatileValue
    StoreMultipleVolatileValues = _NonGuiOpenVisus.DataflowPort_StoreMultipleVolatileValues
    DefaultInputPortPolicy = _NonGuiOpenVisus.DataflowPort_DefaultInputPortPolicy
    DefaultOutputPortPolicy = _NonGuiOpenVisus.DataflowPort_DefaultOutputPortPolicy
    __swig_setmethods__["inputs"] = _NonGuiOpenVisus.DataflowPort_inputs_set
    __swig_getmethods__["inputs"] = _NonGuiOpenVisus.DataflowPort_inputs_get
    if _newclass:
        inputs = _swig_property(_NonGuiOpenVisus.DataflowPort_inputs_get, _NonGuiOpenVisus.DataflowPort_inputs_set)
    __swig_setmethods__["outputs"] = _NonGuiOpenVisus.DataflowPort_outputs_set
    __swig_getmethods__["outputs"] = _NonGuiOpenVisus.DataflowPort_outputs_get
    if _newclass:
        outputs = _swig_property(_NonGuiOpenVisus.DataflowPort_outputs_get, _NonGuiOpenVisus.DataflowPort_outputs_set)

    def __init__(self):
        this = _NonGuiOpenVisus.new_DataflowPort()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DataflowPort
    __del__ = lambda self: None

    def getNode(self):
        return _NonGuiOpenVisus.DataflowPort_getNode(self)

    def setNode(self, node):
        return _NonGuiOpenVisus.DataflowPort_setNode(self, node)

    def getName(self):
        return _NonGuiOpenVisus.DataflowPort_getName(self)

    def setName(self, name):
        return _NonGuiOpenVisus.DataflowPort_setName(self, name)

    def getPolicy(self):
        return _NonGuiOpenVisus.DataflowPort_getPolicy(self)

    def setPolicy(self, value):
        return _NonGuiOpenVisus.DataflowPort_setPolicy(self, value)

    def isConnected(self):
        return _NonGuiOpenVisus.DataflowPort_isConnected(self)

    def isInputConnectedTo(self, other):
        return _NonGuiOpenVisus.DataflowPort_isInputConnectedTo(self, other)

    def isOutputConnectedTo(self, other):
        return _NonGuiOpenVisus.DataflowPort_isOutputConnectedTo(self, other)

    def hasNewValue(self):
        return _NonGuiOpenVisus.DataflowPort_hasNewValue(self)

    def writeValue(self, *args):
        return _NonGuiOpenVisus.DataflowPort_writeValue(self, *args)

    def readValue(self, write_timestamp=None):
        return _NonGuiOpenVisus.DataflowPort_readValue(self, write_timestamp)

    def previewValue(self):
        return _NonGuiOpenVisus.DataflowPort_previewValue(self)

    def disconnect(self):
        return _NonGuiOpenVisus.DataflowPort_disconnect(self)
DataflowPort_swigregister = _NonGuiOpenVisus.DataflowPort_swigregister
DataflowPort_swigregister(DataflowPort)

def DataflowPort_getVisusClassName():
    return _NonGuiOpenVisus.DataflowPort_getVisusClassName()
DataflowPort_getVisusClassName = _NonGuiOpenVisus.DataflowPort_getVisusClassName

class NodeJob(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeJob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeJob, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.NodeJob_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.NodeJob_getVisusClassName
    __swig_setmethods__["aborted"] = _NonGuiOpenVisus.NodeJob_aborted_set
    __swig_getmethods__["aborted"] = _NonGuiOpenVisus.NodeJob_aborted_get
    if _newclass:
        aborted = _swig_property(_NonGuiOpenVisus.NodeJob_aborted_get, _NonGuiOpenVisus.NodeJob_aborted_set)
    __swig_setmethods__["done"] = _NonGuiOpenVisus.NodeJob_done_set
    __swig_getmethods__["done"] = _NonGuiOpenVisus.NodeJob_done_get
    if _newclass:
        done = _swig_property(_NonGuiOpenVisus.NodeJob_done_get, _NonGuiOpenVisus.NodeJob_done_set)
    __swig_destroy__ = _NonGuiOpenVisus.delete_NodeJob
    __del__ = lambda self: None

    def runJob(self):
        return _NonGuiOpenVisus.NodeJob_runJob(self)

    def abort(self):
        return _NonGuiOpenVisus.NodeJob_abort(self)
NodeJob_swigregister = _NonGuiOpenVisus.NodeJob_swigregister
NodeJob_swigregister(NodeJob)

def NodeJob_getVisusClassName():
    return _NonGuiOpenVisus.NodeJob_getVisusClassName()
NodeJob_getVisusClassName = _NonGuiOpenVisus.NodeJob_getVisusClassName

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Node_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Node_getVisusClassName
    __swig_setmethods__["outputs"] = _NonGuiOpenVisus.Node_outputs_set
    __swig_getmethods__["outputs"] = _NonGuiOpenVisus.Node_outputs_get
    if _newclass:
        outputs = _swig_property(_NonGuiOpenVisus.Node_outputs_get, _NonGuiOpenVisus.Node_outputs_set)
    __swig_setmethods__["inputs"] = _NonGuiOpenVisus.Node_inputs_set
    __swig_getmethods__["inputs"] = _NonGuiOpenVisus.Node_inputs_get
    if _newclass:
        inputs = _swig_property(_NonGuiOpenVisus.Node_inputs_get, _NonGuiOpenVisus.Node_inputs_set)
    __swig_setmethods__["frameview_bounds"] = _NonGuiOpenVisus.Node_frameview_bounds_set
    __swig_getmethods__["frameview_bounds"] = _NonGuiOpenVisus.Node_frameview_bounds_get
    if _newclass:
        frameview_bounds = _swig_property(_NonGuiOpenVisus.Node_frameview_bounds_get, _NonGuiOpenVisus.Node_frameview_bounds_set)

    def __init__(self, *args):
        if self.__class__ == Node:
            _self = None
        else:
            _self = self
        this = _NonGuiOpenVisus.new_Node(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Node
    __del__ = lambda self: None

    def getName(self):
        return _NonGuiOpenVisus.Node_getName(self)

    def setName(self, value):
        return _NonGuiOpenVisus.Node_setName(self, value)

    def getUUID(self):
        return _NonGuiOpenVisus.Node_getUUID(self)

    def getParent(self):
        return _NonGuiOpenVisus.Node_getParent(self)

    def isHidden(self):
        return _NonGuiOpenVisus.Node_isHidden(self)

    def setHidden(self, value):
        return _NonGuiOpenVisus.Node_setHidden(self, value)

    def getChilds(self):
        return _NonGuiOpenVisus.Node_getChilds(self)

    def getNodeBounds(self):
        return _NonGuiOpenVisus.Node_getNodeBounds(self)

    def getDataflow(self):
        return _NonGuiOpenVisus.Node_getDataflow(self)

    def enterInDataflow(self):
        return _NonGuiOpenVisus.Node_enterInDataflow(self)

    def exitFromDataflow(self):
        return _NonGuiOpenVisus.Node_exitFromDataflow(self)

    def addNodeJob(self, job):
        return _NonGuiOpenVisus.Node_addNodeJob(self, job)

    def abortProcessing(self):
        return _NonGuiOpenVisus.Node_abortProcessing(self)

    def joinProcessing(self):
        return _NonGuiOpenVisus.Node_joinProcessing(self)

    def addInputPort(self, *args):
        return _NonGuiOpenVisus.Node_addInputPort(self, *args)

    def addOutputPort(self, *args):
        return _NonGuiOpenVisus.Node_addOutputPort(self, *args)

    def getInputPort(self, iport):
        return _NonGuiOpenVisus.Node_getInputPort(self, iport)

    def getOutputPort(self, oport):
        return _NonGuiOpenVisus.Node_getOutputPort(self, oport)

    def removeInputPort(self, name):
        return _NonGuiOpenVisus.Node_removeInputPort(self, name)

    def removeOutputPort(self, name):
        return _NonGuiOpenVisus.Node_removeOutputPort(self, name)

    def hasInputPort(self, iport):
        return _NonGuiOpenVisus.Node_hasInputPort(self, iport)

    def hasOutputPort(self, oport):
        return _NonGuiOpenVisus.Node_hasOutputPort(self, oport)

    def getInputPortNames(self):
        return _NonGuiOpenVisus.Node_getInputPortNames(self)

    def getOutputPortNames(self):
        return _NonGuiOpenVisus.Node_getOutputPortNames(self)

    def isInputConnected(self, iport):
        return _NonGuiOpenVisus.Node_isInputConnected(self, iport)

    def isOutputConnected(self, oport):
        return _NonGuiOpenVisus.Node_isOutputConnected(self, oport)

    def isOrphan(self):
        return _NonGuiOpenVisus.Node_isOrphan(self)

    def needProcessInputs(self):
        return _NonGuiOpenVisus.Node_needProcessInputs(self)

    def readInput(self, iport, write_timestamp=None):
        return _NonGuiOpenVisus.Node_readInput(self, iport, write_timestamp)

    def previewInput(self, iport, write_timestamp=None):
        return _NonGuiOpenVisus.Node_previewInput(self, iport, write_timestamp)

    def publish(self, *args):
        return _NonGuiOpenVisus.Node_publish(self, *args)

    def messageHasBeenPublished(self, msg):
        return _NonGuiOpenVisus.Node_messageHasBeenPublished(self, msg)

    def getFirstInputPort(self):
        return _NonGuiOpenVisus.Node_getFirstInputPort(self)

    def getFirstOutputPort(self):
        return _NonGuiOpenVisus.Node_getFirstOutputPort(self)

    def getPathToRoot(self):
        return _NonGuiOpenVisus.Node_getPathToRoot(self)

    def getPathFromRoot(self):
        return _NonGuiOpenVisus.Node_getPathFromRoot(self)

    def getIndexInParent(self):
        return _NonGuiOpenVisus.Node_getIndexInParent(self)

    def goUpIncludingBrothers(self):
        return _NonGuiOpenVisus.Node_goUpIncludingBrothers(self)

    def breadthFirstSearch(self):
        return _NonGuiOpenVisus.Node_breadthFirstSearch(self)

    def reversedBreadthFirstSearch(self):
        return _NonGuiOpenVisus.Node_reversedBreadthFirstSearch(self)

    def findChildWithName(self, name):
        return _NonGuiOpenVisus.Node_findChildWithName(self, name)

    def guessUniqueChildName(self, prefix):
        return _NonGuiOpenVisus.Node_guessUniqueChildName(self, prefix)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Node_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Node_readFromObjectStream(self, istream)

    def processInput(self):
        return _NonGuiOpenVisus.Node_processInput(self)
    def __disown__(self):
        self.this.disown()
        _NonGuiOpenVisus.disown_Node(self)
        return weakref_proxy(self)
Node_swigregister = _NonGuiOpenVisus.Node_swigregister
Node_swigregister(Node)

def Node_getVisusClassName():
    return _NonGuiOpenVisus.Node_getVisusClassName()
Node_getVisusClassName = _NonGuiOpenVisus.Node_getVisusClassName

class DataflowListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataflowListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataflowListener, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.DataflowListener_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.DataflowListener_getVisusClassName

    def __init__(self):
        this = _NonGuiOpenVisus.new_DataflowListener()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_DataflowListener
    __del__ = lambda self: None

    def dataflowMessageHasBeenPublished(self, msg):
        return _NonGuiOpenVisus.DataflowListener_dataflowMessageHasBeenPublished(self, msg)

    def dataflowBeingDestroyed(self):
        return _NonGuiOpenVisus.DataflowListener_dataflowBeingDestroyed(self)

    def dataflowBeforeProcessInput(self, node):
        return _NonGuiOpenVisus.DataflowListener_dataflowBeforeProcessInput(self, node)

    def dataflowAfterProcessInput(self, node):
        return _NonGuiOpenVisus.DataflowListener_dataflowAfterProcessInput(self, node)

    def dataflowSetName(self, node, old_value, new_value):
        return _NonGuiOpenVisus.DataflowListener_dataflowSetName(self, node, old_value, new_value)

    def dataflowSetHidden(self, node, old_value, new_value):
        return _NonGuiOpenVisus.DataflowListener_dataflowSetHidden(self, node, old_value, new_value)

    def dataflowAddNode(self, node):
        return _NonGuiOpenVisus.DataflowListener_dataflowAddNode(self, node)

    def dataflowRemoveNode(self, node):
        return _NonGuiOpenVisus.DataflowListener_dataflowRemoveNode(self, node)

    def dataflowMoveNode(self, dst, src, index):
        return _NonGuiOpenVisus.DataflowListener_dataflowMoveNode(self, dst, src, index)

    def dataflowSetSelection(self, old_selection, new_selection):
        return _NonGuiOpenVisus.DataflowListener_dataflowSetSelection(self, old_selection, new_selection)

    def dataflowConnectPorts(self, arg2, oport, iport, to):
        return _NonGuiOpenVisus.DataflowListener_dataflowConnectPorts(self, arg2, oport, iport, to)

    def dataflowDisconnectPorts(self, arg2, oport, iport, to):
        return _NonGuiOpenVisus.DataflowListener_dataflowDisconnectPorts(self, arg2, oport, iport, to)
DataflowListener_swigregister = _NonGuiOpenVisus.DataflowListener_swigregister
DataflowListener_swigregister(DataflowListener)

def DataflowListener_getVisusClassName():
    return _NonGuiOpenVisus.DataflowListener_getVisusClassName()
DataflowListener_getVisusClassName = _NonGuiOpenVisus.DataflowListener_getVisusClassName

class Dataflow(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataflow, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dataflow, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.Dataflow_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.Dataflow_getVisusClassName
    __swig_setmethods__["listeners"] = _NonGuiOpenVisus.Dataflow_listeners_set
    __swig_getmethods__["listeners"] = _NonGuiOpenVisus.Dataflow_listeners_get
    if _newclass:
        listeners = _swig_property(_NonGuiOpenVisus.Dataflow_listeners_get, _NonGuiOpenVisus.Dataflow_listeners_set)

    def __init__(self):
        this = _NonGuiOpenVisus.new_Dataflow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_Dataflow
    __del__ = lambda self: None

    def getRoot(self):
        return _NonGuiOpenVisus.Dataflow_getRoot(self)

    def getNodes(self):
        return _NonGuiOpenVisus.Dataflow_getNodes(self)

    def findNodeByUUID(self, uuid):
        return _NonGuiOpenVisus.Dataflow_findNodeByUUID(self, uuid)

    def findNodeByName(self, name):
        return _NonGuiOpenVisus.Dataflow_findNodeByName(self, name)

    def processInput(self, node):
        return _NonGuiOpenVisus.Dataflow_processInput(self, node)

    def needProcessInput(self, node):
        return _NonGuiOpenVisus.Dataflow_needProcessInput(self, node)

    def publish(self, msg):
        return _NonGuiOpenVisus.Dataflow_publish(self, msg)

    def abortProcessing(self):
        return _NonGuiOpenVisus.Dataflow_abortProcessing(self)

    def joinProcessing(self):
        return _NonGuiOpenVisus.Dataflow_joinProcessing(self)

    def guessLastPublished(self, arg2):
        return _NonGuiOpenVisus.Dataflow_guessLastPublished(self, arg2)

    def dispatchPublishedMessages(self):
        return _NonGuiOpenVisus.Dataflow_dispatchPublishedMessages(self)

    def containsNode(self, node):
        return _NonGuiOpenVisus.Dataflow_containsNode(self, node)

    def getSelection(self):
        return _NonGuiOpenVisus.Dataflow_getSelection(self)

    def setSelection(self, value):
        return _NonGuiOpenVisus.Dataflow_setSelection(self, value)

    def dropSelection(self):
        return _NonGuiOpenVisus.Dataflow_dropSelection(self)

    def addNode(self, *args):
        return _NonGuiOpenVisus.Dataflow_addNode(self, *args)

    def canMoveNode(self, dst, src):
        return _NonGuiOpenVisus.Dataflow_canMoveNode(self, dst, src)

    def moveNode(self, dst, src, index=-1):
        return _NonGuiOpenVisus.Dataflow_moveNode(self, dst, src, index)

    def removeNode(self, node):
        return _NonGuiOpenVisus.Dataflow_removeNode(self, node)

    def connectPorts(self, *args):
        return _NonGuiOpenVisus.Dataflow_connectPorts(self, *args)

    def disconnectPorts(self, arg2, oport, iport, to):
        return _NonGuiOpenVisus.Dataflow_disconnectPorts(self, arg2, oport, iport, to)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.Dataflow_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.Dataflow_readFromObjectStream(self, istream)
Dataflow_swigregister = _NonGuiOpenVisus.Dataflow_swigregister
Dataflow_swigregister(Dataflow)

def Dataflow_getVisusClassName():
    return _NonGuiOpenVisus.Dataflow_getVisusClassName()
Dataflow_getVisusClassName = _NonGuiOpenVisus.Dataflow_getVisusClassName

class NodesModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodesModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodesModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _NonGuiOpenVisus.NodesModule_bAttached_set
    __swig_getmethods__["bAttached"] = _NonGuiOpenVisus.NodesModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_NonGuiOpenVisus.NodesModule_bAttached_get, _NonGuiOpenVisus.NodesModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_NonGuiOpenVisus.NodesModule_attach)
    else:
        attach = _NonGuiOpenVisus.NodesModule_attach
    if _newclass:
        detach = staticmethod(_NonGuiOpenVisus.NodesModule_detach)
    else:
        detach = _NonGuiOpenVisus.NodesModule_detach

    def __init__(self):
        this = _NonGuiOpenVisus.new_NodesModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_NodesModule
    __del__ = lambda self: None
NodesModule_swigregister = _NonGuiOpenVisus.NodesModule_swigregister
NodesModule_swigregister(NodesModule)

def NodesModule_attach():
    return _NonGuiOpenVisus.NodesModule_attach()
NodesModule_attach = _NonGuiOpenVisus.NodesModule_attach

def NodesModule_detach():
    return _NonGuiOpenVisus.NodesModule_detach()
NodesModule_detach = _NonGuiOpenVisus.NodesModule_detach

class IdxModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdxModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _NonGuiOpenVisus.IdxModule_bAttached_set
    __swig_getmethods__["bAttached"] = _NonGuiOpenVisus.IdxModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_NonGuiOpenVisus.IdxModule_bAttached_get, _NonGuiOpenVisus.IdxModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_NonGuiOpenVisus.IdxModule_attach)
    else:
        attach = _NonGuiOpenVisus.IdxModule_attach
    if _newclass:
        detach = staticmethod(_NonGuiOpenVisus.IdxModule_detach)
    else:
        detach = _NonGuiOpenVisus.IdxModule_detach

    def __init__(self):
        this = _NonGuiOpenVisus.new_IdxModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_IdxModule
    __del__ = lambda self: None
IdxModule_swigregister = _NonGuiOpenVisus.IdxModule_swigregister
IdxModule_swigregister(IdxModule)

def IdxModule_attach():
    return _NonGuiOpenVisus.IdxModule_attach()
IdxModule_attach = _NonGuiOpenVisus.IdxModule_attach

def IdxModule_detach():
    return _NonGuiOpenVisus.IdxModule_detach()
IdxModule_detach = _NonGuiOpenVisus.IdxModule_detach

class IdxFile(Object):
    __swig_setmethods__ = {}
    for _s in [Object]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxFile, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxFile, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.IdxFile_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.IdxFile_getVisusClassName
    __swig_setmethods__["version"] = _NonGuiOpenVisus.IdxFile_version_set
    __swig_getmethods__["version"] = _NonGuiOpenVisus.IdxFile_version_get
    if _newclass:
        version = _swig_property(_NonGuiOpenVisus.IdxFile_version_get, _NonGuiOpenVisus.IdxFile_version_set)
    __swig_setmethods__["bitmask"] = _NonGuiOpenVisus.IdxFile_bitmask_set
    __swig_getmethods__["bitmask"] = _NonGuiOpenVisus.IdxFile_bitmask_get
    if _newclass:
        bitmask = _swig_property(_NonGuiOpenVisus.IdxFile_bitmask_get, _NonGuiOpenVisus.IdxFile_bitmask_set)
    __swig_setmethods__["box"] = _NonGuiOpenVisus.IdxFile_box_set
    __swig_getmethods__["box"] = _NonGuiOpenVisus.IdxFile_box_get
    if _newclass:
        box = _swig_property(_NonGuiOpenVisus.IdxFile_box_get, _NonGuiOpenVisus.IdxFile_box_set)
    __swig_setmethods__["fields"] = _NonGuiOpenVisus.IdxFile_fields_set
    __swig_getmethods__["fields"] = _NonGuiOpenVisus.IdxFile_fields_get
    if _newclass:
        fields = _swig_property(_NonGuiOpenVisus.IdxFile_fields_get, _NonGuiOpenVisus.IdxFile_fields_set)
    __swig_setmethods__["timesteps"] = _NonGuiOpenVisus.IdxFile_timesteps_set
    __swig_getmethods__["timesteps"] = _NonGuiOpenVisus.IdxFile_timesteps_get
    if _newclass:
        timesteps = _swig_property(_NonGuiOpenVisus.IdxFile_timesteps_get, _NonGuiOpenVisus.IdxFile_timesteps_set)
    __swig_setmethods__["bitsperblock"] = _NonGuiOpenVisus.IdxFile_bitsperblock_set
    __swig_getmethods__["bitsperblock"] = _NonGuiOpenVisus.IdxFile_bitsperblock_get
    if _newclass:
        bitsperblock = _swig_property(_NonGuiOpenVisus.IdxFile_bitsperblock_get, _NonGuiOpenVisus.IdxFile_bitsperblock_set)
    __swig_setmethods__["blocksperfile"] = _NonGuiOpenVisus.IdxFile_blocksperfile_set
    __swig_getmethods__["blocksperfile"] = _NonGuiOpenVisus.IdxFile_blocksperfile_get
    if _newclass:
        blocksperfile = _swig_property(_NonGuiOpenVisus.IdxFile_blocksperfile_get, _NonGuiOpenVisus.IdxFile_blocksperfile_set)
    __swig_setmethods__["block_interleaving"] = _NonGuiOpenVisus.IdxFile_block_interleaving_set
    __swig_getmethods__["block_interleaving"] = _NonGuiOpenVisus.IdxFile_block_interleaving_get
    if _newclass:
        block_interleaving = _swig_property(_NonGuiOpenVisus.IdxFile_block_interleaving_get, _NonGuiOpenVisus.IdxFile_block_interleaving_set)
    __swig_setmethods__["filename_template"] = _NonGuiOpenVisus.IdxFile_filename_template_set
    __swig_getmethods__["filename_template"] = _NonGuiOpenVisus.IdxFile_filename_template_get
    if _newclass:
        filename_template = _swig_property(_NonGuiOpenVisus.IdxFile_filename_template_get, _NonGuiOpenVisus.IdxFile_filename_template_set)
    __swig_setmethods__["time_template"] = _NonGuiOpenVisus.IdxFile_time_template_set
    __swig_getmethods__["time_template"] = _NonGuiOpenVisus.IdxFile_time_template_get
    if _newclass:
        time_template = _swig_property(_NonGuiOpenVisus.IdxFile_time_template_get, _NonGuiOpenVisus.IdxFile_time_template_set)
    __swig_setmethods__["scene"] = _NonGuiOpenVisus.IdxFile_scene_set
    __swig_getmethods__["scene"] = _NonGuiOpenVisus.IdxFile_scene_get
    if _newclass:
        scene = _swig_property(_NonGuiOpenVisus.IdxFile_scene_get, _NonGuiOpenVisus.IdxFile_scene_set)

    def __init__(self, version_=0):
        this = _NonGuiOpenVisus.new_IdxFile(version_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_NonGuiOpenVisus.IdxFile_invalid)
    else:
        invalid = _NonGuiOpenVisus.IdxFile_invalid
    if _newclass:
        openFromUrl = staticmethod(_NonGuiOpenVisus.IdxFile_openFromUrl)
    else:
        openFromUrl = _NonGuiOpenVisus.IdxFile_openFromUrl

    def valid(self):
        return _NonGuiOpenVisus.IdxFile_valid(self)

    def save(self, filename):
        return _NonGuiOpenVisus.IdxFile_save(self, filename)
    if _newclass:
        parseFields = staticmethod(_NonGuiOpenVisus.IdxFile_parseFields)
    else:
        parseFields = _NonGuiOpenVisus.IdxFile_parseFields

    def getBlockPositionInFile(self, blockid):
        return _NonGuiOpenVisus.IdxFile_getBlockPositionInFile(self, blockid)

    def getFirstBlockInFile(self, blockid):
        return _NonGuiOpenVisus.IdxFile_getFirstBlockInFile(self, blockid)

    def validate(self, url):
        return _NonGuiOpenVisus.IdxFile_validate(self, url)

    def toString(self):
        return _NonGuiOpenVisus.IdxFile_toString(self)

    def writeToObjectStream(self, ostream):
        return _NonGuiOpenVisus.IdxFile_writeToObjectStream(self, ostream)

    def readFromObjectStream(self, istream):
        return _NonGuiOpenVisus.IdxFile_readFromObjectStream(self, istream)
    __swig_destroy__ = _NonGuiOpenVisus.delete_IdxFile
    __del__ = lambda self: None
IdxFile_swigregister = _NonGuiOpenVisus.IdxFile_swigregister
IdxFile_swigregister(IdxFile)

def IdxFile_getVisusClassName():
    return _NonGuiOpenVisus.IdxFile_getVisusClassName()
IdxFile_getVisusClassName = _NonGuiOpenVisus.IdxFile_getVisusClassName

def IdxFile_invalid():
    return _NonGuiOpenVisus.IdxFile_invalid()
IdxFile_invalid = _NonGuiOpenVisus.IdxFile_invalid

def IdxFile_openFromUrl(url):
    return _NonGuiOpenVisus.IdxFile_openFromUrl(url)
IdxFile_openFromUrl = _NonGuiOpenVisus.IdxFile_openFromUrl

def IdxFile_parseFields(content):
    return _NonGuiOpenVisus.IdxFile_parseFields(content)
IdxFile_parseFields = _NonGuiOpenVisus.IdxFile_parseFields

class IdxDataset(Dataset):
    __swig_setmethods__ = {}
    for _s in [Dataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [Dataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxDataset, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.IdxDataset_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.IdxDataset_getVisusClassName
    __swig_setmethods__["idxfile"] = _NonGuiOpenVisus.IdxDataset_idxfile_set
    __swig_getmethods__["idxfile"] = _NonGuiOpenVisus.IdxDataset_idxfile_get
    if _newclass:
        idxfile = _swig_property(_NonGuiOpenVisus.IdxDataset_idxfile_get, _NonGuiOpenVisus.IdxDataset_idxfile_set)
    __swig_setmethods__["hzaddress_conversion_boxquery"] = _NonGuiOpenVisus.IdxDataset_hzaddress_conversion_boxquery_set
    __swig_getmethods__["hzaddress_conversion_boxquery"] = _NonGuiOpenVisus.IdxDataset_hzaddress_conversion_boxquery_get
    if _newclass:
        hzaddress_conversion_boxquery = _swig_property(_NonGuiOpenVisus.IdxDataset_hzaddress_conversion_boxquery_get, _NonGuiOpenVisus.IdxDataset_hzaddress_conversion_boxquery_set)
    __swig_setmethods__["hzaddress_conversion_pointquery"] = _NonGuiOpenVisus.IdxDataset_hzaddress_conversion_pointquery_set
    __swig_getmethods__["hzaddress_conversion_pointquery"] = _NonGuiOpenVisus.IdxDataset_hzaddress_conversion_pointquery_get
    if _newclass:
        hzaddress_conversion_pointquery = _swig_property(_NonGuiOpenVisus.IdxDataset_hzaddress_conversion_pointquery_get, _NonGuiOpenVisus.IdxDataset_hzaddress_conversion_pointquery_set)

    def __init__(self):
        this = _NonGuiOpenVisus.new_IdxDataset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_IdxDataset
    __del__ = lambda self: None
    if _newclass:
        loadDataset = staticmethod(_NonGuiOpenVisus.IdxDataset_loadDataset)
    else:
        loadDataset = _NonGuiOpenVisus.IdxDataset_loadDataset
    if _newclass:
        tryRemoveLockAndCorruptedBinaryFiles = staticmethod(_NonGuiOpenVisus.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles)
    else:
        tryRemoveLockAndCorruptedBinaryFiles = _NonGuiOpenVisus.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles

    def removeFiles(self, maxh=-1):
        return _NonGuiOpenVisus.IdxDataset_removeFiles(self, maxh)

    def compress(self, compression):
        return _NonGuiOpenVisus.IdxDataset_compress(self, compression)

    def getLevelBox(self, *args):
        return _NonGuiOpenVisus.IdxDataset_getLevelBox(self, *args)

    def adjustFilterBox(self, query, filter, box, H):
        return _NonGuiOpenVisus.IdxDataset_adjustFilterBox(self, query, filter, box, H)

    def createEquivalentQuery(self, mode, block_query):
        return _NonGuiOpenVisus.IdxDataset_createEquivalentQuery(self, mode, block_query)
    if _newclass:
        create = staticmethod(_NonGuiOpenVisus.IdxDataset_create)
    else:
        create = _NonGuiOpenVisus.IdxDataset_create

    def setIdxFile(self, value):
        return _NonGuiOpenVisus.IdxDataset_setIdxFile(self, value)

    def cloneForMosaic(self):
        return _NonGuiOpenVisus.IdxDataset_cloneForMosaic(self)

    def openFromUrl(self, url):
        return _NonGuiOpenVisus.IdxDataset_openFromUrl(self, url)

    def createAccess(self, *args):
        return _NonGuiOpenVisus.IdxDataset_createAccess(self, *args)

    def getAddressRangeBox(self, *args):
        return _NonGuiOpenVisus.IdxDataset_getAddressRangeBox(self, *args)

    def convertBlockQueryToRowMajor(self, block_query):
        return _NonGuiOpenVisus.IdxDataset_convertBlockQueryToRowMajor(self, block_query)

    def createQueryFilter(self, field):
        return _NonGuiOpenVisus.IdxDataset_createQueryFilter(self, field)

    def beginQuery(self, query):
        return _NonGuiOpenVisus.IdxDataset_beginQuery(self, query)

    def executeQuery(self, access, query):
        return _NonGuiOpenVisus.IdxDataset_executeQuery(self, access, query)

    def nextQuery(self, query):
        return _NonGuiOpenVisus.IdxDataset_nextQuery(self, query)

    def mergeQueryWithBlock(self, query, block_query):
        return _NonGuiOpenVisus.IdxDataset_mergeQueryWithBlock(self, query, block_query)

    def createPureRemoteQueryNetRequest(self, query):
        return _NonGuiOpenVisus.IdxDataset_createPureRemoteQueryNetRequest(self, query)
IdxDataset_swigregister = _NonGuiOpenVisus.IdxDataset_swigregister
IdxDataset_swigregister(IdxDataset)

def IdxDataset_getVisusClassName():
    return _NonGuiOpenVisus.IdxDataset_getVisusClassName()
IdxDataset_getVisusClassName = _NonGuiOpenVisus.IdxDataset_getVisusClassName

def IdxDataset_loadDataset(url):
    return _NonGuiOpenVisus.IdxDataset_loadDataset(url)
IdxDataset_loadDataset = _NonGuiOpenVisus.IdxDataset_loadDataset

def IdxDataset_tryRemoveLockAndCorruptedBinaryFiles(*args):
    return _NonGuiOpenVisus.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles(*args)
IdxDataset_tryRemoveLockAndCorruptedBinaryFiles = _NonGuiOpenVisus.IdxDataset_tryRemoveLockAndCorruptedBinaryFiles

def IdxDataset_create(*args):
    return _NonGuiOpenVisus.IdxDataset_create(*args)
IdxDataset_create = _NonGuiOpenVisus.IdxDataset_create

class IdxMultipleDataset(IdxDataset):
    __swig_setmethods__ = {}
    for _s in [IdxDataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxMultipleDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [IdxDataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxMultipleDataset, name)
    __repr__ = _swig_repr
    if _newclass:
        getVisusClassName = staticmethod(_NonGuiOpenVisus.IdxMultipleDataset_getVisusClassName)
    else:
        getVisusClassName = _NonGuiOpenVisus.IdxMultipleDataset_getVisusClassName
    __swig_setmethods__["bMosaic"] = _NonGuiOpenVisus.IdxMultipleDataset_bMosaic_set
    __swig_getmethods__["bMosaic"] = _NonGuiOpenVisus.IdxMultipleDataset_bMosaic_get
    if _newclass:
        bMosaic = _swig_property(_NonGuiOpenVisus.IdxMultipleDataset_bMosaic_get, _NonGuiOpenVisus.IdxMultipleDataset_bMosaic_set)
    __swig_setmethods__["childs"] = _NonGuiOpenVisus.IdxMultipleDataset_childs_set
    __swig_getmethods__["childs"] = _NonGuiOpenVisus.IdxMultipleDataset_childs_get
    if _newclass:
        childs = _swig_property(_NonGuiOpenVisus.IdxMultipleDataset_childs_get, _NonGuiOpenVisus.IdxMultipleDataset_childs_set)

    def __init__(self):
        this = _NonGuiOpenVisus.new_IdxMultipleDataset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _NonGuiOpenVisus.delete_IdxMultipleDataset
    __del__ = lambda self: None

    def getChild(self, name):
        return _NonGuiOpenVisus.IdxMultipleDataset_getChild(self, name)

    def getFirstDataset(self):
        return _NonGuiOpenVisus.IdxMultipleDataset_getFirstDataset(self)

    def addChild(self, value):
        return _NonGuiOpenVisus.IdxMultipleDataset_addChild(self, value)

    def computeDefaultFields(self):
        return _NonGuiOpenVisus.IdxMultipleDataset_computeDefaultFields(self)

    def openFromUrl(self, URL):
        return _NonGuiOpenVisus.IdxMultipleDataset_openFromUrl(self, URL)

    def getInnerDatasets(self):
        return _NonGuiOpenVisus.IdxMultipleDataset_getInnerDatasets(self)

    def getFieldByNameThrowEx(self, name):
        return _NonGuiOpenVisus.IdxMultipleDataset_getFieldByNameThrowEx(self, name)

    def createAccess(self, *args):
        return _NonGuiOpenVisus.IdxMultipleDataset_createAccess(self, *args)

    def createQueryFilter(self, FIELD):
        return _NonGuiOpenVisus.IdxMultipleDataset_createQueryFilter(self, FIELD)

    def beginQuery(self, QUERY):
        return _NonGuiOpenVisus.IdxMultipleDataset_beginQuery(self, QUERY)

    def executeQuery(self, ACCESS, QUERY):
        return _NonGuiOpenVisus.IdxMultipleDataset_executeQuery(self, ACCESS, QUERY)

    def nextQuery(self, QUERY):
        return _NonGuiOpenVisus.IdxMultipleDataset_nextQuery(self, QUERY)

    def sameLogicSpace(self, child):
        return _NonGuiOpenVisus.IdxMultipleDataset_sameLogicSpace(self, child)

    def createIdxFile(self, idx_filename, idx_field):
        return _NonGuiOpenVisus.IdxMultipleDataset_createIdxFile(self, idx_filename, idx_field)
IdxMultipleDataset_swigregister = _NonGuiOpenVisus.IdxMultipleDataset_swigregister
IdxMultipleDataset_swigregister(IdxMultipleDataset)

def IdxMultipleDataset_getVisusClassName():
    return _NonGuiOpenVisus.IdxMultipleDataset_getVisusClassName()
IdxMultipleDataset_getVisusClassName = _NonGuiOpenVisus.IdxMultipleDataset_getVisusClassName



# equivalent to VISUS_REGISTER_OBJECT_CLASS 
def VISUS_REGISTER_PYTHON_OBJECT_CLASS(object_name):

  class MyObjectCreator(ObjectCreator):

# __init__
    def __init__(self,object_name):
      ObjectCreator.__init__(self)
      self.object_name=object_name

# createInstance
    def createInstance(self):
      return eval(self.object_name+"()")

  ObjectFactory.getSingleton().registerObjectClass(object_name,object_name,MyObjectCreator(object_name))


# This file is compatible with both classic and new-style classes.


