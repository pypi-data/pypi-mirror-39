Metadata-Version: 2.1
Name: mona-client
Version: 0.0.8
Summary: Client code for python Mona instrumentation
Home-page: https://gitlab.com/itai4/mona-python-client
Author: MonaLabs
Author-email: itai@monalabs.io
License: UNKNOWN
Download-URL: http://pypi.python.org/pypi/mona-client/
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: mona-fluent-logger
Requires-Dist: watchdog

# Python Client

## Installation

\$ pip install mona-client

## Environment variables

Mona uses several environment variables you need to set in order for things to
work as intended:

MONA_HOST - the Mona server's IP address you get from Mona.
MONA_PORT - The port for the above address.
MONA_USER_ID - A unique user id we provide for you.

## Quick Start and Example

- install as mentioned above
- Set environment variables as mentioned above
- Instrument code with client as seen below

```
from mona_client import client
...

with client.new_mona_context():
    ...
    client.export({"foo": "bar"})
    ...
```

## Concurrency

Mona saves the ARC's id as a special variable, which is local to the thread and
to greenlets. This means that if you start a new thread/greenlet, by default the
new thread will have an empty context.

This is usually the preffered behavior, as a new thread usually means a new
received request (on servers) or a completely new run of an algorithm.

If by any chance you'd like to continue with the same context on a new thread,
just use the child class MonaThread under mona_thread.py. This class takes
care of transferring the full context id to the newly started thread.

## Testing the client code

The client's tests are written using the pytest framework, so in order to run
the tests (assuming you have pytest installed on your environment), you just
need to type "pytest" to your shell.

## Uploading new version to PyPI

The main reference to follow to do that is on:
https://packaging.python.org/tutorials/packaging-projects/

- Register on PyPI with your mona email: https://pypi.org/
- Ask itai@monalabs.io to add you as collaborator
- If not installed, install twine: \$ python3 -m pip install --user --upgrade twine
- Change version number under setup.py
- If a new dependency is required, add it under setup.py under "install_requires"
- If not installed, install build tools: \$ python3 -m pip install --user --upgrade setuptools wheel
- Build new version: \$ python3 setup.py sdist bdist_wheel
- Upload new version (can change '\*' to actual version): \$ python -m twine upload dist/\_

## Configuration and Big Red Button

If you'd like to set up configuration for mona, you can fill a simple json
configuration file. See mona_client_config.json for the default configuration
file used. There is currently only one configuration option, which is the "Big
Red Button" - the "disable_all" configuration, which, when set to true,
completely disables all mona activity (no more exporting and context inits).

Mona listens to changes on the configuartion file under the environment variable
"MONA_CLIENT_CONFIG_FILE". So if you want to disable mona while running, just
change "disable_all" from "false" to "true" in your config file and mona will
update automatically.


