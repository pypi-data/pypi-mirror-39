Metadata-Version: 2.1
Name: mona-client
Version: 0.0.3
Summary: Client code for python Mona instrumentation
Home-page: https://gitlab.com/itai4/mona-python-client
Author: MonaLabs
Author-email: itai@monalabs.io
License: UNKNOWN
Description: # Python Client
        
        ## Using Mona's wrapper for the "requests" package
        
        instead of importing "requests", import the requests object from mona_requests:
        `from mona_requests import requests`
        
        After that, use requests as usual. The only difference in behavior is that any
        request or session will always have a header "mona_id" added to it, with the
        current context's complete id.
        
        ## Concurrency
        
        Mona saves the ARC's id on a special variable, which is local to the thread and
        to greenlets. This means that if you start a new thread/greenlet, by default the
        new thread will have an empty context.
        
        This is usually the preffered behavior, as a new thread usually means a new
        received request (on servers) or a completely new run of an algorithm.
        
        If by any chance you'd like to continue with the same context on a new thread,
        just use the child class MonaThread under mona_thread.py. This class takes
        care of transferring the full context id to the newly started thread.
        
        ## Using Mona's GCP pubusb support
        
        We provide support for transferring Mona context data via pubsub using our
        class MonaPublisherClient (child of PublisherClient). This class extends the
        functionaliy of the publish() method, by adding the current context id via the
        message attributes.
        
        On the other side, if you subscribe to a pubsub topic and wish to have your mona
        context change according to the publisher's context, just send any message to
        our init_mona_from_pubsub_message(msg) method. That's it.
        
        ## Testing the client code
        
        The client's tests are written using the pytest framework, so in order to run
        the tests (assuming you have pytest installed on your environment), you just
        need to type "pytest" to your shell.
        
        The only caveat is in pubsub_test.py, which you need to use a pubsub emulator to
        activate. Please refer to that file for explanations.
        
        ## Uploading new version to PyPI
        
        The main reference to follow to do that is on:
        https://packaging.python.org/tutorials/packaging-projects/
        
        - Register on PyPI with your mona email: https://pypi.org/
        - Ask itai@monalabs.io to add you as collaborator
        - If not installed, install twine: \$ python3 -m pip install --user --upgrade twine
        - Change version number under setup.py
        - If a new dependency is required, add it under setup.py under "install_requires"
        - If not installed, install build tools: \$ python3 -m pip install --user --upgrade setuptools wheel
        - Build new version: \$ python3 setup.py sdist bdist_wheel
        - Upload new version (can change '\*' to actual version): \$ python -m twine upload dist/\_
        
        ## Configuration and Big Red Button
        
        If you'd like to set up configuration for mona, you can fill a simple json
        configuration file. See mona_client_config.json for the default configuration
        file used. There is currently only one configuration option, which is the "Big
        Red Button" - the "disable_all" configuration, which, when set to true,
        completely disables all mona activity (no more exporting and context inits).
        
        Mona listens to changes on the configuartion file under the environment variable
        "MONA_CLIENT_CONFIG_FILE". So if you want to disable mona while running, just
        change "disable_all" from "false" to "true" in your config file and mona will
        update automatically.
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
