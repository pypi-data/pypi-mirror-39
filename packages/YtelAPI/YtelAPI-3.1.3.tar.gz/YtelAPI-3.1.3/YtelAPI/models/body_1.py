# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Body1(object):

    """Implementation of the 'body_1' model.

    TODO: type model description here.

    Attributes:
        mfrom (string): The 10-digit SMS-enabled Ytel number (E.164 format) in
            which the message is sent.
        to (string): The 10-digit phone number (E.164 format) that will
            receive the message.
        body (string): The body message that is to be sent in the text.
        method (string): Specifies the HTTP method used to request the
            required URL once SMS sent.
        message_status_callback (string): URL that can be requested to receive
            notification when SMS has Sent. A set of default parameters will
            be sent here once the SMS is finished.
        smartsms (bool): Check's 'to' number can receive sms or not using
            Carrier API, if wireless = true then text sms is sent, else
            wireless = false then call is recieved to end user with audible
            message.
        delivery_status (bool): Delivery reports are a method to tell your
            system if the message has arrived on the destination phone.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mfrom":'From',
        "to":'To',
        "body":'Body',
        "method":'Method',
        "message_status_callback":'MessageStatusCallback',
        "smartsms":'Smartsms',
        "delivery_status":'DeliveryStatus'
    }

    def __init__(self,
                 mfrom=None,
                 to=None,
                 body=None,
                 method=None,
                 message_status_callback=None,
                 smartsms=None,
                 delivery_status=None):
        """Constructor for the Body1 class"""

        # Initialize members of the class
        self.mfrom = mfrom
        self.to = to
        self.body = body
        self.method = method
        self.message_status_callback = message_status_callback
        self.smartsms = smartsms
        self.delivery_status = delivery_status


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mfrom = dictionary.get('From')
        to = dictionary.get('To')
        body = dictionary.get('Body')
        method = dictionary.get('Method')
        message_status_callback = dictionary.get('MessageStatusCallback')
        smartsms = dictionary.get('Smartsms')
        delivery_status = dictionary.get('DeliveryStatus')

        # Return an object of this model
        return cls(mfrom,
                   to,
                   body,
                   method,
                   message_status_callback,
                   smartsms,
                   delivery_status)


