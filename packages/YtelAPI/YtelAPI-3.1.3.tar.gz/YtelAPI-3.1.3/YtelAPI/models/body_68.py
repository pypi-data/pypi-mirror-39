# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Body68(object):

    """Implementation of the 'body_68' model.

    TODO: type model description here.

    Attributes:
        first_name (string): Sub account user first name
        last_name (string): sub account user last name
        email (string): Sub account email address
        friendly_name (string): Descriptive name of the sub account
        password (string): The password of the sub account.  Please make sure
            to make as password that is at least 8 characters long, contain a
            symbol, uppercase and a number.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "first_name":'FirstName',
        "last_name":'LastName',
        "email":'Email',
        "friendly_name":'FriendlyName',
        "password":'Password'
    }

    def __init__(self,
                 first_name=None,
                 last_name=None,
                 email=None,
                 friendly_name=None,
                 password=None):
        """Constructor for the Body68 class"""

        # Initialize members of the class
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.friendly_name = friendly_name
        self.password = password


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        first_name = dictionary.get('FirstName')
        last_name = dictionary.get('LastName')
        email = dictionary.get('Email')
        friendly_name = dictionary.get('FriendlyName')
        password = dictionary.get('Password')

        # Return an object of this model
        return cls(first_name,
                   last_name,
                   email,
                   friendly_name,
                   password)


