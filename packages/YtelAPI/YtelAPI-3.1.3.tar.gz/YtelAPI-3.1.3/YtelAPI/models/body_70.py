# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Body70(object):

    """Implementation of the 'body_70' model.

    TODO: type model description here.

    Attributes:
        page (int): Which page of the overall response will be returned. Page
            indexing starts at 1.
        page_size (int): The page count to retrieve from the total results in
            the collection. Page indexing starts at 1.
        number_type (NumberTypeEnum): The capability supported by the
            number.Number type either SMS,Voice or all
        friendly_name (string): A human-readable label added to the number
            object.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "page":'Page',
        "page_size":'PageSize',
        "number_type":'NumberType',
        "friendly_name":'FriendlyName'
    }

    def __init__(self,
                 page=None,
                 page_size=None,
                 number_type=None,
                 friendly_name=None):
        """Constructor for the Body70 class"""

        # Initialize members of the class
        self.page = page
        self.page_size = page_size
        self.number_type = number_type
        self.friendly_name = friendly_name


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        page = dictionary.get('Page')
        page_size = dictionary.get('PageSize')
        number_type = dictionary.get('NumberType')
        friendly_name = dictionary.get('FriendlyName')

        # Return an object of this model
        return cls(page,
                   page_size,
                   number_type,
                   friendly_name)


