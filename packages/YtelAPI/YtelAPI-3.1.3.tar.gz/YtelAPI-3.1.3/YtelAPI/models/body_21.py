# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Body21(object):

    """Implementation of the 'body_21' model.

    TODO: type model description here.

    Attributes:
        to (string): A valid address that will receive the email. Multiple
            addresses can be separated by using commas.
        mtype (TypeEnum): Specifies the type of email to be sent
        subject (string): The subject of the mail. Must be a valid string.
        message (string): The email message that is to be sent in the text.
        mfrom (string): A valid address that will send the email.
        cc (string): Carbon copy. A valid address that will receive the email.
            Multiple addresses can be separated by using commas.
        bcc (string): Blind carbon copy. A valid address that will receive the
            email. Multiple addresses can be separated by using commas.
        attachment (string): A file that is attached to the email. Must be
            less than 7 MB in size.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "to":'To',
        "mtype":'Type',
        "subject":'Subject',
        "message":'Message',
        "mfrom":'From',
        "cc":'Cc',
        "bcc":'Bcc',
        "attachment":'Attachment'
    }

    def __init__(self,
                 to=None,
                 mtype=None,
                 subject=None,
                 message=None,
                 mfrom=None,
                 cc=None,
                 bcc=None,
                 attachment=None):
        """Constructor for the Body21 class"""

        # Initialize members of the class
        self.to = to
        self.mtype = mtype
        self.subject = subject
        self.message = message
        self.mfrom = mfrom
        self.cc = cc
        self.bcc = bcc
        self.attachment = attachment


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        to = dictionary.get('To')
        mtype = dictionary.get('Type')
        subject = dictionary.get('Subject')
        message = dictionary.get('Message')
        mfrom = dictionary.get('From')
        cc = dictionary.get('Cc')
        bcc = dictionary.get('Bcc')
        attachment = dictionary.get('Attachment')

        # Return an object of this model
        return cls(to,
                   mtype,
                   subject,
                   message,
                   mfrom,
                   cc,
                   bcc,
                   attachment)


