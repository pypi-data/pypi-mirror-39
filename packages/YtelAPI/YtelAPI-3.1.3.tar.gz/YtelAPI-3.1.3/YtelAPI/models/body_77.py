# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class Body77(object):

    """Implementation of the 'body_77' model.

    TODO: type model description here.

    Attributes:
        mfrom (string): A valid Ytel Voice enabled number (E.164 format) that
            will be initiating the phone call.
        to (string): Please enter multiple E164 number. You can add max 10
            numbers. Add numbers separated with comma. e.g :
            +12223334444,+15556667777
        url (string): URL requested once the call connects
        group_confirm_key (string): Define the DTMF that the called party
            should send to bridge the call. Allowed Values : 0-9, #, *
        group_confirm_file (GroupConfirmFileEnum): Specify the audio file you
            want to play when the called party picks up the call
        method (string): Specifies the HTTP method used to request the
            required URL once call connects.
        status_call_back_url (string): URL that can be requested to receive
            notification when call has ended. A set of default parameters will
            be sent here once the call is finished.
        status_call_back_method (string): Specifies the HTTP methodlinkclass
            used to request StatusCallbackUrl.
        fall_back_url (string): URL requested if the initial Url parameter
            fails or encounters an error
        fall_back_method (string): Specifies the HTTP method used to request
            the required FallbackUrl once call connects.
        heart_beat_url (string): URL that can be requested every 60 seconds
            during the call to notify of elapsed time and pass other general
            information.
        heart_beat_method (string): Specifies the HTTP method used to request
            HeartbeatUrl.
        timeout (int): Time (in seconds) we should wait while the call is
            ringing before canceling the call
        play_dtmf (string): DTMF Digits to play to the call once it connects.
            0-9, #, or *
        hide_caller_id (string): Specifies if the caller id will be hidden
        record (bool): Specifies if the call should be recorded
        record_call_back_url (string): Recording parameters will be sent here
            upon completion
        record_call_back_method (string): Method used to request the
            RecordCallback URL.
        transcribe (bool): Specifies if the call recording should be
            transcribed
        transcribe_call_back_url (string): Transcription parameters will be
            sent here upon completion

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mfrom":'From',
        "to":'To',
        "url":'Url',
        "group_confirm_key":'GroupConfirmKey',
        "group_confirm_file":'GroupConfirmFile',
        "method":'Method',
        "status_call_back_url":'StatusCallBackUrl',
        "status_call_back_method":'StatusCallBackMethod',
        "fall_back_url":'FallBackUrl',
        "fall_back_method":'FallBackMethod',
        "heart_beat_url":'HeartBeatUrl',
        "heart_beat_method":'HeartBeatMethod',
        "timeout":'Timeout',
        "play_dtmf":'PlayDtmf',
        "hide_caller_id":'HideCallerId',
        "record":'Record',
        "record_call_back_url":'RecordCallBackUrl',
        "record_call_back_method":'RecordCallBackMethod',
        "transcribe":'Transcribe',
        "transcribe_call_back_url":'TranscribeCallBackUrl'
    }

    def __init__(self,
                 mfrom=None,
                 to=None,
                 url=None,
                 group_confirm_key=None,
                 group_confirm_file=None,
                 method=None,
                 status_call_back_url=None,
                 status_call_back_method=None,
                 fall_back_url=None,
                 fall_back_method=None,
                 heart_beat_url=None,
                 heart_beat_method=None,
                 timeout=None,
                 play_dtmf=None,
                 hide_caller_id=None,
                 record=None,
                 record_call_back_url=None,
                 record_call_back_method=None,
                 transcribe=None,
                 transcribe_call_back_url=None):
        """Constructor for the Body77 class"""

        # Initialize members of the class
        self.mfrom = mfrom
        self.to = to
        self.url = url
        self.group_confirm_key = group_confirm_key
        self.group_confirm_file = group_confirm_file
        self.method = method
        self.status_call_back_url = status_call_back_url
        self.status_call_back_method = status_call_back_method
        self.fall_back_url = fall_back_url
        self.fall_back_method = fall_back_method
        self.heart_beat_url = heart_beat_url
        self.heart_beat_method = heart_beat_method
        self.timeout = timeout
        self.play_dtmf = play_dtmf
        self.hide_caller_id = hide_caller_id
        self.record = record
        self.record_call_back_url = record_call_back_url
        self.record_call_back_method = record_call_back_method
        self.transcribe = transcribe
        self.transcribe_call_back_url = transcribe_call_back_url


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        mfrom = dictionary.get('From')
        to = dictionary.get('To')
        url = dictionary.get('Url')
        group_confirm_key = dictionary.get('GroupConfirmKey')
        group_confirm_file = dictionary.get('GroupConfirmFile')
        method = dictionary.get('Method')
        status_call_back_url = dictionary.get('StatusCallBackUrl')
        status_call_back_method = dictionary.get('StatusCallBackMethod')
        fall_back_url = dictionary.get('FallBackUrl')
        fall_back_method = dictionary.get('FallBackMethod')
        heart_beat_url = dictionary.get('HeartBeatUrl')
        heart_beat_method = dictionary.get('HeartBeatMethod')
        timeout = dictionary.get('Timeout')
        play_dtmf = dictionary.get('PlayDtmf')
        hide_caller_id = dictionary.get('HideCallerId')
        record = dictionary.get('Record')
        record_call_back_url = dictionary.get('RecordCallBackUrl')
        record_call_back_method = dictionary.get('RecordCallBackMethod')
        transcribe = dictionary.get('Transcribe')
        transcribe_call_back_url = dictionary.get('TranscribeCallBackUrl')

        # Return an object of this model
        return cls(mfrom,
                   to,
                   url,
                   group_confirm_key,
                   group_confirm_file,
                   method,
                   status_call_back_url,
                   status_call_back_method,
                   fall_back_url,
                   fall_back_method,
                   heart_beat_url,
                   heart_beat_method,
                   timeout,
                   play_dtmf,
                   hide_caller_id,
                   record,
                   record_call_back_url,
                   record_call_back_method,
                   transcribe,
                   transcribe_call_back_url)


