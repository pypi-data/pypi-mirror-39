# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class VoiceController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_send_rvm(self,
                        mfrom,
                        rvm_caller_id,
                        to,
                        voice_mail_url,
                        method=None,
                        status_call_back_url=None,
                        stats_call_back_method=None):
        """Does a POST request to /calls/makervm.json.

        Initiate an outbound Ringless Voicemail through Ytel.

        Args:
            mfrom (string): A valid Ytel Voice enabled number (E.164 format)
                that will be initiating the phone call.
            rvm_caller_id (string): A required secondary Caller ID for RVM to
                work.
            to (string): A valid number (E.164 format) that will receive the
                phone call.
            voice_mail_url (string): The URL requested once the RVM connects.
                A set of default parameters will be sent here.
            method (string, optional): Specifies the HTTP method used to
                request the required URL once call connects.
            status_call_back_url (string, optional): URL that can be requested
                to receive notification when call has ended. A set of default
                parameters will be sent here once the call is finished.
            stats_call_back_method (string, optional): Specifies the HTTP
                method used to request the required StatusCallBackUrl once
                call connects.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/makervm.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'From': mfrom,
            'RVMCallerId': rvm_caller_id,
            'To': to,
            'VoiceMailURL': voice_mail_url,
            'Method': method,
            'StatusCallBackUrl': status_call_back_url,
            'StatsCallBackMethod': stats_call_back_method
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_call(self,
                         callsid):
        """Does a POST request to /calls/viewcalls.json.

        Retrieve a single voice call’s information by its CallSid.

        Args:
            callsid (string): The unique identifier for the voice call.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/viewcalls.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'callsid': callsid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_call_details(self,
                                 call_sid):
        """Does a POST request to /calls/viewcalldetail.json.

        Retrieve a single voice call’s information by its CallSid.

        Args:
            call_sid (string): The unique identifier for the voice call.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/viewcalldetail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'callSid': call_sid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_interrupt_call(self,
                              call_sid,
                              url=None,
                              method=None,
                              status=None):
        """Does a POST request to /calls/interruptcalls.json.

        Interrupt the Call by Call Sid

        Args:
            call_sid (string): The unique identifier for voice call that is in
                progress.
            url (string, optional): URL the in-progress call will be
                redirected to
            method (string, optional): The method used to request the above
                Url parameter
            status (Status1Enum, optional): Status to set the in-progress call
                to

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/interruptcalls.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'CallSid': call_sid,
            'Url': url,
            'Method': method,
            'Status': status
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_calls(self,
                          page=None,
                          page_size=None,
                          to=None,
                          mfrom=None,
                          date_created=None):
        """Does a POST request to /calls/listcalls.json.

        A list of calls associated with your Ytel account

        Args:
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            page_size (int, optional): Number of individual resources listed
                in the response per page
            to (string, optional): Filter calls that were sent to this
                10-digit number (E.164 format).
            mfrom (string, optional): Filter calls that were sent from this
                10-digit number (E.164 format).
            date_created (string, optional): Return calls that are from a
                specified date.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/listcalls.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Page': page,
            'PageSize': page_size,
            'To': to,
            'From': mfrom,
            'DateCreated': date_created
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_voice_effect(self,
                            call_sid,
                            audio_direction=None,
                            pitch_semi_tones=None,
                            pitch_octaves=None,
                            pitch=None,
                            rate=None,
                            tempo=None):
        """Does a POST request to /calls/voiceeffect.json.

        Add audio voice effects to the an in-progress voice call.

        Args:
            call_sid (string): The unique identifier for the in-progress voice
                call.
            audio_direction (AudioDirectionEnum, optional): The direction the
                audio effect should be placed on. If IN, the effects will
                occur on the incoming audio stream. If OUT, the effects will
                occur on the outgoing audio stream.
            pitch_semi_tones (float, optional): Set the pitch in semitone
                (half-step) intervals. Value between -14 and 14
            pitch_octaves (float, optional): Set the pitch in octave
                intervals.. Value between -1 and 1
            pitch (float, optional): Set the pitch (lowness/highness) of the
                audio. The higher the value, the higher the pitch. Value
                greater than 0
            rate (float, optional): Set the rate for audio. The lower the
                value, the lower the rate. value greater than 0
            tempo (float, optional): Set the tempo (speed) of the audio. A
                higher value denotes a faster tempo. Value greater than 0

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/voiceeffect.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'CallSid': call_sid,
            'AudioDirection': audio_direction,
            'PitchSemiTones': pitch_semi_tones,
            'PitchOctaves': pitch_octaves,
            'Pitch': pitch,
            'Rate': rate,
            'Tempo': tempo
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_play_audio(self,
                          call_sid,
                          audio_url,
                          say_text,
                          length=None,
                          direction=None,
                          mix=None):
        """Does a POST request to /calls/playaudios.json.

        Play Audio from a url

        Args:
            call_sid (string): The unique identifier of each call resource
            audio_url (string): URL to sound that should be played. You also
                can add more than one audio file using semicolons e.g.
                http://example.com/audio1.mp3;http://example.com/audio2.wav
            say_text (string): Valid alphanumeric string that should be played
                to the In-progress call.
            length (int, optional): Time limit in seconds for audio play back
            direction (Direction1Enum, optional): The leg of the call audio
                will be played to
            mix (bool, optional): If false, all other audio will be muted

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/playaudios.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'CallSid': call_sid,
            'AudioUrl': audio_url,
            'SayText': say_text,
            'Length': length,
            'Direction': direction,
            'Mix': mix
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_record_call(self,
                           call_sid,
                           record,
                           direction=None,
                           time_limit=None,
                           call_back_url=None,
                           fileformat=None):
        """Does a POST request to /calls/recordcalls.json.

        Start or stop recording of an in-progress voice call.

        Args:
            call_sid (string): The unique identifier of each call resource
            record (bool): Set true to initiate recording or false to
                terminate recording
            direction (DirectionEnum, optional): The leg of the call to
                record
            time_limit (int, optional): Time in seconds the recording duration
                should not exceed
            call_back_url (string, optional): URL consulted after the
                recording completes
            fileformat (FileformatEnum, optional): Format of the recording
                file. Can be .mp3 or .wav

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/recordcalls.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'CallSid': call_sid,
            'Record': record,
            'Direction': direction,
            'TimeLimit': time_limit,
            'CallBackUrl': call_back_url,
            'Fileformat': fileformat
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_play_dtmf(self,
                         call_sid,
                         play_dtmf,
                         play_dtmf_direction=None):
        """Does a POST request to /calls/senddigits.json.

        Play Dtmf and send the Digit

        Args:
            call_sid (string): The unique identifier of each call resource
            play_dtmf (string): DTMF digits to play to the call. 0-9, #, *, W,
                or w
            play_dtmf_direction (PlayDtmfDirectionEnum, optional): The leg of
                the call DTMF digits should be sent to

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/senddigits.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'CallSid': call_sid,
            'PlayDtmf': play_dtmf,
            'PlayDtmfDirection': play_dtmf_direction
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_group_call(self,
                          mfrom,
                          to,
                          url,
                          group_confirm_key,
                          group_confirm_file,
                          method=None,
                          status_call_back_url=None,
                          status_call_back_method=None,
                          fall_back_url=None,
                          fall_back_method=None,
                          heart_beat_url=None,
                          heart_beat_method=None,
                          timeout=None,
                          play_dtmf=None,
                          hide_caller_id=None,
                          record=None,
                          record_call_back_url=None,
                          record_call_back_method=None,
                          transcribe=None,
                          transcribe_call_back_url=None):
        """Does a POST request to /calls/groupcall.json.

        You can experiment with initiating a call through Ytel and view the
        request response generated when doing so and get the response in json

        Args:
            mfrom (string): A valid Ytel Voice enabled number (E.164 format)
                that will be initiating the phone call.
            to (string): Please enter multiple E164 number. You can add max 10
                numbers. Add numbers separated with comma. e.g :
                +12223334444,+15556667777
            url (string): URL requested once the call connects
            group_confirm_key (string): Define the DTMF that the called party
                should send to bridge the call. Allowed Values : 0-9, #, *
            group_confirm_file (GroupConfirmFileEnum): Specify the audio file
                you want to play when the called party picks up the call
            method (string, optional): Specifies the HTTP method used to
                request the required URL once call connects.
            status_call_back_url (string, optional): URL that can be requested
                to receive notification when call has ended. A set of default
                parameters will be sent here once the call is finished.
            status_call_back_method (string, optional): Specifies the HTTP
                methodlinkclass used to request StatusCallbackUrl.
            fall_back_url (string, optional): URL requested if the initial Url
                parameter fails or encounters an error
            fall_back_method (string, optional): Specifies the HTTP method
                used to request the required FallbackUrl once call connects.
            heart_beat_url (string, optional): URL that can be requested every
                60 seconds during the call to notify of elapsed time and pass
                other general information.
            heart_beat_method (string, optional): Specifies the HTTP method
                used to request HeartbeatUrl.
            timeout (int, optional): Time (in seconds) we should wait while
                the call is ringing before canceling the call
            play_dtmf (string, optional): DTMF Digits to play to the call once
                it connects. 0-9, #, or *
            hide_caller_id (string, optional): Specifies if the caller id will
                be hidden
            record (bool, optional): Specifies if the call should be recorded
            record_call_back_url (string, optional): Recording parameters will
                be sent here upon completion
            record_call_back_method (string, optional): Method used to request
                the RecordCallback URL.
            transcribe (bool, optional): Specifies if the call recording
                should be transcribed
            transcribe_call_back_url (string, optional): Transcription
                parameters will be sent here upon completion

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/groupcall.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'From': mfrom,
            'To': to,
            'Url': url,
            'GroupConfirmKey': group_confirm_key,
            'GroupConfirmFile': group_confirm_file,
            'Method': method,
            'StatusCallBackUrl': status_call_back_url,
            'StatusCallBackMethod': status_call_back_method,
            'FallBackUrl': fall_back_url,
            'FallBackMethod': fall_back_method,
            'HeartBeatUrl': heart_beat_url,
            'HeartBeatMethod': heart_beat_method,
            'Timeout': timeout,
            'PlayDtmf': play_dtmf,
            'HideCallerId': hide_caller_id,
            'Record': record,
            'RecordCallBackUrl': record_call_back_url,
            'RecordCallBackMethod': record_call_back_method,
            'Transcribe': transcribe,
            'TranscribeCallBackUrl': transcribe_call_back_url
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_make_call(self,
                         mfrom,
                         to,
                         url,
                         method=None,
                         status_call_back_url=None,
                         status_call_back_method=None,
                         fall_back_url=None,
                         fall_back_method=None,
                         heart_beat_url=None,
                         heart_beat_method=None,
                         timeout=None,
                         play_dtmf=None,
                         hide_caller_id=None,
                         record=None,
                         record_call_back_url=None,
                         record_call_back_method=None,
                         transcribe=None,
                         transcribe_call_back_url=None,
                         if_machine=None,
                         if_machine_url=None,
                         if_machine_method=None,
                         feedback=None,
                         survey_id=None):
        """Does a POST request to /calls/makecall.json.

        You can experiment with initiating a call through Ytel and view the
        request response generated when doing so and get the response in json

        Args:
            mfrom (string): A valid Ytel Voice enabled number (E.164 format)
                that will be initiating the phone call.
            to (string): To number
            url (string): URL requested once the call connects
            method (string, optional): Specifies the HTTP method used to
                request the required URL once call connects.
            status_call_back_url (string, optional): URL that can be requested
                to receive notification when call has ended. A set of default
                parameters will be sent here once the call is finished.
            status_call_back_method (string, optional): Specifies the HTTP
                methodlinkclass used to request StatusCallbackUrl.
            fall_back_url (string, optional): URL requested if the initial Url
                parameter fails or encounters an error
            fall_back_method (string, optional): Specifies the HTTP method
                used to request the required FallbackUrl once call connects.
            heart_beat_url (string, optional): URL that can be requested every
                60 seconds during the call to notify of elapsed tim
            heart_beat_method (string, optional): Specifies the HTTP method
                used to request HeartbeatUrl.
            timeout (int, optional): Time (in seconds) Ytel should wait while
                the call is ringing before canceling the call
            play_dtmf (string, optional): DTMF Digits to play to the call once
                it connects. 0-9, #, or *
            hide_caller_id (bool, optional): Specifies if the caller id will
                be hidden
            record (bool, optional): Specifies if the call should be recorded
            record_call_back_url (string, optional): Recording parameters will
                be sent here upon completion
            record_call_back_method (string, optional): Method used to request
                the RecordCallback URL.
            transcribe (bool, optional): Specifies if the call recording
                should be transcribed
            transcribe_call_back_url (string, optional): Transcription
                parameters will be sent here upon completion
            if_machine (IfMachineEnum, optional): How Ytel should handle the
                receiving numbers voicemail machine
            if_machine_url (string, optional): URL requested when
                IfMachine=continue
            if_machine_method (string, optional): Method used to request the
                IfMachineUrl.
            feedback (bool, optional): Specify if survey should be enable or
                not
            survey_id (string, optional): The unique identifier for the
                survey.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/calls/makecall.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'From': mfrom,
            'To': to,
            'Url': url,
            'Method': method,
            'StatusCallBackUrl': status_call_back_url,
            'StatusCallBackMethod': status_call_back_method,
            'FallBackUrl': fall_back_url,
            'FallBackMethod': fall_back_method,
            'HeartBeatUrl': heart_beat_url,
            'HeartBeatMethod': heart_beat_method,
            'Timeout': timeout,
            'PlayDtmf': play_dtmf,
            'HideCallerId': hide_caller_id,
            'Record': record,
            'RecordCallBackUrl': record_call_back_url,
            'RecordCallBackMethod': record_call_back_method,
            'Transcribe': transcribe,
            'TranscribeCallBackUrl': transcribe_call_back_url,
            'IfMachine': if_machine,
            'IfMachineUrl': if_machine_url,
            'IfMachineMethod': if_machine_method,
            'Feedback': feedback,
            'SurveyId': survey_id
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
