# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class PhoneNumberController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_bulk_buy_numbers(self,
                                number_type,
                                area_code,
                                quantity,
                                leftover=None):
        """Does a POST request to /incomingphone/bulkbuy.json.

        Purchase a selected number of DID's from specific area codes to be
        used with your Ytel account.

        Args:
            number_type (NumberType2Enum): The capability the number
                supports.
            area_code (string): Specifies the area code for the returned list
                of available numbers. Only available for North American
                numbers.
            quantity (string): A positive integer that tells how many number
                you want to buy at a time.
            leftover (string, optional): If desired quantity is unavailable
                purchase what is available .

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/bulkbuy.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'NumberType': number_type,
            'AreaCode': area_code,
            'Quantity': quantity,
            'Leftover': leftover
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_bulk_update_numbers(self,
                                   phone_number,
                                   voice_url,
                                   friendly_name=None,
                                   voice_method=None,
                                   voice_fallback_url=None,
                                   voice_fallback_method=None,
                                   hangup_callback=None,
                                   hangup_callback_method=None,
                                   heartbeat_url=None,
                                   heartbeat_method=None,
                                   sms_url=None,
                                   sms_method=None,
                                   sms_fallback_url=None,
                                   sms_fallback_method=None):
        """Does a POST request to /incomingphone/massupdatenumber.json.

        Update properties for a Ytel numbers that has been purchased for your
        account. Refer to the parameters list for the list of properties that
        can be updated.

        Args:
            phone_number (string): A valid comma(,) separated Ytel numbers.
                (E.164 format).
            voice_url (string): The URL returning InboundXML incoming calls
                should execute when connected.
            friendly_name (string, optional): A human-readable value for
                labeling the number.
            voice_method (string, optional): Specifies the HTTP method used to
                request the VoiceUrl once incoming call connects.
            voice_fallback_url (string, optional): URL used if any errors
                occur during execution of InboundXML on a call or at initial
                request of the voice url
            voice_fallback_method (string, optional): Specifies the HTTP
                method used to request the VoiceFallbackUrl once incoming call
                connects.
            hangup_callback (string, optional): URL that can be requested to
                receive notification when and how incoming call has ended.
            hangup_callback_method (string, optional): The HTTP method Ytel
                will use when requesting the HangupCallback URL.
            heartbeat_url (string, optional): URL that can be used to monitor
                the phone number.
            heartbeat_method (string, optional): The HTTP method Ytel will use
                when requesting the HeartbeatUrl.
            sms_url (string, optional): URL requested when an SMS is
                received.
            sms_method (string, optional): The HTTP method Ytel will use when
                requesting the SmsUrl.
            sms_fallback_url (string, optional): URL used if any errors occur
                during execution of InboundXML from an SMS or at initial
                request of the SmsUrl.
            sms_fallback_method (string, optional): The HTTP method Ytel will
                use when URL requested if the SmsUrl is not available.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/massupdatenumber.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'PhoneNumber': phone_number,
            'VoiceUrl': voice_url,
            'FriendlyName': friendly_name,
            'VoiceMethod': voice_method,
            'VoiceFallbackUrl': voice_fallback_url,
            'VoiceFallbackMethod': voice_fallback_method,
            'HangupCallback': hangup_callback,
            'HangupCallbackMethod': hangup_callback_method,
            'HeartbeatUrl': heartbeat_url,
            'HeartbeatMethod': heartbeat_method,
            'SmsUrl': sms_url,
            'SmsMethod': sms_method,
            'SmsFallbackUrl': sms_fallback_url,
            'SmsFallbackMethod': sms_fallback_method
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_move_number(self,
                           phonenumber,
                           fromaccountsid,
                           toaccountsid):
        """Does a POST request to /incomingphone/transferphonenumbers.json.

        Transfer phone number that has been purchased for from one account to
        another account.

        Args:
            phonenumber (string): A valid 10-digit Ytel number (E.164
                format).
            fromaccountsid (string): A specific Accountsid from where Number
                is getting transfer.
            toaccountsid (string): A specific Accountsid to which Number is
                getting transfer.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/transferphonenumbers.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'phonenumber': phonenumber,
            'fromaccountsid': fromaccountsid,
            'toaccountsid': toaccountsid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_numbers(self,
                            page=None,
                            page_size=None,
                            number_type=None,
                            friendly_name=None):
        """Does a POST request to /incomingphone/listnumber.json.

        Retrieve a list of purchased phones numbers associated with your Ytel
        account.

        Args:
            page (int, optional): Which page of the overall response will be
                returned. Page indexing starts at 1.
            page_size (int, optional): The page count to retrieve from the
                total results in the collection. Page indexing starts at 1.
            number_type (NumberTypeEnum, optional): The capability supported
                by the number.Number type either SMS,Voice or all
            friendly_name (string, optional): A human-readable label added to
                the number object.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/listnumber.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Page': page,
            'PageSize': page_size,
            'NumberType': number_type,
            'FriendlyName': friendly_name
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def update_number(self,
                      phone_number,
                      voice_url,
                      friendly_name=None,
                      voice_method=None,
                      voice_fallback_url=None,
                      voice_fallback_method=None,
                      hangup_callback=None,
                      hangup_callback_method=None,
                      heartbeat_url=None,
                      heartbeat_method=None,
                      sms_url=None,
                      sms_method=None,
                      sms_fallback_url=None,
                      sms_fallback_method=None):
        """Does a POST request to /incomingphone/updatenumber.json.

        Update properties for a Ytel number that has been purchased for your
        account. Refer to the parameters list for the list of properties that
        can be updated.

        Args:
            phone_number (string): A valid Ytel number (E.164 format).
            voice_url (string): URL requested once the call connects
            friendly_name (string, optional): Phone number friendly name
                description
            voice_method (string, optional): Post or Get
            voice_fallback_url (string, optional): URL requested if the voice
                URL is not available
            voice_fallback_method (string, optional): Post or Get
            hangup_callback (string, optional): callback url after a hangup
                occurs
            hangup_callback_method (string, optional): Post or Get
            heartbeat_url (string, optional): URL requested once the call
                connects
            heartbeat_method (string, optional): URL that can be requested
                every 60 seconds during the call to notify of elapsed time
            sms_url (string, optional): URL requested when an SMS is received
            sms_method (string, optional): Post or Get
            sms_fallback_url (string, optional): URL used if any errors occur
                during execution of InboundXML from an SMS or at initial
                request of the SmsUrl.
            sms_fallback_method (string, optional): The HTTP method Ytel will
                use when URL requested if the SmsUrl is not available.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/updatenumber.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'PhoneNumber': phone_number,
            'VoiceUrl': voice_url,
            'FriendlyName': friendly_name,
            'VoiceMethod': voice_method,
            'VoiceFallbackUrl': voice_fallback_url,
            'VoiceFallbackMethod': voice_fallback_method,
            'HangupCallback': hangup_callback,
            'HangupCallbackMethod': hangup_callback_method,
            'HeartbeatUrl': heartbeat_url,
            'HeartbeatMethod': heartbeat_method,
            'SmsUrl': sms_url,
            'SmsMethod': sms_method,
            'SmsFallbackUrl': sms_fallback_url,
            'SmsFallbackMethod': sms_fallback_method
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_details(self,
                            phone_number):
        """Does a POST request to /incomingphone/viewnumber.json.

        Retrieve the details for a phone number by its number.

        Args:
            phone_number (string): A valid 10-digit Ytel number (E.164
                format).

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/viewnumber.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'PhoneNumber': phone_number
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_release_number(self,
                              phone_number):
        """Does a POST request to /incomingphone/releasenumber.json.

        Remove a purchased Ytel number from your account.

        Args:
            phone_number (string): A valid Ytel 10-digit phone number (E.164
                format).

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/releasenumber.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'PhoneNumber': phone_number
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_purchase_number(self,
                               phone_number):
        """Does a POST request to /incomingphone/buynumber.json.

        Purchase a phone number to be used with your Ytel account

        Args:
            phone_number (string): A valid Ytel 10-digit phone number (E.164
                format).

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/buynumber.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'PhoneNumber': phone_number
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_get_did_score(self,
                             phonenumber):
        """Does a POST request to /incomingphone/getdidscore.json.

        Get DID Score Number

        Args:
            phonenumber (string): Specifies the multiple phone numbers for
                check updated spamscore .

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/getdidscore.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Phonenumber': phonenumber
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_available_numbers(self,
                                 numbertype,
                                 areacode,
                                 pagesize=None):
        """Does a POST request to /incomingphone/availablenumber.json.

        Retrieve a list of available phone numbers that can be purchased and
        used for your Ytel account.

        Args:
            numbertype (Numbertype1Enum): Number type either SMS,Voice or all
            areacode (string): Specifies the area code for the returned list
                of available numbers. Only available for North American
                numbers.
            pagesize (int, optional): The count of objects to return.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/availablenumber.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'numbertype': numbertype,
            'areacode': areacode,
            'pagesize': pagesize
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_bulk_release(self,
                            phone_number):
        """Does a POST request to /incomingphone/massreleasenumber.json.

        Remove a purchased Ytel number from your account.

        Args:
            phone_number (string): A valid Ytel comma separated numbers (E.164
                format).

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/incomingphone/massreleasenumber.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'PhoneNumber': phone_number
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
