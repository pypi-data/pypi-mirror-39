# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class UsageController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_list_usage(self,
                          product_code=None,
                          start_date=None,
                          end_date=None,
                          include_sub_accounts=None):
        """Does a POST request to /usage/listusage.json.

        Retrieve usage metrics regarding your Ytel account. The results
        includes inbound/outbound voice calls and inbound/outbound SMS
        messages as well as carrier lookup requests.

        Args:
            product_code (ProductCodeEnum, optional): Filter usage results by
                product type.
            start_date (string, optional): Filter usage objects by start
                date.
            end_date (string, optional): Filter usage objects by end date.
            include_sub_accounts (string, optional): Will include all
                subaccount usage data

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/usage/listusage.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'ProductCode': product_code,
            'startDate': start_date,
            'endDate': end_date,
            'IncludeSubAccounts': include_sub_accounts
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
