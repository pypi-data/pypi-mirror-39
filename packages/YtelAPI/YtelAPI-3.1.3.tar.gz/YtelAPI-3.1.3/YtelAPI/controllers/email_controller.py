# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class EmailController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_blocked_emails(self,
                              offset=None,
                              limit=None):
        """Does a POST request to /email/listblockemail.json.

        Retrieve a list of emails that have been blocked.

        Args:
            offset (string, optional): The starting point of the list of
                blocked emails that should be returned.
            limit (string, optional): The count of results that should be
                returned.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/listblockemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Offset': offset,
            'Limit': limit
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_remove_invalid_email(self,
                                    email):
        """Does a POST request to /email/deleteinvalidemail.json.

        Remove an email from the invalid email list.

        Args:
            email (string): A valid email address that is to be remove from
                the invalid email list.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/deleteinvalidemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Email': email
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_invalid_emails(self,
                              offset=None,
                              limit=None):
        """Does a POST request to /email/listinvalidemail.json.

        Retrieve a list of invalid email addresses.

        Args:
            offset (string, optional): The starting point of the list of
                invalid emails that should be returned.
            limit (string, optional): The count of results that should be
                returned.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/listinvalidemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Offset': offset,
            'Limit': limit
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_remove_bounced_email(self,
                                    email):
        """Does a POST request to /email/deletebouncesemail.json.

        Remove an email address from the bounced list.

        Args:
            email (string): The email address to be remove from the bounced
                email list.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/deletebouncesemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Email': email
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_bounced_emails(self,
                              offset=None,
                              limit=None):
        """Does a POST request to /email/listbounceemail.json.

        Retrieve a list of emails that have bounced.

        Args:
            offset (string, optional): The starting point of the list of
                bounced emails that should be returned.
            limit (string, optional): The count of results that should be
                returned.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/listbounceemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Offset': offset,
            'Limit': limit
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_spam_emails(self,
                           offset=None,
                           limit=None):
        """Does a POST request to /email/listspamemail.json.

        Retrieve a list of emails that are on the spam list.

        Args:
            offset (string, optional): The starting point of the list of spam
                emails that should be returned.
            limit (string, optional): The count of results that should be
                returned.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/listspamemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Offset': offset,
            'Limit': limit
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_send_email(self,
                          to,
                          mtype,
                          subject,
                          message,
                          mfrom=None,
                          cc=None,
                          bcc=None,
                          attachment=None):
        """Does a POST request to /email/sendemails.json.

        Create and submit an email message to one or more email addresses.

        Args:
            to (string): A valid address that will receive the email. Multiple
                addresses can be separated by using commas.
            mtype (TypeEnum): Specifies the type of email to be sent
            subject (string): The subject of the mail. Must be a valid
                string.
            message (string): The email message that is to be sent in the
                text.
            mfrom (string, optional): A valid address that will send the
                email.
            cc (string, optional): Carbon copy. A valid address that will
                receive the email. Multiple addresses can be separated by
                using commas.
            bcc (string, optional): Blind carbon copy. A valid address that
                will receive the email. Multiple addresses can be separated by
                using commas.
            attachment (string, optional): A file that is attached to the
                email. Must be less than 7 MB in size.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/sendemails.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'To': to,
            'Type': mtype,
            'Subject': subject,
            'Message': message,
            'From': mfrom,
            'Cc': cc,
            'Bcc': bcc,
            'Attachment': attachment
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_remove_blocked_address(self,
                                      email):
        """Does a POST request to /email/deleteblocksemail.json.

        Remove an email from blocked emails list.

        Args:
            email (string): The email address to be remove from the blocked
                list.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/deleteblocksemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Email': email
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def add_email_unsubscribe(self,
                              email):
        """Does a POST request to /email/addunsubscribesemail.json.

        Add an email to the unsubscribe list

        Args:
            email (string): A valid email address that is to be added to the
                unsubscribe list

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/addunsubscribesemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'email': email
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_remove_unsubscribed_email(self,
                                         email):
        """Does a POST request to /email/deleteunsubscribedemail.json.

        Remove an email address from the list of unsubscribed emails.

        Args:
            email (string): A valid email address that is to be remove from
                the unsubscribe list.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/deleteunsubscribedemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'email': email
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_unsubscribed_emails(self,
                                        offset=None,
                                        limit=None):
        """Does a POST request to /email/listunsubscribedemail.json.

        Retrieve a list of email addresses from the unsubscribe list.

        Args:
            offset (string, optional): The starting point of the list of
                unsubscribed emails that should be returned.
            limit (string, optional): The count of results that should be
                returned.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/listunsubscribedemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Offset': offset,
            'Limit': limit
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_remove_spam_address(self,
                                   email):
        """Does a POST request to /email/deletespamemail.json.

        Remove an email from the spam email list.

        Args:
            email (string): A valid email address that is to be remove from
                the spam list.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/email/deletespamemail.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Email': email
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
