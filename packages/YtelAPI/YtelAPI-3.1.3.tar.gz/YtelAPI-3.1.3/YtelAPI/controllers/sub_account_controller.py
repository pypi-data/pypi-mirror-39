# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class SubAccountController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_subaccount(self,
                          first_name,
                          last_name,
                          email,
                          friendly_name,
                          password):
        """Does a POST request to /user/createsubaccount.json.

        Create a sub user account under the parent account

        Args:
            first_name (string): Sub account user first name
            last_name (string): sub account user last name
            email (string): Sub account email address
            friendly_name (string): Descriptive name of the sub account
            password (string): The password of the sub account.  Please make
                sure to make as password that is at least 8 characters long,
                contain a symbol, uppercase and a number.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/user/createsubaccount.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'FirstName': first_name,
            'LastName': last_name,
            'Email': email,
            'FriendlyName': friendly_name,
            'Password': password
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_delete_subaccount(self,
                                 sub_account_sid,
                                 merge_number):
        """Does a POST request to /user/deletesubaccount.json.

        Delete sub account or merge numbers into parent

        Args:
            sub_account_sid (string): The SubaccountSid to be deleted
            merge_number (MergeNumberEnum): 0 to delete or 1 to merge numbers
                to parent account.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/user/deletesubaccount.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'SubAccountSID': sub_account_sid,
            'MergeNumber': merge_number
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_toggle_subaccount_status(self,
                                        sub_account_sid,
                                        activate):
        """Does a POST request to /user/subaccountactivation.json.

        Suspend or unsuspend

        Args:
            sub_account_sid (string): The SubaccountSid to be activated or
                suspended
            activate (ActivateEnum): 0 to suspend or 1 to activate

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/user/subaccountactivation.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'SubAccountSID': sub_account_sid,
            'Activate': activate
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
