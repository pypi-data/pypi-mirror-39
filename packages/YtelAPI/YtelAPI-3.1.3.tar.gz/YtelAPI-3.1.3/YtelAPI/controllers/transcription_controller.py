# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class TranscriptionController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_transcribe_audio_url(self,
                                    audiourl):
        """Does a POST request to /transcriptions/audiourltranscription.json.

        Transcribe an audio recording from a file.

        Args:
            audiourl (string): URL pointing to the location of the audio file
                that is to be transcribed.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transcriptions/audiourltranscription.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'audiourl': audiourl
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_transcriptions(self,
                                   page=None,
                                   pagesize=None,
                                   status=None,
                                   date_transcribed=None):
        """Does a POST request to /transcriptions/listtranscription.json.

        Retrieve a list of transcription objects for your Ytel account.

        Args:
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (int, optional): The count of objects to return per
                page.
            status (StatusEnum, optional): The state of the transcription.
            date_transcribed (string, optional): The date the transcription
                took place.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transcriptions/listtranscription.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': page,
            'pagesize': pagesize,
            'status': status,
            'dateTranscribed': date_transcribed
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_transcription(self,
                                  transcriptionsid):
        """Does a POST request to /transcriptions/viewtranscription.json.

        Retrieve information about a transaction by its TranscriptionSid.

        Args:
            transcriptionsid (string): The unique identifier for a
                transcription object.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transcriptions/viewtranscription.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'transcriptionsid': transcriptionsid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_transcribe_recording(self,
                                    recording_sid):
        """Does a POST request to /transcriptions/recordingtranscription.json.

        Transcribe a recording by its RecordingSid.

        Args:
            recording_sid (string): The unique identifier for a recording
                object.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transcriptions/recordingtranscription.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'recordingSid': recording_sid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
