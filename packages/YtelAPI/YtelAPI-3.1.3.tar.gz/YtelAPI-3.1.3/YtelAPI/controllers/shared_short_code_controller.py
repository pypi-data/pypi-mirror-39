# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class SharedShortCodeController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_list_shortcodes(self,
                               shortcode=None,
                               page=None,
                               pagesize=None):
        """Does a POST request to /shortcode/listshortcode.json.

        Retrieve a list of shortcode assignment associated with your Ytel
        account.

        Args:
            shortcode (string, optional): Only list keywords of shortcode
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (int, optional): Number of individual resources listed in
                the response per page

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/listshortcode.json'
        _query_parameters = {
            'Shortcode': shortcode
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': page,
            'pagesize': pagesize
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def update_shortcode(self,
                         shortcode,
                         friendly_name=None,
                         callback_url=None,
                         callback_method=None,
                         fallback_url=None,
                         fallback_url_method=None):
        """Does a POST request to /shortcode/updateshortcode.json.

        Update Assignment

        Args:
            shortcode (string): List of valid shortcode to your Ytel account
            friendly_name (string, optional): User generated name of the
                shortcode
            callback_url (string, optional): URL that can be requested to
                receive notification when call has ended. A set of default
                parameters will be sent here once the call is finished.
            callback_method (string, optional): Specifies the HTTP method used
                to request the required StatusCallBackUrl once call connects.
            fallback_url (string, optional): URL used if any errors occur
                during execution of InboundXML or at initial request of the
                required Url provided with the POST.
            fallback_url_method (string, optional): Specifies the HTTP method
                used to request the required FallbackUrl once call connects.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/updateshortcode.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Shortcode': shortcode,
            'FriendlyName': friendly_name,
            'CallbackUrl': callback_url,
            'CallbackMethod': callback_method,
            'FallbackUrl': fallback_url,
            'FallbackUrlMethod': fallback_url_method
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_keywords(self,
                             page=None,
                             pagesize=None,
                             keyword=None,
                             shortcode=None):
        """Does a POST request to /keyword/lists.json.

        Retrieve a list of keywords associated with your Ytel account.

        Args:
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (int, optional): Number of individual resources listed in
                the response per page
            keyword (string, optional): Only list keywords of keyword
            shortcode (int, optional): Only list keywords of shortcode

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/keyword/lists.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': page,
            'pagesize': pagesize,
            'Keyword': keyword,
            'Shortcode': shortcode
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_shortcode(self,
                              shortcode):
        """Does a POST request to /shortcode/viewshortcode.json.

        The response returned here contains all resource properties associated
        with the given Shortcode.

        Args:
            shortcode (string): List of valid Shortcode to your Ytel account

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/viewshortcode.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Shortcode': shortcode
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_send_sms(self,
                        shortcode,
                        to,
                        templateid,
                        data,
                        method=None,
                        message_status_callback=None):
        """Does a POST request to /shortcode/sendsms.json.

        Send an SMS from a Ytel ShortCode

        Args:
            shortcode (string): The Short Code number that is the sender of
                this message
            to (string): A valid 10-digit number that should receive the
                message
            templateid (uuid|string): The unique identifier for the template
                used for the message
            data (string): format of your data, example:
                {companyname}:test,{otpcode}:1234
            method (string, optional): Specifies the HTTP method used to
                request the required URL once the Short Code message is sent.
            message_status_callback (string, optional): URL that can be
                requested to receive notification when Short Code message was
                sent.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/sendsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'shortcode': shortcode,
            'to': to,
            'templateid': templateid,
            'data': data,
            'Method': method,
            'MessageStatusCallback': message_status_callback
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_templates(self,
                              mtype=None,
                              page=None,
                              pagesize=None,
                              shortcode=None):
        """Does a POST request to /template/lists.json.

        List Shortcode Templates by Type

        Args:
            mtype (string, optional): The type (category) of template Valid
                values: marketing, authorization
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (int, optional): The count of objects to return per
                page.
            shortcode (string, optional): Only list templates of type

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/template/lists.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'type': mtype,
            'page': page,
            'pagesize': pagesize,
            'Shortcode': shortcode
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_template(self,
                             template_id):
        """Does a POST request to /template/view.json.

        View a Shared ShortCode Template

        Args:
            template_id (uuid|string): The unique identifier for a template
                object

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/template/view.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'TemplateId': template_id
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_inbound_sms(self,
                                datecreated=None,
                                page=None,
                                pagesize=None,
                                mfrom=None,
                                shortcode=None):
        """Does a POST request to /shortcode/getinboundsms.json.

        List All Inbound ShortCode

        Args:
            datecreated (string, optional): Only list messages sent with the
                specified date
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (int, optional): Number of individual resources listed in
                the response per page
            mfrom (string, optional): From Number to Inbound ShortCode
            shortcode (string, optional): Only list messages sent to this
                Short Code

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/getinboundsms.json'
        _query_parameters = {
            'Datecreated': datecreated
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': page,
            'pagesize': pagesize,
            'from': mfrom,
            'Shortcode': shortcode
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_keyword(self,
                            keywordid):
        """Does a POST request to /keyword/view.json.

        View a set of properties for a single keyword.

        Args:
            keywordid (string): The unique identifier of each keyword

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/keyword/view.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Keywordid': keywordid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
