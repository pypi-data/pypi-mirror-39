# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class DedicatedShortCodeController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def update_shortcode(self,
                         shortcode,
                         friendly_name=None,
                         callback_method=None,
                         callback_url=None,
                         fallback_method=None,
                         fallback_url=None):
        """Does a POST request to /dedicatedshortcode/updateshortcode.json.

        Update a dedicated shortcode.

        Args:
            shortcode (string): List of valid dedicated shortcode to your Ytel
                account.
            friendly_name (string, optional): User generated name of the
                dedicated shortcode.
            callback_method (string, optional): Specifies the HTTP method used
                to request the required StatusCallBackUrl once call connects.
            callback_url (string, optional): URL that can be requested to
                receive notification when call has ended. A set of default
                parameters will be sent here once the call is finished.
            fallback_method (string, optional): Specifies the HTTP method used
                to request the required FallbackUrl once call connects.
            fallback_url (string, optional): URL used if any errors occur
                during execution of InboundXML or at initial request of the
                required Url provided with the POST.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/dedicatedshortcode/updateshortcode.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Shortcode': shortcode,
            'FriendlyName': friendly_name,
            'CallbackMethod': callback_method,
            'CallbackUrl': callback_url,
            'FallbackMethod': fallback_method,
            'FallbackUrl': fallback_url
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_shortcodes(self,
                               shortcode=None,
                               page=None,
                               pagesize=None):
        """Does a POST request to /dedicatedshortcode/listshortcode.json.

        Retrieve a list of Short Code assignment associated with your Ytel
        account.

        Args:
            shortcode (string, optional): Only list Short Code Assignment sent
                from this Short Code
            page (string, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (string, optional): The count of objects to return per
                page.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/dedicatedshortcode/listshortcode.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Shortcode': shortcode,
            'page': page,
            'pagesize': pagesize
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_inbound_sms(self,
                                page=None,
                                pagesize=None,
                                mfrom=None,
                                shortcode=None,
                                datecreated=None):
        """Does a POST request to /dedicatedshortcode/getinboundsms.json.

        Retrive a list of inbound Sms Short Code messages associated with your
        Ytel account.

        Args:
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            pagesize (int, optional): Number of individual resources listed in
                the response per page
            mfrom (string, optional): Only list SMS messages sent from this
                number
            shortcode (string, optional): Only list SMS messages sent to
                Shortcode
            datecreated (string, optional): Only list SMS messages sent in the
                specified date MAKE REQUEST

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/dedicatedshortcode/getinboundsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'page': page,
            'pagesize': pagesize,
            'From': mfrom,
            'Shortcode': shortcode,
            'Datecreated': datecreated
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_sms(self,
                        shortcode):
        """Does a POST request to /dedicatedshortcode/viewshortcode.json.

        Retrieve a single Short Code object by its shortcode assignment.

        Args:
            shortcode (string): List of valid Dedicated Short Code to your
                Ytel account

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/dedicatedshortcode/viewshortcode.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Shortcode': shortcode
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_sms(self,
                        shortcode=None,
                        to=None,
                        date_sent=None,
                        page=None,
                        page_size=None):
        """Does a POST request to /shortcode/listsms.json.

        Retrieve a list of Short Code messages.

        Args:
            shortcode (string, optional): Only list messages sent from this
                Short Code
            to (string, optional): Only list messages sent to this number
            date_sent (string, optional): Only list messages sent with the
                specified date
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            page_size (int, optional): The count of objects to return per
                page.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/listsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Shortcode': shortcode,
            'To': to,
            'DateSent': date_sent,
            'Page': page,
            'PageSize': page_size
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_send_sms(self,
                        shortcode,
                        to,
                        body,
                        method=None,
                        messagestatuscallback=None):
        """Does a POST request to /dedicatedshortcode/sendsms.json.

        Send Dedicated Shortcode

        Args:
            shortcode (int): Your dedicated shortcode
            to (float): The number to send your SMS to
            body (string): The body of your message
            method (string, optional): Specifies the HTTP method used to
                request the required URL once the Short Code message is
                sent.GET or POST
            messagestatuscallback (string, optional): URL that can be
                requested to receive notification when Short Code message was
                sent.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/dedicatedshortcode/sendsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'shortcode': shortcode,
            'to': to,
            'body': body,
            'method': method,
            'messagestatuscallback': messagestatuscallback
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_sms_1(self,
                          message_sid):
        """Does a POST request to /shortcode/viewsms.json.

        View a single Sms Short Code message.

        Args:
            message_sid (string): The unique identifier for the sms resource

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/shortcode/viewsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'MessageSid': message_sid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
