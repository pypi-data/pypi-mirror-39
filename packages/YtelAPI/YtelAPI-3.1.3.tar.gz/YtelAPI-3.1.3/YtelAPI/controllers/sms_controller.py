# -*- coding: utf-8 -*-

"""
    YtelAPI

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth

class SMSController(BaseController):

    """A Controller to access Endpoints in the YtelAPI API."""


    def create_list_sms(self,
                        page=None,
                        page_size=None,
                        mfrom=None,
                        to=None,
                        date_sent=None):
        """Does a POST request to /sms/listsms.json.

        Retrieve a list of Outbound SMS message objects.

        Args:
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            page_size (int, optional): Number of individual resources listed
                in the response per page
            mfrom (string, optional): Filter SMS message objects from this
                valid 10-digit phone number (E.164 format).
            to (string, optional): Filter SMS message objects to this valid
                10-digit phone number (E.164 format).
            date_sent (string, optional): Only list SMS messages sent in the
                specified date range

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/sms/listsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Page': page,
            'PageSize': page_size,
            'From': mfrom,
            'To': to,
            'DateSent': date_sent
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_list_inbound_sms(self,
                                page=None,
                                page_size=None,
                                mfrom=None,
                                to=None,
                                date_sent=None):
        """Does a POST request to /sms/getinboundsms.json.

        Retrieve a list of Inbound SMS message objects.

        Args:
            page (int, optional): The page count to retrieve from the total
                results in the collection. Page indexing starts at 1.
            page_size (int, optional): The count of objects to return per
                page.
            mfrom (string, optional): Filter SMS message objects from this
                valid 10-digit phone number (E.164 format).
            to (string, optional): Filter SMS message objects to this valid
                10-digit phone number (E.164 format).
            date_sent (string, optional): Filter sms message objects by this
                date.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/sms/getinboundsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'Page': page,
            'PageSize': page_size,
            'From': mfrom,
            'To': to,
            'DateSent': date_sent
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_send_sms(self,
                        mfrom,
                        to,
                        body,
                        method=None,
                        message_status_callback=None,
                        smartsms=None,
                        delivery_status=None):
        """Does a POST request to /sms/sendsms.json.

        Send an SMS from a Ytel number

        Args:
            mfrom (string): The 10-digit SMS-enabled Ytel number (E.164
                format) in which the message is sent.
            to (string): The 10-digit phone number (E.164 format) that will
                receive the message.
            body (string): The body message that is to be sent in the text.
            method (string, optional): Specifies the HTTP method used to
                request the required URL once SMS sent.
            message_status_callback (string, optional): URL that can be
                requested to receive notification when SMS has Sent. A set of
                default parameters will be sent here once the SMS is
                finished.
            smartsms (bool, optional): Check's 'to' number can receive sms or
                not using Carrier API, if wireless = true then text sms is
                sent, else wireless = false then call is recieved to end user
                with audible message.
            delivery_status (bool, optional): Delivery reports are a method to
                tell your system if the message has arrived on the destination
                phone.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/sms/sendsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'From': mfrom,
            'To': to,
            'Body': body,
            'Method': method,
            'MessageStatusCallback': message_status_callback,
            'Smartsms': smartsms,
            'DeliveryStatus': delivery_status
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_sms(self,
                        message_sid):
        """Does a POST request to /sms/viewsms.json.

        Retrieve a single SMS message object by its SmsSid.

        Args:
            message_sid (string): The unique identifier for a sms message.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/sms/viewsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'MessageSid': message_sid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body

    def create_view_sms_details(self,
                                message_sid):
        """Does a POST request to /sms/viewdetailsms.json.

        Retrieve a single SMS message object with details by its SmsSid.

        Args:
            message_sid (string): The unique identifier for a sms message.

        Returns:
            string: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/sms/viewdetailsms.json'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare form parameters
        _form_parameters = {
            'MessageSid': message_sid
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, parameters=_form_parameters)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return _context.response.raw_body
