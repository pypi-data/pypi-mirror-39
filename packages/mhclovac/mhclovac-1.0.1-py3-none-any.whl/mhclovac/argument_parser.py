import argparse


schemas_help = """
Space separated list of key:schema pairs. Key will be used as reference for 
profile data generated by the provided schema. Path is path to schema file. 
Note that schema file must be CSV file with "amino_acid" and "value" columns.
"""

sigmoid_weight_threshold_help = """
Threshold for sigmoid weight activation, that is, value for X where activation
equals 0.5. Default is 0.4.
"""

mhclovac_description = """
mhclovac - MHC binding prediction based on modeled physicochemical 
properties of peptides. Version: 1.0.1. Author: Stefan Stojanovic
"""

mhclovac_build_description = """
mhclovac-build - Create HLA profile database.
Version: 1.0.1. Author Stefan Stojanovic
"""


def parse_args(argv):
    parser = argparse.ArgumentParser(description=mhclovac_description)
    parser.add_argument('--sequence', type=str, help='Input sequence')
    parser.add_argument('--sequence_name', type=str, help='Sequence name')
    parser.add_argument('--fasta', type=str, help='FASTA file')
    parser.add_argument('--hla', type=str, help='HLA type', required=True)
    parser.add_argument('--peptide_length', type=int, help='Peptide length',
                        required=True)
    parser.add_argument('--reference_data', type=str, required=True,
                        help='File with profile data (hdf5)')
    parser.add_argument('--output', type=str,
                        help='Output file. If not provided output will be '
                             'written to stdout')
    parser.add_argument('--relu_score', action='store_true',
                        help='On each profile score preform relu function')
    parser.add_argument('--weights', nargs='+', type=str,
                        help='Space separated schema_key:value pairs of '
                             'schema weights.')
    parser.add_argument('--dynamic_weights', action='store_true',
                        help='Compute weights for each HLA type based on '
                             'parameters of truth and null distributions')
    parser.add_argument('--weight_type', type=str,
                        help='Type of activation function to use for weights',
                        default='sigmoid')
    parser.add_argument('--sigmoid_weight_steepness', type=int,
                        help='Steepness constant for calculating activation',
                        default=8)
    parser.add_argument('--sigmoid_weight_threshold', type=float,
                        help=sigmoid_weight_threshold_help,
                        default=0.5)
    parser.add_argument('--std_accounted_weights', action='store_true',
                        help='Account for variance (std) when computing '
                             'weights')
    parser.add_argument('--schema_keys', type=str, nargs='+',
                        help='List of schemas to use. By default all schemas '
                             'in profile_data will be used.')
    parser.add_argument('--score_breakdown', action='store_true',
                        help='Report individual schema scores')
    parser.add_argument('--print_header', action='store_true',
                        help='Print column names')
    return parser.parse_args(argv)


def parse_build_args(argv):
    parser = argparse.ArgumentParser(description=mhclovac_build_description)
    parser.add_argument('--input_data', type=str,
                        help='Input table with ligand data', required=True)
    parser.add_argument('--output', type=str, help='Output file name',
                        required=True)
    parser.add_argument('--schemas', type=str, nargs='+',
                        help=schemas_help, required=True)
    parser.add_argument('--profile_length', type=int,
                        help='Length of profile vector', default=100)
    parser.add_argument('--ic50_threshold', type=int,
                        help='ic50 threshold for truth set', default=100)
    parser.add_argument('--null_set_size', type=int,
                        help='Null set size, for modeling null distribution',
                        default=2000)
    parser.add_argument('--fit_dist', help='Fit data with norm or skewnorm',
                        type=str, default='skewnorm')
    parser.add_argument('--species', type=str,
                        help='Species from input table', default='human')
    parser.add_argument('--dist_scale', type=float,
                        help='Distribution scale (std), between 0 and 1',
                        default=0.8)
    parser.add_argument('--no_fit', action='store_true',
                        help='Skip fitting truth and null set')
    return parser.parse_args(argv)
