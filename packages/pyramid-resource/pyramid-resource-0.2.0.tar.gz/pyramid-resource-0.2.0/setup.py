# -*- coding: utf-8 -*-
from distutils.core import setup

modules = \
['pyramid_resource']
install_requires = \
['pyramid>=1.7,<2.0']

setup_kwargs = {
    'name': 'pyramid-resource',
    'version': '0.2.0',
    'description': 'A simple base resource class for Pyramid traversal.',
    'long_description': '# pyramid-resource\n\nPyramid\'s URL traversal is a powerful feature, but unfortunately Pyramid does\nnot provide any framework for creating a resource tree.  Although you can make\na resource tree using only dicts, this leaves some of the more interesting\ntraversal features on the table.  Creating a more functional resource tree is\nrelatively easy, but is unnecessary boilerplate that this project aims to\neliminate.\n\n## Basic usage\n\nFirst, of course, you need to add `pyramid-resource` to your project using your\npackage manager of choice.  e.g.: `pip install pyramid-resource`\n\nMake sure you\'re familiar with\n[URL traversal](https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/traversal.html).\n\nYou can create a new resource by subclassing `pyramid_resource.Resource`.  You\ncan make a resource the root of the tree by setting it as your root factory.\nFor example, here\'s a simple application that has a resource tree with only\na root.\n\n```python\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\nfrom pyramid_resource import Resource\n\n\nclass Root(Resource):\n    pass\n\n\ndef hello_world(request):\n    return Response(\'Hello!\\n\')\n\n\nif __name__ == \'__main__\':\n    with Configurator() as config:\n        config.set_root_factory(Root)\n        config.add_view(hello_world, context=Root)\n        app = config.make_wsgi_app()\n    server = make_server(\'0.0.0.0\', 8080, app)\n    server.serve_forever()\n```\n\nYou can define child resources by setting the `__children__` property to a\ndictionary.  The key corresponds the URL segment and the value should be a\nresource subclass.  pyramid-resource will automatically make the resources\nlocation-aware.\n\n```python\nclass Child(Resource):\n    pass\n\n\nclass Root(Resource):\n    __children__ = {\n        \'child\': Child,\n    }\n```\n\nYou can see the full example\n[here](https://github.com/luhn/pyramid-resource/blob/master/examples/02_children.py).\n\n## Dynamic resource trees\n\nOne of the more interesting features of URL traversal is that trees can be\ncreated on the fly.  This allows for dynamic traversal trees that can the\napplication state, such as objects in a database.\n\npyramid-resource enables this by providing a `get_child` method for you to\noverride.  The method takes in a single key argument and is invoked if no child\nresource can be found in `__children__`.   By default it returns `None`,\nindicating no child resource exists with the given key.  You can also raise a\nKeyError to indicate the same.  You can return a `Resource` subclass and it\nwill be used to create a child resource on the fly.\n\n```python\nclass Child(Resource):\n    pass\n\n\nclass Root(Resource):\n    def get_child(self, key):\n        if exists_in_db(key):\n            return Child\n```\n\nThe current request is accessible via `self.request`.\n\nOf course, this isn\'t particularly useful if you can\'t attach information to\nthe child resource.  `get_child` can also return a two-tuple of a `Resource`\nsubclass and a dictionary of attributes that will be attached to the resulting\nchild.\n\n```python\nclass Child(Resource):\n    pass\n\n\nclass Root(Resource):\n    def get_child(self, key):\n        if exists_in_db(key):\n            return Child, {\'id\': key}\n```\n\nYou can access the ID in your view through `context.id`.  **Resources will\nproxy the attributes of their parent**, so `context.id` will also be accessible\nin views further down the tree.\n\n## An example\n\nHere\'s an example that demonstrates how a real application might utilize\npyramid-resource.\n\n```python\nfrom wsgiref.simple_server import make_server\nfrom pyramid.decorator import reify\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\nfrom pyramid_resource import Resource\n\n\nclass MockDatabase:\n    DATA = {\n        1: \'Widget 1\',\n        2: \'Widget 2\',\n    }\n\n    def exists(self, id):\n        return id in self.DATA\n\n    def find(self, id):\n        return self.DATA[id]\n\n    def __iter__(self):\n        return iter(self.DATA.keys())\n\n\nclass Foo(Resource):\n    pass\n\n\nclass WidgetContainer(Resource):\n    __children__ = {\n        \'foo\': Foo,\n    }\n\n    def get_child(self, key):\n        try:\n            id = int(key)\n        except ValueError:\n            raise KeyError\n\n        if self.request.db.exists(id):\n            return Widget, {\'widget_id\': id}\n\n\nclass Widget(Resource):\n    __children__ = {\n        \'foo\': Foo,\n    }\n\n    @reify\n    def widget(self):\n        return self.request.db.find(self.widget_id)\n\n\nclass Root(Resource):\n    __children__ = {\n        \'widget\': WidgetContainer,\n    }\n\n\ndef list_widgets(context, request):\n    urls = []\n    for widget_id in request.db:\n        urls.append(request.resource_path(context[widget_id]))\n    return {\n        \'widget_urls\': urls,\n    }\n\n\ndef get_widget(context, request):\n    if hasattr(context, \'widget_id\'):\n        return Response(\'Hello {}!\\n\'.format(context.widget))\n    else:\n        return Response(\'Hello world!\\n\')\n\n\nif __name__ == \'__main__\':\n    with Configurator() as config:\n        config.set_root_factory(Root)\n        config.add_request_method(\n            lambda _: MockDatabase(),\n            \'db\',\n            property=True,\n        )\n        config.add_view(list_widgets, context=WidgetContainer, renderer=\'json\')\n        config.add_view(get_widget, context=Widget)\n        config.add_view(get_widget, context=Foo)\n        app = config.make_wsgi_app()\n    server = make_server(\'0.0.0.0\', 8080, app)\n    server.serve_forever()\n```\n\nThe resulting application will behave like this:\n\n```\n>>> curl localhost:8080/widget/\n> {"widget_urls": ["/widget/1/", "/widget/2/"]}\n\n>>> curl localhost:8080/widget/1/\n> Hello Widget 1!\n\n>>> curl localhost:8080/widget/2/\n> Hello Widget 2!\n\n>>> curl localhost:8080/widget/1/foo\n> Hello Widget 1!\n\n>>> curl localhost:8080/widget/foo\n> Hello world!\n```\n\n## Hacking\n\nDeveloping against pyramid-resource is simple, thanks to Poetry:\n\n* [Install Poetry](https://poetry.eustace.io/docs/#installation) if you haven\'t\n  done so already\n* Clone the repository\n* Run `poetry install`\n* Run the test suite with `make test`\n\n## Prior art\n\nThe\n[pyramid_traversalwrapper](https://github.com/Pylons/pyramid_traversalwrapper)\nproject proxies a location-ignorant resource tree to make it resource aware.\n',
    'author': 'Theron Luhn',
    'author_email': 'theron@luhn.com',
    'url': 'https://github.com/luhn/pyramid-resource',
    'py_modules': modules,
    'install_requires': install_requires,
    'python_requires': '>=3.4,<4.0',
}


setup(**setup_kwargs)
