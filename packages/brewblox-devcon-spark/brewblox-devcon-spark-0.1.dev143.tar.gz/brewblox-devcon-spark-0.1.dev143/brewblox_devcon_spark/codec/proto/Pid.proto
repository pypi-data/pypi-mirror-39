syntax = "proto3";

import "brewblox.proto";
import "nanopb.proto";

package blox;

message Pid {
  option (brewblox_msg).objtype = Pid;

  enum FilterChoice {
    FILT_30s = 0;
    FILT_1m = 1;
    FILT_3m = 2;
    FILT_5m = 3;
    FILT_10m = 4;
    FILT_20m = 5;
    FILT_45m = 6;
  }

  uint32 inputId = 1 [ (brewblox).objtype = ProcessValueInterface, (nanopb).int_size = IS_16 ];
  uint32 outputId = 2 [ (brewblox).objtype = ActuatorAnalogInterface, (nanopb).int_size = IS_16 ];

  sint32 inputValue = 5 [ (brewblox).unit = Temp, (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];
  sint32 inputSetting = 6 [ (brewblox).unit = Temp, (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];
  sint32 outputValue = 7 [ (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];
  sint32 outputSetting = 8 [ (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];

  FilterChoice filter = 9;
  sint32 filterThreshold = 10 [ (brewblox).unit = DeltaTemp, (brewblox).scale = 4096, (nanopb).int_size = IS_32 ];

  bool enabled = 11;
  bool active = 12 [ (brewblox).readonly = true ];

  sint32 kp = 13 [ (brewblox).unit = InverseTemp, (brewblox).scale = 4096, (nanopb).int_size = IS_32 ];
  uint32 ti = 14 [ (brewblox).unit = Time, (nanopb).int_size = IS_16 ];
  uint32 td = 15 [ (brewblox).unit = Time, (nanopb).int_size = IS_16 ];

  sint32 p = 16 [ (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];
  sint32 i = 17 [ (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];
  sint32 d = 18 [ (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];

  sint32 error = 19 [ (brewblox).unit = DeltaTemp, (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];
  sint32 integral = 20 [ (brewblox).unit = DeltaTempTime, (brewblox).scale = 4096, (nanopb).int_size = IS_32, (brewblox).readonly = true ];
  sint32 derivative = 21 [ (brewblox).unit = DeltaTempPerTime, (brewblox).scale = 8388608, (nanopb).int_size = IS_32, (brewblox).readonly = true ];
  repeated uint32 strippedFields = 99 [ (brewblox).tags = true, (brewblox).readonly = true, (nanopb).int_size = IS_16, (nanopb).max_count = 4 ];
}
