{
  "expectation_type": "expect_column_values_to_be_in_set",
  "datasets" : [{
    "data" : {
      "x" : [1,2,4],
      "y" : [1.1,2.2,5.5],
      "z" : ["hello", "jello", "mello"]
    },
    "tests" : [
      {
        "title": "Basic positive test case, number set",
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": [1,2,4]
        },
        "out": {
          "success": true
        }
      },
      {
        "title": "Negative test case, exclude existing column value",
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": [2, 4]
        },
        "out": {
          "success": false,
          "unexpected_index_list": [0],
          "unexpected_list": [1]
        }
      },
      {
        "title": "Negative, Empty values set",
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": []
        },
        "out": {
          "success": false,
          "unexpected_index_list": [0, 1, 2],
          "unexpected_list": [1, 2, 4]
        }
      },
      {
        "title": "Basic Positive strings set",
        "exact_match_out": false,
        "in": {
          "column": "z",
          "value_set": ["hello", "jello", "mello"]
        },
        "out": {
          "success": true
        }
      },
      {
        "title": "Negative test, strings set, extra value in column",
        "exact_match_out": false,
        "in": {
          "column": "z",
          "value_set": ["hello", "jello"]
        },
        "out": {
          "success": false,
          "unexpected_index_list": [2],
          "unexpected_list": ["mello"]
        }
      },
      {
        "title": "Negative test,  numbers set, no matching values",
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": [3]
        },
        "out": {
          "success": false,
          "unexpected_index_list": [0, 1, 2],
          "unexpected_list": [1, 2, 4]
        }
      },
      {
        "title": "Positive test, float set",
        "exact_match_out": false,
        "in": {
          "column": "y",
          "value_set": [1.1, 2.2, 5.5]
        },
        "out": {
          "success": true
        }
      },
      {
        "title": "Negative test, float set",
        "exact_match_out": false,
        "in": {
          "column": "y",
          "value_set": [1.11, 2.22, 5.51]
        },
        "out": {
          "success": false,
          "unexpected_index_list": [0, 1, 2],
          "unexpected_list": [1.1, 2.2, 5.5]
        }
      },
      {
        "title": "Raise TypeError when Values set is missing",
        "exact_match_out": false,
        "in": {
          "column": "z",
          "value_set": null,
          "catch_exceptions": true
        },
        "out": {},
        "error":{
          "traceback_substring": "argument of type 'NoneType' is not iterable"
          }
      }
    ]},
    {
      "data": {
        "empty_column": []
      },
      "tests": [{
        "title": "Test empty column; should be vacuously true",
        "exact_match_out": false,
        "in": {
          "column": "empty_column",
          "value_set": ["cat", "dog"],
          "catch_exceptions": false
        },
        "out": {
          "success": true
        }
      }]
  }]
}
