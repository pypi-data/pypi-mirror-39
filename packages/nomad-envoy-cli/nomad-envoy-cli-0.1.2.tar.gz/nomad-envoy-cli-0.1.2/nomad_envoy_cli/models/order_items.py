# coding: utf-8

"""
    Nomad Envoy

    This is the API descriptor for the Nomad Envoy API, responsible for order creation and product lists.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: paul@samarkand.global
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'barcode': 'str',
        'quantity': 'int',
        'price': 'float'
    }

    attribute_map = {
        'name': 'name',
        'barcode': 'barcode',
        'quantity': 'quantity',
        'price': 'price'
    }

    def __init__(self, name=None, barcode=None, quantity=None, price=None):  # noqa: E501
        """OrderItems - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._barcode = None
        self._quantity = None
        self._price = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if barcode is not None:
            self.barcode = barcode
        if quantity is not None:
            self.quantity = quantity
        if price is not None:
            self.price = price

    @property
    def name(self):
        """Gets the name of this OrderItems.  # noqa: E501


        :return: The name of this OrderItems.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderItems.


        :param name: The name of this OrderItems.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def barcode(self):
        """Gets the barcode of this OrderItems.  # noqa: E501


        :return: The barcode of this OrderItems.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this OrderItems.


        :param barcode: The barcode of this OrderItems.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def quantity(self):
        """Gets the quantity of this OrderItems.  # noqa: E501


        :return: The quantity of this OrderItems.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderItems.


        :param quantity: The quantity of this OrderItems.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this OrderItems.  # noqa: E501


        :return: The price of this OrderItems.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderItems.


        :param price: The price of this OrderItems.  # noqa: E501
        :type: float
        """

        self._price = price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
