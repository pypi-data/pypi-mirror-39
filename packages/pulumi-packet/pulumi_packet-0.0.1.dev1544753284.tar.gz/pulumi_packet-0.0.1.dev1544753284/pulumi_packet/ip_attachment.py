# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from . import utilities, tables

class IpAttachment(pulumi.CustomResource):
    """
    Provides a resource to attach elastic IP subnets to devices.
    
    To attach an IP subnet from a reserved block to a provisioned device, you must derive a subnet CIDR belonging to
    one of your reserved blocks in the same project and facility as the target device.
    
    For example, you have reserved IPv4 address block 147.229.10.152/30, you can choose to assign either the whole
    block as one subnet to a device; or 2 subnets with CIDRs 147.229.10.152/31' and 147.229.10.154/31; or 4 subnets
    with mask prefix length 32. More about the elastic IP subnets is [here](https://help.packet.net/article/54-elastic-ips).
    
    Device and reserved block must be in the same facility.
    """
    def __init__(__self__, __name__, __opts__=None, cidr_notation=None, device_id=None):
        """Create a IpAttachment resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if not cidr_notation:
            raise TypeError('Missing required property cidr_notation')
        __props__['cidr_notation'] = cidr_notation

        if not device_id:
            raise TypeError('Missing required property device_id')
        __props__['device_id'] = device_id

        __props__['address'] = None
        __props__['address_family'] = None
        __props__['cidr'] = None
        __props__['gateway'] = None
        __props__['manageable'] = None
        __props__['management'] = None
        __props__['netmask'] = None
        __props__['network'] = None
        __props__['public'] = None

        super(IpAttachment, __self__).__init__(
            'packet:index/ipAttachment:IpAttachment',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

