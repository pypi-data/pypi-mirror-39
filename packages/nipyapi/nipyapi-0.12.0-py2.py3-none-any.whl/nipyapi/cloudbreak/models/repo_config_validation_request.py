# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RepoConfigValidationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ambari_base_url': 'str',
        'ambari_gpg_key_url': 'str',
        'stack_base_url': 'str',
        'utils_base_url': 'str',
        'version_definition_file_url': 'str',
        'mpack_url': 'str'
    }

    attribute_map = {
        'ambari_base_url': 'ambariBaseUrl',
        'ambari_gpg_key_url': 'ambariGpgKeyUrl',
        'stack_base_url': 'stackBaseURL',
        'utils_base_url': 'utilsBaseURL',
        'version_definition_file_url': 'versionDefinitionFileUrl',
        'mpack_url': 'mpackUrl'
    }

    def __init__(self, ambari_base_url=None, ambari_gpg_key_url=None, stack_base_url=None, utils_base_url=None, version_definition_file_url=None, mpack_url=None):
        """
        RepoConfigValidationRequest - a model defined in Swagger
        """

        self._ambari_base_url = None
        self._ambari_gpg_key_url = None
        self._stack_base_url = None
        self._utils_base_url = None
        self._version_definition_file_url = None
        self._mpack_url = None

        if ambari_base_url is not None:
          self.ambari_base_url = ambari_base_url
        if ambari_gpg_key_url is not None:
          self.ambari_gpg_key_url = ambari_gpg_key_url
        if stack_base_url is not None:
          self.stack_base_url = stack_base_url
        if utils_base_url is not None:
          self.utils_base_url = utils_base_url
        if version_definition_file_url is not None:
          self.version_definition_file_url = version_definition_file_url
        if mpack_url is not None:
          self.mpack_url = mpack_url

    @property
    def ambari_base_url(self):
        """
        Gets the ambari_base_url of this RepoConfigValidationRequest.
        url of the Ambari repository

        :return: The ambari_base_url of this RepoConfigValidationRequest.
        :rtype: str
        """
        return self._ambari_base_url

    @ambari_base_url.setter
    def ambari_base_url(self, ambari_base_url):
        """
        Sets the ambari_base_url of this RepoConfigValidationRequest.
        url of the Ambari repository

        :param ambari_base_url: The ambari_base_url of this RepoConfigValidationRequest.
        :type: str
        """

        self._ambari_base_url = ambari_base_url

    @property
    def ambari_gpg_key_url(self):
        """
        Gets the ambari_gpg_key_url of this RepoConfigValidationRequest.
        gpg key of the Ambari repository

        :return: The ambari_gpg_key_url of this RepoConfigValidationRequest.
        :rtype: str
        """
        return self._ambari_gpg_key_url

    @ambari_gpg_key_url.setter
    def ambari_gpg_key_url(self, ambari_gpg_key_url):
        """
        Sets the ambari_gpg_key_url of this RepoConfigValidationRequest.
        gpg key of the Ambari repository

        :param ambari_gpg_key_url: The ambari_gpg_key_url of this RepoConfigValidationRequest.
        :type: str
        """

        self._ambari_gpg_key_url = ambari_gpg_key_url

    @property
    def stack_base_url(self):
        """
        Gets the stack_base_url of this RepoConfigValidationRequest.
        url of the stack repository

        :return: The stack_base_url of this RepoConfigValidationRequest.
        :rtype: str
        """
        return self._stack_base_url

    @stack_base_url.setter
    def stack_base_url(self, stack_base_url):
        """
        Sets the stack_base_url of this RepoConfigValidationRequest.
        url of the stack repository

        :param stack_base_url: The stack_base_url of this RepoConfigValidationRequest.
        :type: str
        """

        self._stack_base_url = stack_base_url

    @property
    def utils_base_url(self):
        """
        Gets the utils_base_url of this RepoConfigValidationRequest.
        url of the stack utils repository

        :return: The utils_base_url of this RepoConfigValidationRequest.
        :rtype: str
        """
        return self._utils_base_url

    @utils_base_url.setter
    def utils_base_url(self, utils_base_url):
        """
        Sets the utils_base_url of this RepoConfigValidationRequest.
        url of the stack utils repository

        :param utils_base_url: The utils_base_url of this RepoConfigValidationRequest.
        :type: str
        """

        self._utils_base_url = utils_base_url

    @property
    def version_definition_file_url(self):
        """
        Gets the version_definition_file_url of this RepoConfigValidationRequest.
        local path on the Ambari server or URL that point to the desired VDF file

        :return: The version_definition_file_url of this RepoConfigValidationRequest.
        :rtype: str
        """
        return self._version_definition_file_url

    @version_definition_file_url.setter
    def version_definition_file_url(self, version_definition_file_url):
        """
        Sets the version_definition_file_url of this RepoConfigValidationRequest.
        local path on the Ambari server or URL that point to the desired VDF file

        :param version_definition_file_url: The version_definition_file_url of this RepoConfigValidationRequest.
        :type: str
        """

        self._version_definition_file_url = version_definition_file_url

    @property
    def mpack_url(self):
        """
        Gets the mpack_url of this RepoConfigValidationRequest.
        url the MPACK that needs to be installed before HDF installation

        :return: The mpack_url of this RepoConfigValidationRequest.
        :rtype: str
        """
        return self._mpack_url

    @mpack_url.setter
    def mpack_url(self, mpack_url):
        """
        Sets the mpack_url of this RepoConfigValidationRequest.
        url the MPACK that needs to be installed before HDF installation

        :param mpack_url: The mpack_url of this RepoConfigValidationRequest.
        :type: str
        """

        self._mpack_url = mpack_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RepoConfigValidationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
