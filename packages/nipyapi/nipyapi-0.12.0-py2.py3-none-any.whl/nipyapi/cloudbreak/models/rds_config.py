# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RdsConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'connection_url': 'str',
        'type': 'str',
        'connector_jar_url': 'str',
        'connection_user_name': 'str',
        'connection_password': 'str',
        'oracle': 'Oracle'
    }

    attribute_map = {
        'name': 'name',
        'connection_url': 'connectionURL',
        'type': 'type',
        'connector_jar_url': 'connectorJarUrl',
        'connection_user_name': 'connectionUserName',
        'connection_password': 'connectionPassword',
        'oracle': 'oracle'
    }

    def __init__(self, name=None, connection_url=None, type=None, connector_jar_url=None, connection_user_name=None, connection_password=None, oracle=None):
        """
        RdsConfig - a model defined in Swagger
        """

        self._name = None
        self._connection_url = None
        self._type = None
        self._connector_jar_url = None
        self._connection_user_name = None
        self._connection_password = None
        self._oracle = None

        self.name = name
        self.connection_url = connection_url
        self.type = type
        if connector_jar_url is not None:
          self.connector_jar_url = connector_jar_url
        self.connection_user_name = connection_user_name
        self.connection_password = connection_password
        if oracle is not None:
          self.oracle = oracle

    @property
    def name(self):
        """
        Gets the name of this RdsConfig.
        Name of the RDS configuration resource

        :return: The name of this RdsConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RdsConfig.
        Name of the RDS configuration resource

        :param name: The name of this RdsConfig.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def connection_url(self):
        """
        Gets the connection_url of this RdsConfig.
        JDBC connection URL in the form of jdbc:<db-type>://<address>:<port>/<db>

        :return: The connection_url of this RdsConfig.
        :rtype: str
        """
        return self._connection_url

    @connection_url.setter
    def connection_url(self, connection_url):
        """
        Sets the connection_url of this RdsConfig.
        JDBC connection URL in the form of jdbc:<db-type>://<address>:<port>/<db>

        :param connection_url: The connection_url of this RdsConfig.
        :type: str
        """
        if connection_url is None:
            raise ValueError("Invalid value for `connection_url`, must not be `None`")

        self._connection_url = connection_url

    @property
    def type(self):
        """
        Gets the type of this RdsConfig.
        Type of RDS, aka the service name that will use the RDS like HIVE, DRUID, SUPERSET, RANGER, etc.

        :return: The type of this RdsConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RdsConfig.
        Type of RDS, aka the service name that will use the RDS like HIVE, DRUID, SUPERSET, RANGER, etc.

        :param type: The type of this RdsConfig.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def connector_jar_url(self):
        """
        Gets the connector_jar_url of this RdsConfig.
        URL that points to the jar of the connection driver(connector)

        :return: The connector_jar_url of this RdsConfig.
        :rtype: str
        """
        return self._connector_jar_url

    @connector_jar_url.setter
    def connector_jar_url(self, connector_jar_url):
        """
        Sets the connector_jar_url of this RdsConfig.
        URL that points to the jar of the connection driver(connector)

        :param connector_jar_url: The connector_jar_url of this RdsConfig.
        :type: str
        """

        self._connector_jar_url = connector_jar_url

    @property
    def connection_user_name(self):
        """
        Gets the connection_user_name of this RdsConfig.
        Username to use for the jdbc connection

        :return: The connection_user_name of this RdsConfig.
        :rtype: str
        """
        return self._connection_user_name

    @connection_user_name.setter
    def connection_user_name(self, connection_user_name):
        """
        Sets the connection_user_name of this RdsConfig.
        Username to use for the jdbc connection

        :param connection_user_name: The connection_user_name of this RdsConfig.
        :type: str
        """
        if connection_user_name is None:
            raise ValueError("Invalid value for `connection_user_name`, must not be `None`")

        self._connection_user_name = connection_user_name

    @property
    def connection_password(self):
        """
        Gets the connection_password of this RdsConfig.
        Password to use for the jdbc connection

        :return: The connection_password of this RdsConfig.
        :rtype: str
        """
        return self._connection_password

    @connection_password.setter
    def connection_password(self, connection_password):
        """
        Sets the connection_password of this RdsConfig.
        Password to use for the jdbc connection

        :param connection_password: The connection_password of this RdsConfig.
        :type: str
        """
        if connection_password is None:
            raise ValueError("Invalid value for `connection_password`, must not be `None`")

        self._connection_password = connection_password

    @property
    def oracle(self):
        """
        Gets the oracle of this RdsConfig.
        Oracle specific properties

        :return: The oracle of this RdsConfig.
        :rtype: Oracle
        """
        return self._oracle

    @oracle.setter
    def oracle(self, oracle):
        """
        Sets the oracle of this RdsConfig.
        Oracle specific properties

        :param oracle: The oracle of this RdsConfig.
        :type: Oracle
        """

        self._oracle = oracle

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RdsConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
