# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterExposedServiceResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_name': 'str',
        'display_name': 'str',
        'knox_service': 'str',
        'service_url': 'str',
        'open': 'bool',
        'mode': 'str'
    }

    attribute_map = {
        'service_name': 'serviceName',
        'display_name': 'displayName',
        'knox_service': 'knoxService',
        'service_url': 'serviceUrl',
        'open': 'open',
        'mode': 'mode'
    }

    def __init__(self, service_name=None, display_name=None, knox_service=None, service_url=None, open=False, mode=None):
        """
        ClusterExposedServiceResponse - a model defined in Swagger
        """

        self._service_name = None
        self._display_name = None
        self._knox_service = None
        self._service_url = None
        self._open = None
        self._mode = None

        if service_name is not None:
          self.service_name = service_name
        if display_name is not None:
          self.display_name = display_name
        if knox_service is not None:
          self.knox_service = knox_service
        if service_url is not None:
          self.service_url = service_url
        if open is not None:
          self.open = open
        if mode is not None:
          self.mode = mode

    @property
    def service_name(self):
        """
        Gets the service_name of this ClusterExposedServiceResponse.

        :return: The service_name of this ClusterExposedServiceResponse.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """
        Sets the service_name of this ClusterExposedServiceResponse.

        :param service_name: The service_name of this ClusterExposedServiceResponse.
        :type: str
        """

        self._service_name = service_name

    @property
    def display_name(self):
        """
        Gets the display_name of this ClusterExposedServiceResponse.

        :return: The display_name of this ClusterExposedServiceResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this ClusterExposedServiceResponse.

        :param display_name: The display_name of this ClusterExposedServiceResponse.
        :type: str
        """

        self._display_name = display_name

    @property
    def knox_service(self):
        """
        Gets the knox_service of this ClusterExposedServiceResponse.

        :return: The knox_service of this ClusterExposedServiceResponse.
        :rtype: str
        """
        return self._knox_service

    @knox_service.setter
    def knox_service(self, knox_service):
        """
        Sets the knox_service of this ClusterExposedServiceResponse.

        :param knox_service: The knox_service of this ClusterExposedServiceResponse.
        :type: str
        """

        self._knox_service = knox_service

    @property
    def service_url(self):
        """
        Gets the service_url of this ClusterExposedServiceResponse.

        :return: The service_url of this ClusterExposedServiceResponse.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """
        Sets the service_url of this ClusterExposedServiceResponse.

        :param service_url: The service_url of this ClusterExposedServiceResponse.
        :type: str
        """

        self._service_url = service_url

    @property
    def open(self):
        """
        Gets the open of this ClusterExposedServiceResponse.

        :return: The open of this ClusterExposedServiceResponse.
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """
        Sets the open of this ClusterExposedServiceResponse.

        :param open: The open of this ClusterExposedServiceResponse.
        :type: bool
        """

        self._open = open

    @property
    def mode(self):
        """
        Gets the mode of this ClusterExposedServiceResponse.

        :return: The mode of this ClusterExposedServiceResponse.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this ClusterExposedServiceResponse.

        :param mode: The mode of this ClusterExposedServiceResponse.
        :type: str
        """
        allowed_values = ["SSO_PROVIDER", "NONE"]
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterExposedServiceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
