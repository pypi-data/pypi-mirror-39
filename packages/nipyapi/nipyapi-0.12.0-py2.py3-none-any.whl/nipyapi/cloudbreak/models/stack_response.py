# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'availability_zone': 'str',
        'region': 'str',
        'platform_variant': 'str',
        'credential_id': 'int',
        'on_failure_action': 'str',
        'network_id': 'int',
        'ambari_version': 'str',
        'hdp_version': 'str',
        'parameters': 'dict(str, str)',
        'custom_domain': 'str',
        'custom_hostname': 'str',
        'cluster_name_as_subdomain': 'bool',
        'hostgroup_name_as_hostname': 'bool',
        'application_tags': 'dict(str, str)',
        'user_defined_tags': 'dict(str, str)',
        'default_tags': 'dict(str, str)',
        'custom_inputs': 'dict(str, object)',
        'id': 'int',
        'owner': 'str',
        'account': 'str',
        'status': 'str',
        'cluster': 'ClusterResponse',
        'status_reason': 'str',
        'credential': 'CredentialResponse',
        'network': 'NetworkResponse',
        'instance_groups': 'list[InstanceGroupResponse]',
        'failure_policy': 'FailurePolicyResponse',
        'orchestrator': 'OrchestratorResponse',
        'created': 'int',
        'gateway_port': 'int',
        'image': 'ImageJson',
        'cloudbreak_details': 'CloudbreakDetailsJson',
        'flex_subscription': 'FlexSubscriptionResponse',
        'stack_authentication': 'StackAuthenticationResponse',
        'node_count': 'int',
        'hardware_infos': 'list[HardwareInfoResponse]',
        'cloudbreak_events': 'list[CloudbreakEvent]',
        'cloudbreak_usages': 'list[CloudbreakUsage]',
        'cloud_platform': 'str',
        'public': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'availability_zone': 'availabilityZone',
        'region': 'region',
        'platform_variant': 'platformVariant',
        'credential_id': 'credentialId',
        'on_failure_action': 'onFailureAction',
        'network_id': 'networkId',
        'ambari_version': 'ambariVersion',
        'hdp_version': 'hdpVersion',
        'parameters': 'parameters',
        'custom_domain': 'customDomain',
        'custom_hostname': 'customHostname',
        'cluster_name_as_subdomain': 'clusterNameAsSubdomain',
        'hostgroup_name_as_hostname': 'hostgroupNameAsHostname',
        'application_tags': 'applicationTags',
        'user_defined_tags': 'userDefinedTags',
        'default_tags': 'defaultTags',
        'custom_inputs': 'customInputs',
        'id': 'id',
        'owner': 'owner',
        'account': 'account',
        'status': 'status',
        'cluster': 'cluster',
        'status_reason': 'statusReason',
        'credential': 'credential',
        'network': 'network',
        'instance_groups': 'instanceGroups',
        'failure_policy': 'failurePolicy',
        'orchestrator': 'orchestrator',
        'created': 'created',
        'gateway_port': 'gatewayPort',
        'image': 'image',
        'cloudbreak_details': 'cloudbreakDetails',
        'flex_subscription': 'flexSubscription',
        'stack_authentication': 'stackAuthentication',
        'node_count': 'nodeCount',
        'hardware_infos': 'hardwareInfos',
        'cloudbreak_events': 'cloudbreakEvents',
        'cloudbreak_usages': 'cloudbreakUsages',
        'cloud_platform': 'cloudPlatform',
        'public': 'public'
    }

    def __init__(self, name=None, availability_zone=None, region=None, platform_variant=None, credential_id=None, on_failure_action=None, network_id=None, ambari_version=None, hdp_version=None, parameters=None, custom_domain=None, custom_hostname=None, cluster_name_as_subdomain=False, hostgroup_name_as_hostname=False, application_tags=None, user_defined_tags=None, default_tags=None, custom_inputs=None, id=None, owner=None, account=None, status=None, cluster=None, status_reason=None, credential=None, network=None, instance_groups=None, failure_policy=None, orchestrator=None, created=None, gateway_port=None, image=None, cloudbreak_details=None, flex_subscription=None, stack_authentication=None, node_count=None, hardware_infos=None, cloudbreak_events=None, cloudbreak_usages=None, cloud_platform=None, public=False):
        """
        StackResponse - a model defined in Swagger
        """

        self._name = None
        self._availability_zone = None
        self._region = None
        self._platform_variant = None
        self._credential_id = None
        self._on_failure_action = None
        self._network_id = None
        self._ambari_version = None
        self._hdp_version = None
        self._parameters = None
        self._custom_domain = None
        self._custom_hostname = None
        self._cluster_name_as_subdomain = None
        self._hostgroup_name_as_hostname = None
        self._application_tags = None
        self._user_defined_tags = None
        self._default_tags = None
        self._custom_inputs = None
        self._id = None
        self._owner = None
        self._account = None
        self._status = None
        self._cluster = None
        self._status_reason = None
        self._credential = None
        self._network = None
        self._instance_groups = None
        self._failure_policy = None
        self._orchestrator = None
        self._created = None
        self._gateway_port = None
        self._image = None
        self._cloudbreak_details = None
        self._flex_subscription = None
        self._stack_authentication = None
        self._node_count = None
        self._hardware_infos = None
        self._cloudbreak_events = None
        self._cloudbreak_usages = None
        self._cloud_platform = None
        self._public = None

        self.name = name
        if availability_zone is not None:
          self.availability_zone = availability_zone
        if region is not None:
          self.region = region
        if platform_variant is not None:
          self.platform_variant = platform_variant
        if credential_id is not None:
          self.credential_id = credential_id
        if on_failure_action is not None:
          self.on_failure_action = on_failure_action
        if network_id is not None:
          self.network_id = network_id
        if ambari_version is not None:
          self.ambari_version = ambari_version
        if hdp_version is not None:
          self.hdp_version = hdp_version
        if parameters is not None:
          self.parameters = parameters
        if custom_domain is not None:
          self.custom_domain = custom_domain
        if custom_hostname is not None:
          self.custom_hostname = custom_hostname
        if cluster_name_as_subdomain is not None:
          self.cluster_name_as_subdomain = cluster_name_as_subdomain
        if hostgroup_name_as_hostname is not None:
          self.hostgroup_name_as_hostname = hostgroup_name_as_hostname
        if application_tags is not None:
          self.application_tags = application_tags
        if user_defined_tags is not None:
          self.user_defined_tags = user_defined_tags
        if default_tags is not None:
          self.default_tags = default_tags
        if custom_inputs is not None:
          self.custom_inputs = custom_inputs
        if id is not None:
          self.id = id
        if owner is not None:
          self.owner = owner
        if account is not None:
          self.account = account
        if status is not None:
          self.status = status
        if cluster is not None:
          self.cluster = cluster
        if status_reason is not None:
          self.status_reason = status_reason
        if credential is not None:
          self.credential = credential
        if network is not None:
          self.network = network
        if instance_groups is not None:
          self.instance_groups = instance_groups
        if failure_policy is not None:
          self.failure_policy = failure_policy
        if orchestrator is not None:
          self.orchestrator = orchestrator
        if created is not None:
          self.created = created
        if gateway_port is not None:
          self.gateway_port = gateway_port
        if image is not None:
          self.image = image
        if cloudbreak_details is not None:
          self.cloudbreak_details = cloudbreak_details
        if flex_subscription is not None:
          self.flex_subscription = flex_subscription
        if stack_authentication is not None:
          self.stack_authentication = stack_authentication
        if node_count is not None:
          self.node_count = node_count
        if hardware_infos is not None:
          self.hardware_infos = hardware_infos
        if cloudbreak_events is not None:
          self.cloudbreak_events = cloudbreak_events
        if cloudbreak_usages is not None:
          self.cloudbreak_usages = cloudbreak_usages
        if cloud_platform is not None:
          self.cloud_platform = cloud_platform
        if public is not None:
          self.public = public

    @property
    def name(self):
        """
        Gets the name of this StackResponse.
        name of the stack

        :return: The name of this StackResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StackResponse.
        name of the stack

        :param name: The name of this StackResponse.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")
        if name is not None and len(name) < 5:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `5`")
        if name is not None and not re.search('(^[a-z][-a-z0-9]*[a-z0-9]$)', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(^[a-z][-a-z0-9]*[a-z0-9]$)/`")

        self._name = name

    @property
    def availability_zone(self):
        """
        Gets the availability_zone of this StackResponse.
        availability zone of the stack

        :return: The availability_zone of this StackResponse.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """
        Sets the availability_zone of this StackResponse.
        availability zone of the stack

        :param availability_zone: The availability_zone of this StackResponse.
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def region(self):
        """
        Gets the region of this StackResponse.
        region of the stack

        :return: The region of this StackResponse.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this StackResponse.
        region of the stack

        :param region: The region of this StackResponse.
        :type: str
        """

        self._region = region

    @property
    def platform_variant(self):
        """
        Gets the platform_variant of this StackResponse.
        cloud provider api variant

        :return: The platform_variant of this StackResponse.
        :rtype: str
        """
        return self._platform_variant

    @platform_variant.setter
    def platform_variant(self, platform_variant):
        """
        Sets the platform_variant of this StackResponse.
        cloud provider api variant

        :param platform_variant: The platform_variant of this StackResponse.
        :type: str
        """

        self._platform_variant = platform_variant

    @property
    def credential_id(self):
        """
        Gets the credential_id of this StackResponse.
        credential resource id for the stack

        :return: The credential_id of this StackResponse.
        :rtype: int
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """
        Sets the credential_id of this StackResponse.
        credential resource id for the stack

        :param credential_id: The credential_id of this StackResponse.
        :type: int
        """

        self._credential_id = credential_id

    @property
    def on_failure_action(self):
        """
        Gets the on_failure_action of this StackResponse.
        action on failure

        :return: The on_failure_action of this StackResponse.
        :rtype: str
        """
        return self._on_failure_action

    @on_failure_action.setter
    def on_failure_action(self, on_failure_action):
        """
        Sets the on_failure_action of this StackResponse.
        action on failure

        :param on_failure_action: The on_failure_action of this StackResponse.
        :type: str
        """
        allowed_values = ["ROLLBACK", "DO_NOTHING"]
        if on_failure_action not in allowed_values:
            raise ValueError(
                "Invalid value for `on_failure_action` ({0}), must be one of {1}"
                .format(on_failure_action, allowed_values)
            )

        self._on_failure_action = on_failure_action

    @property
    def network_id(self):
        """
        Gets the network_id of this StackResponse.
        network resource id for the stack

        :return: The network_id of this StackResponse.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this StackResponse.
        network resource id for the stack

        :param network_id: The network_id of this StackResponse.
        :type: int
        """

        self._network_id = network_id

    @property
    def ambari_version(self):
        """
        Gets the ambari_version of this StackResponse.
        specific version of ambari

        :return: The ambari_version of this StackResponse.
        :rtype: str
        """
        return self._ambari_version

    @ambari_version.setter
    def ambari_version(self, ambari_version):
        """
        Sets the ambari_version of this StackResponse.
        specific version of ambari

        :param ambari_version: The ambari_version of this StackResponse.
        :type: str
        """

        self._ambari_version = ambari_version

    @property
    def hdp_version(self):
        """
        Gets the hdp_version of this StackResponse.
        specific version of HDP

        :return: The hdp_version of this StackResponse.
        :rtype: str
        """
        return self._hdp_version

    @hdp_version.setter
    def hdp_version(self, hdp_version):
        """
        Sets the hdp_version of this StackResponse.
        specific version of HDP

        :param hdp_version: The hdp_version of this StackResponse.
        :type: str
        """

        self._hdp_version = hdp_version

    @property
    def parameters(self):
        """
        Gets the parameters of this StackResponse.
        additional cloud specific parameters for stack

        :return: The parameters of this StackResponse.
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this StackResponse.
        additional cloud specific parameters for stack

        :param parameters: The parameters of this StackResponse.
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def custom_domain(self):
        """
        Gets the custom_domain of this StackResponse.
        custom domain name for the nodes in the stack

        :return: The custom_domain of this StackResponse.
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """
        Sets the custom_domain of this StackResponse.
        custom domain name for the nodes in the stack

        :param custom_domain: The custom_domain of this StackResponse.
        :type: str
        """

        self._custom_domain = custom_domain

    @property
    def custom_hostname(self):
        """
        Gets the custom_hostname of this StackResponse.
        custom hostname for nodes in the stack

        :return: The custom_hostname of this StackResponse.
        :rtype: str
        """
        return self._custom_hostname

    @custom_hostname.setter
    def custom_hostname(self, custom_hostname):
        """
        Sets the custom_hostname of this StackResponse.
        custom hostname for nodes in the stack

        :param custom_hostname: The custom_hostname of this StackResponse.
        :type: str
        """

        self._custom_hostname = custom_hostname

    @property
    def cluster_name_as_subdomain(self):
        """
        Gets the cluster_name_as_subdomain of this StackResponse.
        using the cluster name to create subdomain

        :return: The cluster_name_as_subdomain of this StackResponse.
        :rtype: bool
        """
        return self._cluster_name_as_subdomain

    @cluster_name_as_subdomain.setter
    def cluster_name_as_subdomain(self, cluster_name_as_subdomain):
        """
        Sets the cluster_name_as_subdomain of this StackResponse.
        using the cluster name to create subdomain

        :param cluster_name_as_subdomain: The cluster_name_as_subdomain of this StackResponse.
        :type: bool
        """

        self._cluster_name_as_subdomain = cluster_name_as_subdomain

    @property
    def hostgroup_name_as_hostname(self):
        """
        Gets the hostgroup_name_as_hostname of this StackResponse.
        using the hostgroup names to create hostnames

        :return: The hostgroup_name_as_hostname of this StackResponse.
        :rtype: bool
        """
        return self._hostgroup_name_as_hostname

    @hostgroup_name_as_hostname.setter
    def hostgroup_name_as_hostname(self, hostgroup_name_as_hostname):
        """
        Sets the hostgroup_name_as_hostname of this StackResponse.
        using the hostgroup names to create hostnames

        :param hostgroup_name_as_hostname: The hostgroup_name_as_hostname of this StackResponse.
        :type: bool
        """

        self._hostgroup_name_as_hostname = hostgroup_name_as_hostname

    @property
    def application_tags(self):
        """
        Gets the application_tags of this StackResponse.
        stack related application tags

        :return: The application_tags of this StackResponse.
        :rtype: dict(str, str)
        """
        return self._application_tags

    @application_tags.setter
    def application_tags(self, application_tags):
        """
        Sets the application_tags of this StackResponse.
        stack related application tags

        :param application_tags: The application_tags of this StackResponse.
        :type: dict(str, str)
        """

        self._application_tags = application_tags

    @property
    def user_defined_tags(self):
        """
        Gets the user_defined_tags of this StackResponse.
        stack related userdefined tags

        :return: The user_defined_tags of this StackResponse.
        :rtype: dict(str, str)
        """
        return self._user_defined_tags

    @user_defined_tags.setter
    def user_defined_tags(self, user_defined_tags):
        """
        Sets the user_defined_tags of this StackResponse.
        stack related userdefined tags

        :param user_defined_tags: The user_defined_tags of this StackResponse.
        :type: dict(str, str)
        """

        self._user_defined_tags = user_defined_tags

    @property
    def default_tags(self):
        """
        Gets the default_tags of this StackResponse.
        stack related default tags

        :return: The default_tags of this StackResponse.
        :rtype: dict(str, str)
        """
        return self._default_tags

    @default_tags.setter
    def default_tags(self, default_tags):
        """
        Sets the default_tags of this StackResponse.
        stack related default tags

        :param default_tags: The default_tags of this StackResponse.
        :type: dict(str, str)
        """

        self._default_tags = default_tags

    @property
    def custom_inputs(self):
        """
        Gets the custom_inputs of this StackResponse.
        Custom parameters as a json

        :return: The custom_inputs of this StackResponse.
        :rtype: dict(str, object)
        """
        return self._custom_inputs

    @custom_inputs.setter
    def custom_inputs(self, custom_inputs):
        """
        Sets the custom_inputs of this StackResponse.
        Custom parameters as a json

        :param custom_inputs: The custom_inputs of this StackResponse.
        :type: dict(str, object)
        """

        self._custom_inputs = custom_inputs

    @property
    def id(self):
        """
        Gets the id of this StackResponse.
        id of the stack

        :return: The id of this StackResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StackResponse.
        id of the stack

        :param id: The id of this StackResponse.
        :type: int
        """

        self._id = id

    @property
    def owner(self):
        """
        Gets the owner of this StackResponse.
        id of the resource owner that is provided by OAuth provider

        :return: The owner of this StackResponse.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this StackResponse.
        id of the resource owner that is provided by OAuth provider

        :param owner: The owner of this StackResponse.
        :type: str
        """

        self._owner = owner

    @property
    def account(self):
        """
        Gets the account of this StackResponse.
        account id of the resource owner that is provided by OAuth provider

        :return: The account of this StackResponse.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this StackResponse.
        account id of the resource owner that is provided by OAuth provider

        :param account: The account of this StackResponse.
        :type: str
        """

        self._account = account

    @property
    def status(self):
        """
        Gets the status of this StackResponse.
        status of the stack

        :return: The status of this StackResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this StackResponse.
        status of the stack

        :param status: The status of this StackResponse.
        :type: str
        """
        allowed_values = ["REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def cluster(self):
        """
        Gets the cluster of this StackResponse.

        :return: The cluster of this StackResponse.
        :rtype: ClusterResponse
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this StackResponse.

        :param cluster: The cluster of this StackResponse.
        :type: ClusterResponse
        """

        self._cluster = cluster

    @property
    def status_reason(self):
        """
        Gets the status_reason of this StackResponse.
        status message of the stack

        :return: The status_reason of this StackResponse.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """
        Sets the status_reason of this StackResponse.
        status message of the stack

        :param status_reason: The status_reason of this StackResponse.
        :type: str
        """

        self._status_reason = status_reason

    @property
    def credential(self):
        """
        Gets the credential of this StackResponse.
        stack related credential

        :return: The credential of this StackResponse.
        :rtype: CredentialResponse
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this StackResponse.
        stack related credential

        :param credential: The credential of this StackResponse.
        :type: CredentialResponse
        """

        self._credential = credential

    @property
    def network(self):
        """
        Gets the network of this StackResponse.
        stack related network

        :return: The network of this StackResponse.
        :rtype: NetworkResponse
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this StackResponse.
        stack related network

        :param network: The network of this StackResponse.
        :type: NetworkResponse
        """

        self._network = network

    @property
    def instance_groups(self):
        """
        Gets the instance_groups of this StackResponse.

        :return: The instance_groups of this StackResponse.
        :rtype: list[InstanceGroupResponse]
        """
        return self._instance_groups

    @instance_groups.setter
    def instance_groups(self, instance_groups):
        """
        Sets the instance_groups of this StackResponse.

        :param instance_groups: The instance_groups of this StackResponse.
        :type: list[InstanceGroupResponse]
        """

        self._instance_groups = instance_groups

    @property
    def failure_policy(self):
        """
        Gets the failure_policy of this StackResponse.
        failure policy in case of failures

        :return: The failure_policy of this StackResponse.
        :rtype: FailurePolicyResponse
        """
        return self._failure_policy

    @failure_policy.setter
    def failure_policy(self, failure_policy):
        """
        Sets the failure_policy of this StackResponse.
        failure policy in case of failures

        :param failure_policy: The failure_policy of this StackResponse.
        :type: FailurePolicyResponse
        """

        self._failure_policy = failure_policy

    @property
    def orchestrator(self):
        """
        Gets the orchestrator of this StackResponse.
        the details of the container orchestrator api to use

        :return: The orchestrator of this StackResponse.
        :rtype: OrchestratorResponse
        """
        return self._orchestrator

    @orchestrator.setter
    def orchestrator(self, orchestrator):
        """
        Sets the orchestrator of this StackResponse.
        the details of the container orchestrator api to use

        :param orchestrator: The orchestrator of this StackResponse.
        :type: OrchestratorResponse
        """

        self._orchestrator = orchestrator

    @property
    def created(self):
        """
        Gets the created of this StackResponse.
        creation time of the stack in long

        :return: The created of this StackResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this StackResponse.
        creation time of the stack in long

        :param created: The created of this StackResponse.
        :type: int
        """

        self._created = created

    @property
    def gateway_port(self):
        """
        Gets the gateway_port of this StackResponse.
        port of the gateway secured proxy

        :return: The gateway_port of this StackResponse.
        :rtype: int
        """
        return self._gateway_port

    @gateway_port.setter
    def gateway_port(self, gateway_port):
        """
        Sets the gateway_port of this StackResponse.
        port of the gateway secured proxy

        :param gateway_port: The gateway_port of this StackResponse.
        :type: int
        """

        self._gateway_port = gateway_port

    @property
    def image(self):
        """
        Gets the image of this StackResponse.
        image of the stack

        :return: The image of this StackResponse.
        :rtype: ImageJson
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this StackResponse.
        image of the stack

        :param image: The image of this StackResponse.
        :type: ImageJson
        """

        self._image = image

    @property
    def cloudbreak_details(self):
        """
        Gets the cloudbreak_details of this StackResponse.
        details of the Cloudbreak that provisioned the stack

        :return: The cloudbreak_details of this StackResponse.
        :rtype: CloudbreakDetailsJson
        """
        return self._cloudbreak_details

    @cloudbreak_details.setter
    def cloudbreak_details(self, cloudbreak_details):
        """
        Sets the cloudbreak_details of this StackResponse.
        details of the Cloudbreak that provisioned the stack

        :param cloudbreak_details: The cloudbreak_details of this StackResponse.
        :type: CloudbreakDetailsJson
        """

        self._cloudbreak_details = cloudbreak_details

    @property
    def flex_subscription(self):
        """
        Gets the flex_subscription of this StackResponse.
        the related flex subscription

        :return: The flex_subscription of this StackResponse.
        :rtype: FlexSubscriptionResponse
        """
        return self._flex_subscription

    @flex_subscription.setter
    def flex_subscription(self, flex_subscription):
        """
        Sets the flex_subscription of this StackResponse.
        the related flex subscription

        :param flex_subscription: The flex_subscription of this StackResponse.
        :type: FlexSubscriptionResponse
        """

        self._flex_subscription = flex_subscription

    @property
    def stack_authentication(self):
        """
        Gets the stack_authentication of this StackResponse.
        stack related authentication

        :return: The stack_authentication of this StackResponse.
        :rtype: StackAuthenticationResponse
        """
        return self._stack_authentication

    @stack_authentication.setter
    def stack_authentication(self, stack_authentication):
        """
        Sets the stack_authentication of this StackResponse.
        stack related authentication

        :param stack_authentication: The stack_authentication of this StackResponse.
        :type: StackAuthenticationResponse
        """

        self._stack_authentication = stack_authentication

    @property
    def node_count(self):
        """
        Gets the node_count of this StackResponse.
        node count of the stack

        :return: The node_count of this StackResponse.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """
        Sets the node_count of this StackResponse.
        node count of the stack

        :param node_count: The node_count of this StackResponse.
        :type: int
        """

        self._node_count = node_count

    @property
    def hardware_infos(self):
        """
        Gets the hardware_infos of this StackResponse.
        hardware information where pairing hostmetadata with instancemetadata

        :return: The hardware_infos of this StackResponse.
        :rtype: list[HardwareInfoResponse]
        """
        return self._hardware_infos

    @hardware_infos.setter
    def hardware_infos(self, hardware_infos):
        """
        Sets the hardware_infos of this StackResponse.
        hardware information where pairing hostmetadata with instancemetadata

        :param hardware_infos: The hardware_infos of this StackResponse.
        :type: list[HardwareInfoResponse]
        """

        self._hardware_infos = hardware_infos

    @property
    def cloudbreak_events(self):
        """
        Gets the cloudbreak_events of this StackResponse.
        related events for a cloudbreak stack

        :return: The cloudbreak_events of this StackResponse.
        :rtype: list[CloudbreakEvent]
        """
        return self._cloudbreak_events

    @cloudbreak_events.setter
    def cloudbreak_events(self, cloudbreak_events):
        """
        Sets the cloudbreak_events of this StackResponse.
        related events for a cloudbreak stack

        :param cloudbreak_events: The cloudbreak_events of this StackResponse.
        :type: list[CloudbreakEvent]
        """

        self._cloudbreak_events = cloudbreak_events

    @property
    def cloudbreak_usages(self):
        """
        Gets the cloudbreak_usages of this StackResponse.
        usage information for a specific stack

        :return: The cloudbreak_usages of this StackResponse.
        :rtype: list[CloudbreakUsage]
        """
        return self._cloudbreak_usages

    @cloudbreak_usages.setter
    def cloudbreak_usages(self, cloudbreak_usages):
        """
        Sets the cloudbreak_usages of this StackResponse.
        usage information for a specific stack

        :param cloudbreak_usages: The cloudbreak_usages of this StackResponse.
        :type: list[CloudbreakUsage]
        """

        self._cloudbreak_usages = cloudbreak_usages

    @property
    def cloud_platform(self):
        """
        Gets the cloud_platform of this StackResponse.
        type of cloud provider

        :return: The cloud_platform of this StackResponse.
        :rtype: str
        """
        return self._cloud_platform

    @cloud_platform.setter
    def cloud_platform(self, cloud_platform):
        """
        Sets the cloud_platform of this StackResponse.
        type of cloud provider

        :param cloud_platform: The cloud_platform of this StackResponse.
        :type: str
        """

        self._cloud_platform = cloud_platform

    @property
    def public(self):
        """
        Gets the public of this StackResponse.
        resource is visible in account

        :return: The public of this StackResponse.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """
        Sets the public of this StackResponse.
        resource is visible in account

        :param public: The public of this StackResponse.
        :type: bool
        """

        self._public = public

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
