# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AdlsCloudStorageParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'client_id': 'str',
        'credential': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'account_name': 'accountName',
        'client_id': 'clientId',
        'credential': 'credential',
        'tenant_id': 'tenantId'
    }

    def __init__(self, account_name=None, client_id=None, credential=None, tenant_id=None):
        """
        AdlsCloudStorageParameters - a model defined in Swagger
        """

        self._account_name = None
        self._client_id = None
        self._credential = None
        self._tenant_id = None

        self.account_name = account_name
        self.client_id = client_id
        self.credential = credential
        if tenant_id is not None:
          self.tenant_id = tenant_id

    @property
    def account_name(self):
        """
        Gets the account_name of this AdlsCloudStorageParameters.

        :return: The account_name of this AdlsCloudStorageParameters.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """
        Sets the account_name of this AdlsCloudStorageParameters.

        :param account_name: The account_name of this AdlsCloudStorageParameters.
        :type: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def client_id(self):
        """
        Gets the client_id of this AdlsCloudStorageParameters.

        :return: The client_id of this AdlsCloudStorageParameters.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this AdlsCloudStorageParameters.

        :param client_id: The client_id of this AdlsCloudStorageParameters.
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def credential(self):
        """
        Gets the credential of this AdlsCloudStorageParameters.

        :return: The credential of this AdlsCloudStorageParameters.
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this AdlsCloudStorageParameters.

        :param credential: The credential of this AdlsCloudStorageParameters.
        :type: str
        """
        if credential is None:
            raise ValueError("Invalid value for `credential`, must not be `None`")

        self._credential = credential

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this AdlsCloudStorageParameters.

        :return: The tenant_id of this AdlsCloudStorageParameters.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this AdlsCloudStorageParameters.

        :param tenant_id: The tenant_id of this AdlsCloudStorageParameters.
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AdlsCloudStorageParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
