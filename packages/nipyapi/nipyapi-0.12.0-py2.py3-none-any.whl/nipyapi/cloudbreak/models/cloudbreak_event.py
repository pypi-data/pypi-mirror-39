# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CloudbreakEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_type': 'str',
        'event_timestamp': 'int',
        'event_message': 'str',
        'owner': 'str',
        'account': 'str',
        'cloud': 'str',
        'region': 'str',
        'availability_zone': 'str',
        'blueprint_id': 'int',
        'blueprint_name': 'str',
        'cluster_id': 'int',
        'cluster_name': 'str',
        'stack_id': 'int',
        'stack_name': 'str',
        'stack_status': 'str',
        'node_count': 'int',
        'instance_group': 'str',
        'cluster_status': 'str'
    }

    attribute_map = {
        'event_type': 'eventType',
        'event_timestamp': 'eventTimestamp',
        'event_message': 'eventMessage',
        'owner': 'owner',
        'account': 'account',
        'cloud': 'cloud',
        'region': 'region',
        'availability_zone': 'availabilityZone',
        'blueprint_id': 'blueprintId',
        'blueprint_name': 'blueprintName',
        'cluster_id': 'clusterId',
        'cluster_name': 'clusterName',
        'stack_id': 'stackId',
        'stack_name': 'stackName',
        'stack_status': 'stackStatus',
        'node_count': 'nodeCount',
        'instance_group': 'instanceGroup',
        'cluster_status': 'clusterStatus'
    }

    def __init__(self, event_type=None, event_timestamp=None, event_message=None, owner=None, account=None, cloud=None, region=None, availability_zone=None, blueprint_id=None, blueprint_name=None, cluster_id=None, cluster_name=None, stack_id=None, stack_name=None, stack_status=None, node_count=None, instance_group=None, cluster_status=None):
        """
        CloudbreakEvent - a model defined in Swagger
        """

        self._event_type = None
        self._event_timestamp = None
        self._event_message = None
        self._owner = None
        self._account = None
        self._cloud = None
        self._region = None
        self._availability_zone = None
        self._blueprint_id = None
        self._blueprint_name = None
        self._cluster_id = None
        self._cluster_name = None
        self._stack_id = None
        self._stack_name = None
        self._stack_status = None
        self._node_count = None
        self._instance_group = None
        self._cluster_status = None

        if event_type is not None:
          self.event_type = event_type
        if event_timestamp is not None:
          self.event_timestamp = event_timestamp
        if event_message is not None:
          self.event_message = event_message
        if owner is not None:
          self.owner = owner
        if account is not None:
          self.account = account
        if cloud is not None:
          self.cloud = cloud
        if region is not None:
          self.region = region
        if availability_zone is not None:
          self.availability_zone = availability_zone
        if blueprint_id is not None:
          self.blueprint_id = blueprint_id
        if blueprint_name is not None:
          self.blueprint_name = blueprint_name
        if cluster_id is not None:
          self.cluster_id = cluster_id
        if cluster_name is not None:
          self.cluster_name = cluster_name
        if stack_id is not None:
          self.stack_id = stack_id
        if stack_name is not None:
          self.stack_name = stack_name
        if stack_status is not None:
          self.stack_status = stack_status
        if node_count is not None:
          self.node_count = node_count
        if instance_group is not None:
          self.instance_group = instance_group
        if cluster_status is not None:
          self.cluster_status = cluster_status

    @property
    def event_type(self):
        """
        Gets the event_type of this CloudbreakEvent.
        type of the event

        :return: The event_type of this CloudbreakEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """
        Sets the event_type of this CloudbreakEvent.
        type of the event

        :param event_type: The event_type of this CloudbreakEvent.
        :type: str
        """

        self._event_type = event_type

    @property
    def event_timestamp(self):
        """
        Gets the event_timestamp of this CloudbreakEvent.
        timestamp of the event

        :return: The event_timestamp of this CloudbreakEvent.
        :rtype: int
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """
        Sets the event_timestamp of this CloudbreakEvent.
        timestamp of the event

        :param event_timestamp: The event_timestamp of this CloudbreakEvent.
        :type: int
        """

        self._event_timestamp = event_timestamp

    @property
    def event_message(self):
        """
        Gets the event_message of this CloudbreakEvent.
        message of the event

        :return: The event_message of this CloudbreakEvent.
        :rtype: str
        """
        return self._event_message

    @event_message.setter
    def event_message(self, event_message):
        """
        Sets the event_message of this CloudbreakEvent.
        message of the event

        :param event_message: The event_message of this CloudbreakEvent.
        :type: str
        """

        self._event_message = event_message

    @property
    def owner(self):
        """
        Gets the owner of this CloudbreakEvent.
        id of the resource owner that is provided by OAuth provider

        :return: The owner of this CloudbreakEvent.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this CloudbreakEvent.
        id of the resource owner that is provided by OAuth provider

        :param owner: The owner of this CloudbreakEvent.
        :type: str
        """

        self._owner = owner

    @property
    def account(self):
        """
        Gets the account of this CloudbreakEvent.
        account id of the resource owner that is provided by OAuth provider

        :return: The account of this CloudbreakEvent.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this CloudbreakEvent.
        account id of the resource owner that is provided by OAuth provider

        :param account: The account of this CloudbreakEvent.
        :type: str
        """

        self._account = account

    @property
    def cloud(self):
        """
        Gets the cloud of this CloudbreakEvent.
        type of cloud provider

        :return: The cloud of this CloudbreakEvent.
        :rtype: str
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """
        Sets the cloud of this CloudbreakEvent.
        type of cloud provider

        :param cloud: The cloud of this CloudbreakEvent.
        :type: str
        """

        self._cloud = cloud

    @property
    def region(self):
        """
        Gets the region of this CloudbreakEvent.
        region of the stack

        :return: The region of this CloudbreakEvent.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this CloudbreakEvent.
        region of the stack

        :param region: The region of this CloudbreakEvent.
        :type: str
        """

        self._region = region

    @property
    def availability_zone(self):
        """
        Gets the availability_zone of this CloudbreakEvent.
        availability zone of the stack

        :return: The availability_zone of this CloudbreakEvent.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """
        Sets the availability_zone of this CloudbreakEvent.
        availability zone of the stack

        :param availability_zone: The availability_zone of this CloudbreakEvent.
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def blueprint_id(self):
        """
        Gets the blueprint_id of this CloudbreakEvent.
        blueprint id for the cluster

        :return: The blueprint_id of this CloudbreakEvent.
        :rtype: int
        """
        return self._blueprint_id

    @blueprint_id.setter
    def blueprint_id(self, blueprint_id):
        """
        Sets the blueprint_id of this CloudbreakEvent.
        blueprint id for the cluster

        :param blueprint_id: The blueprint_id of this CloudbreakEvent.
        :type: int
        """

        self._blueprint_id = blueprint_id

    @property
    def blueprint_name(self):
        """
        Gets the blueprint_name of this CloudbreakEvent.
        gathered from blueprintName field from the blueprint JSON

        :return: The blueprint_name of this CloudbreakEvent.
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """
        Sets the blueprint_name of this CloudbreakEvent.
        gathered from blueprintName field from the blueprint JSON

        :param blueprint_name: The blueprint_name of this CloudbreakEvent.
        :type: str
        """

        self._blueprint_name = blueprint_name

    @property
    def cluster_id(self):
        """
        Gets the cluster_id of this CloudbreakEvent.
        id of the cluster

        :return: The cluster_id of this CloudbreakEvent.
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """
        Sets the cluster_id of this CloudbreakEvent.
        id of the cluster

        :param cluster_id: The cluster_id of this CloudbreakEvent.
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this CloudbreakEvent.
        name of the cluster

        :return: The cluster_name of this CloudbreakEvent.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this CloudbreakEvent.
        name of the cluster

        :param cluster_name: The cluster_name of this CloudbreakEvent.
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def stack_id(self):
        """
        Gets the stack_id of this CloudbreakEvent.
        id of the stack

        :return: The stack_id of this CloudbreakEvent.
        :rtype: int
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """
        Sets the stack_id of this CloudbreakEvent.
        id of the stack

        :param stack_id: The stack_id of this CloudbreakEvent.
        :type: int
        """

        self._stack_id = stack_id

    @property
    def stack_name(self):
        """
        Gets the stack_name of this CloudbreakEvent.
        name of the stack

        :return: The stack_name of this CloudbreakEvent.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """
        Sets the stack_name of this CloudbreakEvent.
        name of the stack

        :param stack_name: The stack_name of this CloudbreakEvent.
        :type: str
        """

        self._stack_name = stack_name

    @property
    def stack_status(self):
        """
        Gets the stack_status of this CloudbreakEvent.
        status of the stack

        :return: The stack_status of this CloudbreakEvent.
        :rtype: str
        """
        return self._stack_status

    @stack_status.setter
    def stack_status(self, stack_status):
        """
        Sets the stack_status of this CloudbreakEvent.
        status of the stack

        :param stack_status: The stack_status of this CloudbreakEvent.
        :type: str
        """
        allowed_values = ["REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC"]
        if stack_status not in allowed_values:
            raise ValueError(
                "Invalid value for `stack_status` ({0}), must be one of {1}"
                .format(stack_status, allowed_values)
            )

        self._stack_status = stack_status

    @property
    def node_count(self):
        """
        Gets the node_count of this CloudbreakEvent.
        number of nodes

        :return: The node_count of this CloudbreakEvent.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """
        Sets the node_count of this CloudbreakEvent.
        number of nodes

        :param node_count: The node_count of this CloudbreakEvent.
        :type: int
        """

        self._node_count = node_count

    @property
    def instance_group(self):
        """
        Gets the instance_group of this CloudbreakEvent.
        name of the instance group

        :return: The instance_group of this CloudbreakEvent.
        :rtype: str
        """
        return self._instance_group

    @instance_group.setter
    def instance_group(self, instance_group):
        """
        Sets the instance_group of this CloudbreakEvent.
        name of the instance group

        :param instance_group: The instance_group of this CloudbreakEvent.
        :type: str
        """

        self._instance_group = instance_group

    @property
    def cluster_status(self):
        """
        Gets the cluster_status of this CloudbreakEvent.
        status of the cluster

        :return: The cluster_status of this CloudbreakEvent.
        :rtype: str
        """
        return self._cluster_status

    @cluster_status.setter
    def cluster_status(self, cluster_status):
        """
        Sets the cluster_status of this CloudbreakEvent.
        status of the cluster

        :param cluster_status: The cluster_status of this CloudbreakEvent.
        :type: str
        """
        allowed_values = ["REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC"]
        if cluster_status not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_status` ({0}), must be one of {1}"
                .format(cluster_status, allowed_values)
            )

        self._cluster_status = cluster_status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CloudbreakEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
