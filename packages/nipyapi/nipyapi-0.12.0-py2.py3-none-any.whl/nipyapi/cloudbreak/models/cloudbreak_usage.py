# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CloudbreakUsage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner': 'str',
        'username': 'str',
        'account': 'str',
        'day': 'str',
        'provider': 'str',
        'region': 'str',
        'availability_zone': 'str',
        'instance_hours': 'int',
        'stack_id': 'int',
        'stack_name': 'str',
        'costs': 'float',
        'instance_type': 'str',
        'instance_group': 'str',
        'blueprint_id': 'int',
        'blueprint_name': 'str',
        'duration': 'str',
        'instance_num': 'int',
        'peak': 'int',
        'flex_id': 'str',
        'stack_uuid': 'str'
    }

    attribute_map = {
        'owner': 'owner',
        'username': 'username',
        'account': 'account',
        'day': 'day',
        'provider': 'provider',
        'region': 'region',
        'availability_zone': 'availabilityZone',
        'instance_hours': 'instanceHours',
        'stack_id': 'stackId',
        'stack_name': 'stackName',
        'costs': 'costs',
        'instance_type': 'instanceType',
        'instance_group': 'instanceGroup',
        'blueprint_id': 'blueprintId',
        'blueprint_name': 'blueprintName',
        'duration': 'duration',
        'instance_num': 'instanceNum',
        'peak': 'peak',
        'flex_id': 'flexId',
        'stack_uuid': 'stackUuid'
    }

    def __init__(self, owner=None, username=None, account=None, day=None, provider=None, region=None, availability_zone=None, instance_hours=None, stack_id=None, stack_name=None, costs=None, instance_type=None, instance_group=None, blueprint_id=None, blueprint_name=None, duration=None, instance_num=None, peak=None, flex_id=None, stack_uuid=None):
        """
        CloudbreakUsage - a model defined in Swagger
        """

        self._owner = None
        self._username = None
        self._account = None
        self._day = None
        self._provider = None
        self._region = None
        self._availability_zone = None
        self._instance_hours = None
        self._stack_id = None
        self._stack_name = None
        self._costs = None
        self._instance_type = None
        self._instance_group = None
        self._blueprint_id = None
        self._blueprint_name = None
        self._duration = None
        self._instance_num = None
        self._peak = None
        self._flex_id = None
        self._stack_uuid = None

        if owner is not None:
          self.owner = owner
        if username is not None:
          self.username = username
        if account is not None:
          self.account = account
        if day is not None:
          self.day = day
        if provider is not None:
          self.provider = provider
        if region is not None:
          self.region = region
        if availability_zone is not None:
          self.availability_zone = availability_zone
        if instance_hours is not None:
          self.instance_hours = instance_hours
        if stack_id is not None:
          self.stack_id = stack_id
        if stack_name is not None:
          self.stack_name = stack_name
        if costs is not None:
          self.costs = costs
        if instance_type is not None:
          self.instance_type = instance_type
        if instance_group is not None:
          self.instance_group = instance_group
        if blueprint_id is not None:
          self.blueprint_id = blueprint_id
        if blueprint_name is not None:
          self.blueprint_name = blueprint_name
        if duration is not None:
          self.duration = duration
        if instance_num is not None:
          self.instance_num = instance_num
        if peak is not None:
          self.peak = peak
        if flex_id is not None:
          self.flex_id = flex_id
        if stack_uuid is not None:
          self.stack_uuid = stack_uuid

    @property
    def owner(self):
        """
        Gets the owner of this CloudbreakUsage.
        id of the resource owner that is provided by OAuth provider

        :return: The owner of this CloudbreakUsage.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this CloudbreakUsage.
        id of the resource owner that is provided by OAuth provider

        :param owner: The owner of this CloudbreakUsage.
        :type: str
        """

        self._owner = owner

    @property
    def username(self):
        """
        Gets the username of this CloudbreakUsage.
        ambari username

        :return: The username of this CloudbreakUsage.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this CloudbreakUsage.
        ambari username

        :param username: The username of this CloudbreakUsage.
        :type: str
        """

        self._username = username

    @property
    def account(self):
        """
        Gets the account of this CloudbreakUsage.
        account id of the resource owner that is provided by OAuth provider

        :return: The account of this CloudbreakUsage.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this CloudbreakUsage.
        account id of the resource owner that is provided by OAuth provider

        :param account: The account of this CloudbreakUsage.
        :type: str
        """

        self._account = account

    @property
    def day(self):
        """
        Gets the day of this CloudbreakUsage.
        the day the usage of resources happened

        :return: The day of this CloudbreakUsage.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """
        Sets the day of this CloudbreakUsage.
        the day the usage of resources happened

        :param day: The day of this CloudbreakUsage.
        :type: str
        """

        self._day = day

    @property
    def provider(self):
        """
        Gets the provider of this CloudbreakUsage.
        cloud provider of the stack

        :return: The provider of this CloudbreakUsage.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this CloudbreakUsage.
        cloud provider of the stack

        :param provider: The provider of this CloudbreakUsage.
        :type: str
        """

        self._provider = provider

    @property
    def region(self):
        """
        Gets the region of this CloudbreakUsage.
        region of the stack

        :return: The region of this CloudbreakUsage.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this CloudbreakUsage.
        region of the stack

        :param region: The region of this CloudbreakUsage.
        :type: str
        """

        self._region = region

    @property
    def availability_zone(self):
        """
        Gets the availability_zone of this CloudbreakUsage.
        availability zone of the stack

        :return: The availability_zone of this CloudbreakUsage.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """
        Sets the availability_zone of this CloudbreakUsage.
        availability zone of the stack

        :param availability_zone: The availability_zone of this CloudbreakUsage.
        :type: str
        """

        self._availability_zone = availability_zone

    @property
    def instance_hours(self):
        """
        Gets the instance_hours of this CloudbreakUsage.
        hours since the instance is running

        :return: The instance_hours of this CloudbreakUsage.
        :rtype: int
        """
        return self._instance_hours

    @instance_hours.setter
    def instance_hours(self, instance_hours):
        """
        Sets the instance_hours of this CloudbreakUsage.
        hours since the instance is running

        :param instance_hours: The instance_hours of this CloudbreakUsage.
        :type: int
        """

        self._instance_hours = instance_hours

    @property
    def stack_id(self):
        """
        Gets the stack_id of this CloudbreakUsage.
        id of the stack

        :return: The stack_id of this CloudbreakUsage.
        :rtype: int
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """
        Sets the stack_id of this CloudbreakUsage.
        id of the stack

        :param stack_id: The stack_id of this CloudbreakUsage.
        :type: int
        """

        self._stack_id = stack_id

    @property
    def stack_name(self):
        """
        Gets the stack_name of this CloudbreakUsage.
        name of the stack

        :return: The stack_name of this CloudbreakUsage.
        :rtype: str
        """
        return self._stack_name

    @stack_name.setter
    def stack_name(self, stack_name):
        """
        Sets the stack_name of this CloudbreakUsage.
        name of the stack

        :param stack_name: The stack_name of this CloudbreakUsage.
        :type: str
        """

        self._stack_name = stack_name

    @property
    def costs(self):
        """
        Gets the costs of this CloudbreakUsage.
        computed costs of instance usage

        :return: The costs of this CloudbreakUsage.
        :rtype: float
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """
        Sets the costs of this CloudbreakUsage.
        computed costs of instance usage

        :param costs: The costs of this CloudbreakUsage.
        :type: float
        """

        self._costs = costs

    @property
    def instance_type(self):
        """
        Gets the instance_type of this CloudbreakUsage.
        type of instance

        :return: The instance_type of this CloudbreakUsage.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """
        Sets the instance_type of this CloudbreakUsage.
        type of instance

        :param instance_type: The instance_type of this CloudbreakUsage.
        :type: str
        """

        self._instance_type = instance_type

    @property
    def instance_group(self):
        """
        Gets the instance_group of this CloudbreakUsage.
        group name of instance

        :return: The instance_group of this CloudbreakUsage.
        :rtype: str
        """
        return self._instance_group

    @instance_group.setter
    def instance_group(self, instance_group):
        """
        Sets the instance_group of this CloudbreakUsage.
        group name of instance

        :param instance_group: The instance_group of this CloudbreakUsage.
        :type: str
        """

        self._instance_group = instance_group

    @property
    def blueprint_id(self):
        """
        Gets the blueprint_id of this CloudbreakUsage.
        id of the blueprint

        :return: The blueprint_id of this CloudbreakUsage.
        :rtype: int
        """
        return self._blueprint_id

    @blueprint_id.setter
    def blueprint_id(self, blueprint_id):
        """
        Sets the blueprint_id of this CloudbreakUsage.
        id of the blueprint

        :param blueprint_id: The blueprint_id of this CloudbreakUsage.
        :type: int
        """

        self._blueprint_id = blueprint_id

    @property
    def blueprint_name(self):
        """
        Gets the blueprint_name of this CloudbreakUsage.
        name of the blueprint

        :return: The blueprint_name of this CloudbreakUsage.
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """
        Sets the blueprint_name of this CloudbreakUsage.
        name of the blueprint

        :param blueprint_name: The blueprint_name of this CloudbreakUsage.
        :type: str
        """

        self._blueprint_name = blueprint_name

    @property
    def duration(self):
        """
        Gets the duration of this CloudbreakUsage.
        time since the instances are running in millisec

        :return: The duration of this CloudbreakUsage.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this CloudbreakUsage.
        time since the instances are running in millisec

        :param duration: The duration of this CloudbreakUsage.
        :type: str
        """

        self._duration = duration

    @property
    def instance_num(self):
        """
        Gets the instance_num of this CloudbreakUsage.
        number of instances running

        :return: The instance_num of this CloudbreakUsage.
        :rtype: int
        """
        return self._instance_num

    @instance_num.setter
    def instance_num(self, instance_num):
        """
        Sets the instance_num of this CloudbreakUsage.
        number of instances running

        :param instance_num: The instance_num of this CloudbreakUsage.
        :type: int
        """

        self._instance_num = instance_num

    @property
    def peak(self):
        """
        Gets the peak of this CloudbreakUsage.
        maximum number of instances running

        :return: The peak of this CloudbreakUsage.
        :rtype: int
        """
        return self._peak

    @peak.setter
    def peak(self, peak):
        """
        Sets the peak of this CloudbreakUsage.
        maximum number of instances running

        :param peak: The peak of this CloudbreakUsage.
        :type: int
        """

        self._peak = peak

    @property
    def flex_id(self):
        """
        Gets the flex_id of this CloudbreakUsage.
        flex subscription id

        :return: The flex_id of this CloudbreakUsage.
        :rtype: str
        """
        return self._flex_id

    @flex_id.setter
    def flex_id(self, flex_id):
        """
        Sets the flex_id of this CloudbreakUsage.
        flex subscription id

        :param flex_id: The flex_id of this CloudbreakUsage.
        :type: str
        """

        self._flex_id = flex_id

    @property
    def stack_uuid(self):
        """
        Gets the stack_uuid of this CloudbreakUsage.
        unique id of the cluster

        :return: The stack_uuid of this CloudbreakUsage.
        :rtype: str
        """
        return self._stack_uuid

    @stack_uuid.setter
    def stack_uuid(self, stack_uuid):
        """
        Sets the stack_uuid of this CloudbreakUsage.
        unique id of the cluster

        :param stack_uuid: The stack_uuid of this CloudbreakUsage.
        :type: str
        """

        self._stack_uuid = stack_uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CloudbreakUsage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
