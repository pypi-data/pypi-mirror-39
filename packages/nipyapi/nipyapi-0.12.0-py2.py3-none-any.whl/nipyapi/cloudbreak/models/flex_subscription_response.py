# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlexSubscriptionResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'subscription_id': 'str',
        'smart_sense_subscription_id': 'int',
        'used_as_default': 'bool',
        'used_for_controller': 'bool',
        'id': 'int',
        'owner': 'str',
        'account': 'str',
        'public_in_account': 'bool',
        'smart_sense_subscription': 'SmartSenseSubscriptionJson'
    }

    attribute_map = {
        'name': 'name',
        'subscription_id': 'subscriptionId',
        'smart_sense_subscription_id': 'smartSenseSubscriptionId',
        'used_as_default': 'usedAsDefault',
        'used_for_controller': 'usedForController',
        'id': 'id',
        'owner': 'owner',
        'account': 'account',
        'public_in_account': 'publicInAccount',
        'smart_sense_subscription': 'smartSenseSubscription'
    }

    def __init__(self, name=None, subscription_id=None, smart_sense_subscription_id=None, used_as_default=False, used_for_controller=False, id=None, owner=None, account=None, public_in_account=False, smart_sense_subscription=None):
        """
        FlexSubscriptionResponse - a model defined in Swagger
        """

        self._name = None
        self._subscription_id = None
        self._smart_sense_subscription_id = None
        self._used_as_default = None
        self._used_for_controller = None
        self._id = None
        self._owner = None
        self._account = None
        self._public_in_account = None
        self._smart_sense_subscription = None

        self.name = name
        if subscription_id is not None:
          self.subscription_id = subscription_id
        if smart_sense_subscription_id is not None:
          self.smart_sense_subscription_id = smart_sense_subscription_id
        if used_as_default is not None:
          self.used_as_default = used_as_default
        if used_for_controller is not None:
          self.used_for_controller = used_for_controller
        if id is not None:
          self.id = id
        if owner is not None:
          self.owner = owner
        if account is not None:
          self.account = account
        if public_in_account is not None:
          self.public_in_account = public_in_account
        if smart_sense_subscription is not None:
          self.smart_sense_subscription = smart_sense_subscription

    @property
    def name(self):
        """
        Gets the name of this FlexSubscriptionResponse.
        name of the resource

        :return: The name of this FlexSubscriptionResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FlexSubscriptionResponse.
        name of the resource

        :param name: The name of this FlexSubscriptionResponse.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this FlexSubscriptionResponse.
        Identifier of Flex subscription.

        :return: The subscription_id of this FlexSubscriptionResponse.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this FlexSubscriptionResponse.
        Identifier of Flex subscription.

        :param subscription_id: The subscription_id of this FlexSubscriptionResponse.
        :type: str
        """
        if subscription_id is not None and not re.search('^(FLEX-[0-9]{10}$)', subscription_id):
            raise ValueError("Invalid value for `subscription_id`, must be a follow pattern or equal to `/^(FLEX-[0-9]{10}$)/`")

        self._subscription_id = subscription_id

    @property
    def smart_sense_subscription_id(self):
        """
        Gets the smart_sense_subscription_id of this FlexSubscriptionResponse.
        Identifier of SmartSense subscription Cloudbreak domain object json representation.

        :return: The smart_sense_subscription_id of this FlexSubscriptionResponse.
        :rtype: int
        """
        return self._smart_sense_subscription_id

    @smart_sense_subscription_id.setter
    def smart_sense_subscription_id(self, smart_sense_subscription_id):
        """
        Sets the smart_sense_subscription_id of this FlexSubscriptionResponse.
        Identifier of SmartSense subscription Cloudbreak domain object json representation.

        :param smart_sense_subscription_id: The smart_sense_subscription_id of this FlexSubscriptionResponse.
        :type: int
        """

        self._smart_sense_subscription_id = smart_sense_subscription_id

    @property
    def used_as_default(self):
        """
        Gets the used_as_default of this FlexSubscriptionResponse.
        true if the flex subscription is the default one

        :return: The used_as_default of this FlexSubscriptionResponse.
        :rtype: bool
        """
        return self._used_as_default

    @used_as_default.setter
    def used_as_default(self, used_as_default):
        """
        Sets the used_as_default of this FlexSubscriptionResponse.
        true if the flex subscription is the default one

        :param used_as_default: The used_as_default of this FlexSubscriptionResponse.
        :type: bool
        """

        self._used_as_default = used_as_default

    @property
    def used_for_controller(self):
        """
        Gets the used_for_controller of this FlexSubscriptionResponse.
        true if the flex subscription was used for the controller

        :return: The used_for_controller of this FlexSubscriptionResponse.
        :rtype: bool
        """
        return self._used_for_controller

    @used_for_controller.setter
    def used_for_controller(self, used_for_controller):
        """
        Sets the used_for_controller of this FlexSubscriptionResponse.
        true if the flex subscription was used for the controller

        :param used_for_controller: The used_for_controller of this FlexSubscriptionResponse.
        :type: bool
        """

        self._used_for_controller = used_for_controller

    @property
    def id(self):
        """
        Gets the id of this FlexSubscriptionResponse.
        id of the resource

        :return: The id of this FlexSubscriptionResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FlexSubscriptionResponse.
        id of the resource

        :param id: The id of this FlexSubscriptionResponse.
        :type: int
        """

        self._id = id

    @property
    def owner(self):
        """
        Gets the owner of this FlexSubscriptionResponse.
        id of the resource owner that is provided by OAuth provider

        :return: The owner of this FlexSubscriptionResponse.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this FlexSubscriptionResponse.
        id of the resource owner that is provided by OAuth provider

        :param owner: The owner of this FlexSubscriptionResponse.
        :type: str
        """

        self._owner = owner

    @property
    def account(self):
        """
        Gets the account of this FlexSubscriptionResponse.
        account id of the resource owner that is provided by OAuth provider

        :return: The account of this FlexSubscriptionResponse.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this FlexSubscriptionResponse.
        account id of the resource owner that is provided by OAuth provider

        :param account: The account of this FlexSubscriptionResponse.
        :type: str
        """

        self._account = account

    @property
    def public_in_account(self):
        """
        Gets the public_in_account of this FlexSubscriptionResponse.
        resource is visible in account

        :return: The public_in_account of this FlexSubscriptionResponse.
        :rtype: bool
        """
        return self._public_in_account

    @public_in_account.setter
    def public_in_account(self, public_in_account):
        """
        Sets the public_in_account of this FlexSubscriptionResponse.
        resource is visible in account

        :param public_in_account: The public_in_account of this FlexSubscriptionResponse.
        :type: bool
        """

        self._public_in_account = public_in_account

    @property
    def smart_sense_subscription(self):
        """
        Gets the smart_sense_subscription of this FlexSubscriptionResponse.
        The associated SmartSense subscription Cloudbreak domain object json representation.

        :return: The smart_sense_subscription of this FlexSubscriptionResponse.
        :rtype: SmartSenseSubscriptionJson
        """
        return self._smart_sense_subscription

    @smart_sense_subscription.setter
    def smart_sense_subscription(self, smart_sense_subscription):
        """
        Sets the smart_sense_subscription of this FlexSubscriptionResponse.
        The associated SmartSense subscription Cloudbreak domain object json representation.

        :param smart_sense_subscription: The smart_sense_subscription of this FlexSubscriptionResponse.
        :type: SmartSenseSubscriptionJson
        """

        self._smart_sense_subscription = smart_sense_subscription

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlexSubscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
