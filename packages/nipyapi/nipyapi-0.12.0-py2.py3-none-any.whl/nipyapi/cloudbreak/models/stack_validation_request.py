# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackValidationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_groups': 'list[HostGroupRequest]',
        'instance_groups': 'list[InstanceGroups]',
        'blueprint_id': 'int',
        'blueprint_name': 'str',
        'blueprint': 'BlueprintRequest',
        'network_id': 'int',
        'network': 'NetworkRequest',
        'platform': 'str',
        'credential_id': 'int',
        'credential_name': 'str',
        'credential': 'CredentialRequest',
        'file_system': 'FileSystem'
    }

    attribute_map = {
        'host_groups': 'hostGroups',
        'instance_groups': 'instanceGroups',
        'blueprint_id': 'blueprintId',
        'blueprint_name': 'blueprintName',
        'blueprint': 'blueprint',
        'network_id': 'networkId',
        'network': 'network',
        'platform': 'platform',
        'credential_id': 'credentialId',
        'credential_name': 'credentialName',
        'credential': 'credential',
        'file_system': 'fileSystem'
    }

    def __init__(self, host_groups=None, instance_groups=None, blueprint_id=None, blueprint_name=None, blueprint=None, network_id=None, network=None, platform=None, credential_id=None, credential_name=None, credential=None, file_system=None):
        """
        StackValidationRequest - a model defined in Swagger
        """

        self._host_groups = None
        self._instance_groups = None
        self._blueprint_id = None
        self._blueprint_name = None
        self._blueprint = None
        self._network_id = None
        self._network = None
        self._platform = None
        self._credential_id = None
        self._credential_name = None
        self._credential = None
        self._file_system = None

        self.host_groups = host_groups
        self.instance_groups = instance_groups
        if blueprint_id is not None:
          self.blueprint_id = blueprint_id
        if blueprint_name is not None:
          self.blueprint_name = blueprint_name
        if blueprint is not None:
          self.blueprint = blueprint
        if network_id is not None:
          self.network_id = network_id
        if network is not None:
          self.network = network
        self.platform = platform
        if credential_id is not None:
          self.credential_id = credential_id
        if credential_name is not None:
          self.credential_name = credential_name
        if credential is not None:
          self.credential = credential
        if file_system is not None:
          self.file_system = file_system

    @property
    def host_groups(self):
        """
        Gets the host_groups of this StackValidationRequest.
        collection of hostgroups

        :return: The host_groups of this StackValidationRequest.
        :rtype: list[HostGroupRequest]
        """
        return self._host_groups

    @host_groups.setter
    def host_groups(self, host_groups):
        """
        Sets the host_groups of this StackValidationRequest.
        collection of hostgroups

        :param host_groups: The host_groups of this StackValidationRequest.
        :type: list[HostGroupRequest]
        """
        if host_groups is None:
            raise ValueError("Invalid value for `host_groups`, must not be `None`")

        self._host_groups = host_groups

    @property
    def instance_groups(self):
        """
        Gets the instance_groups of this StackValidationRequest.
        collection of instance groupst

        :return: The instance_groups of this StackValidationRequest.
        :rtype: list[InstanceGroups]
        """
        return self._instance_groups

    @instance_groups.setter
    def instance_groups(self, instance_groups):
        """
        Sets the instance_groups of this StackValidationRequest.
        collection of instance groupst

        :param instance_groups: The instance_groups of this StackValidationRequest.
        :type: list[InstanceGroups]
        """
        if instance_groups is None:
            raise ValueError("Invalid value for `instance_groups`, must not be `None`")

        self._instance_groups = instance_groups

    @property
    def blueprint_id(self):
        """
        Gets the blueprint_id of this StackValidationRequest.
        blueprint id for the cluster

        :return: The blueprint_id of this StackValidationRequest.
        :rtype: int
        """
        return self._blueprint_id

    @blueprint_id.setter
    def blueprint_id(self, blueprint_id):
        """
        Sets the blueprint_id of this StackValidationRequest.
        blueprint id for the cluster

        :param blueprint_id: The blueprint_id of this StackValidationRequest.
        :type: int
        """

        self._blueprint_id = blueprint_id

    @property
    def blueprint_name(self):
        """
        Gets the blueprint_name of this StackValidationRequest.
        blueprint name for the cluster

        :return: The blueprint_name of this StackValidationRequest.
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """
        Sets the blueprint_name of this StackValidationRequest.
        blueprint name for the cluster

        :param blueprint_name: The blueprint_name of this StackValidationRequest.
        :type: str
        """

        self._blueprint_name = blueprint_name

    @property
    def blueprint(self):
        """
        Gets the blueprint of this StackValidationRequest.
        blueprint for the cluster

        :return: The blueprint of this StackValidationRequest.
        :rtype: BlueprintRequest
        """
        return self._blueprint

    @blueprint.setter
    def blueprint(self, blueprint):
        """
        Sets the blueprint of this StackValidationRequest.
        blueprint for the cluster

        :param blueprint: The blueprint of this StackValidationRequest.
        :type: BlueprintRequest
        """

        self._blueprint = blueprint

    @property
    def network_id(self):
        """
        Gets the network_id of this StackValidationRequest.
        network resource id for the stack

        :return: The network_id of this StackValidationRequest.
        :rtype: int
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """
        Sets the network_id of this StackValidationRequest.
        network resource id for the stack

        :param network_id: The network_id of this StackValidationRequest.
        :type: int
        """

        self._network_id = network_id

    @property
    def network(self):
        """
        Gets the network of this StackValidationRequest.
        stack related network

        :return: The network of this StackValidationRequest.
        :rtype: NetworkRequest
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this StackValidationRequest.
        stack related network

        :param network: The network of this StackValidationRequest.
        :type: NetworkRequest
        """

        self._network = network

    @property
    def platform(self):
        """
        Gets the platform of this StackValidationRequest.
        type of cloud provider

        :return: The platform of this StackValidationRequest.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this StackValidationRequest.
        type of cloud provider

        :param platform: The platform of this StackValidationRequest.
        :type: str
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")

        self._platform = platform

    @property
    def credential_id(self):
        """
        Gets the credential_id of this StackValidationRequest.
        credential resource id for the stack

        :return: The credential_id of this StackValidationRequest.
        :rtype: int
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """
        Sets the credential_id of this StackValidationRequest.
        credential resource id for the stack

        :param credential_id: The credential_id of this StackValidationRequest.
        :type: int
        """

        self._credential_id = credential_id

    @property
    def credential_name(self):
        """
        Gets the credential_name of this StackValidationRequest.
        credential resource name for the stack

        :return: The credential_name of this StackValidationRequest.
        :rtype: str
        """
        return self._credential_name

    @credential_name.setter
    def credential_name(self, credential_name):
        """
        Sets the credential_name of this StackValidationRequest.
        credential resource name for the stack

        :param credential_name: The credential_name of this StackValidationRequest.
        :type: str
        """

        self._credential_name = credential_name

    @property
    def credential(self):
        """
        Gets the credential of this StackValidationRequest.
        stack related credential

        :return: The credential of this StackValidationRequest.
        :rtype: CredentialRequest
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this StackValidationRequest.
        stack related credential

        :param credential: The credential of this StackValidationRequest.
        :type: CredentialRequest
        """

        self._credential = credential

    @property
    def file_system(self):
        """
        Gets the file_system of this StackValidationRequest.
        cluster related filesystem

        :return: The file_system of this StackValidationRequest.
        :rtype: FileSystem
        """
        return self._file_system

    @file_system.setter
    def file_system(self, file_system):
        """
        Sets the file_system of this StackValidationRequest.
        cluster related filesystem

        :param file_system: The file_system of this StackValidationRequest.
        :type: FileSystem
        """

        self._file_system = file_system

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackValidationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
