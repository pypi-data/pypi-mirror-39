# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlexUsageControllerJson(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'instance_id': 'str',
        'region': 'str',
        'provider': 'str',
        'smart_sense_id': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'instance_id': 'instanceId',
        'region': 'region',
        'provider': 'provider',
        'smart_sense_id': 'smartSenseId',
        'user_name': 'userName'
    }

    def __init__(self, guid=None, instance_id=None, region=None, provider=None, smart_sense_id=None, user_name=None):
        """
        FlexUsageControllerJson - a model defined in Swagger
        """

        self._guid = None
        self._instance_id = None
        self._region = None
        self._provider = None
        self._smart_sense_id = None
        self._user_name = None

        if guid is not None:
          self.guid = guid
        if instance_id is not None:
          self.instance_id = instance_id
        if region is not None:
          self.region = region
        if provider is not None:
          self.provider = provider
        if smart_sense_id is not None:
          self.smart_sense_id = smart_sense_id
        if user_name is not None:
          self.user_name = user_name

    @property
    def guid(self):
        """
        Gets the guid of this FlexUsageControllerJson.

        :return: The guid of this FlexUsageControllerJson.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this FlexUsageControllerJson.

        :param guid: The guid of this FlexUsageControllerJson.
        :type: str
        """

        self._guid = guid

    @property
    def instance_id(self):
        """
        Gets the instance_id of this FlexUsageControllerJson.

        :return: The instance_id of this FlexUsageControllerJson.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this FlexUsageControllerJson.

        :param instance_id: The instance_id of this FlexUsageControllerJson.
        :type: str
        """

        self._instance_id = instance_id

    @property
    def region(self):
        """
        Gets the region of this FlexUsageControllerJson.

        :return: The region of this FlexUsageControllerJson.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this FlexUsageControllerJson.

        :param region: The region of this FlexUsageControllerJson.
        :type: str
        """

        self._region = region

    @property
    def provider(self):
        """
        Gets the provider of this FlexUsageControllerJson.

        :return: The provider of this FlexUsageControllerJson.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this FlexUsageControllerJson.

        :param provider: The provider of this FlexUsageControllerJson.
        :type: str
        """

        self._provider = provider

    @property
    def smart_sense_id(self):
        """
        Gets the smart_sense_id of this FlexUsageControllerJson.

        :return: The smart_sense_id of this FlexUsageControllerJson.
        :rtype: str
        """
        return self._smart_sense_id

    @smart_sense_id.setter
    def smart_sense_id(self, smart_sense_id):
        """
        Sets the smart_sense_id of this FlexUsageControllerJson.

        :param smart_sense_id: The smart_sense_id of this FlexUsageControllerJson.
        :type: str
        """

        self._smart_sense_id = smart_sense_id

    @property
    def user_name(self):
        """
        Gets the user_name of this FlexUsageControllerJson.

        :return: The user_name of this FlexUsageControllerJson.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this FlexUsageControllerJson.

        :param user_name: The user_name of this FlexUsageControllerJson.
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlexUsageControllerJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
