# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackV2Request(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'general': 'GeneralSettings',
        'placement': 'PlacementSettings',
        'platform_variant': 'str',
        'ambari_version': 'str',
        'hdp_version': 'str',
        'parameters': 'dict(str, object)',
        'inputs': 'dict(str, object)',
        'custom_domain': 'CustomDomainSettings',
        'tags': 'Tags',
        'instance_groups': 'list[InstanceGroupsV2]',
        'failure_policy': 'FailurePolicyRequest',
        'stack_authentication': 'StackAuthentication',
        'network': 'NetworkV2Request',
        'image_settings': 'ImageSettings',
        'flex_id': 'int',
        'cluster': 'ClusterV2Request'
    }

    attribute_map = {
        'general': 'general',
        'placement': 'placement',
        'platform_variant': 'platformVariant',
        'ambari_version': 'ambariVersion',
        'hdp_version': 'hdpVersion',
        'parameters': 'parameters',
        'inputs': 'inputs',
        'custom_domain': 'customDomain',
        'tags': 'tags',
        'instance_groups': 'instanceGroups',
        'failure_policy': 'failurePolicy',
        'stack_authentication': 'stackAuthentication',
        'network': 'network',
        'image_settings': 'imageSettings',
        'flex_id': 'flexId',
        'cluster': 'cluster'
    }

    def __init__(self, general=None, placement=None, platform_variant=None, ambari_version=None, hdp_version=None, parameters=None, inputs=None, custom_domain=None, tags=None, instance_groups=None, failure_policy=None, stack_authentication=None, network=None, image_settings=None, flex_id=None, cluster=None):
        """
        StackV2Request - a model defined in Swagger
        """

        self._general = None
        self._placement = None
        self._platform_variant = None
        self._ambari_version = None
        self._hdp_version = None
        self._parameters = None
        self._inputs = None
        self._custom_domain = None
        self._tags = None
        self._instance_groups = None
        self._failure_policy = None
        self._stack_authentication = None
        self._network = None
        self._image_settings = None
        self._flex_id = None
        self._cluster = None

        self.general = general
        if placement is not None:
          self.placement = placement
        if platform_variant is not None:
          self.platform_variant = platform_variant
        if ambari_version is not None:
          self.ambari_version = ambari_version
        if hdp_version is not None:
          self.hdp_version = hdp_version
        if parameters is not None:
          self.parameters = parameters
        if inputs is not None:
          self.inputs = inputs
        if custom_domain is not None:
          self.custom_domain = custom_domain
        if tags is not None:
          self.tags = tags
        self.instance_groups = instance_groups
        if failure_policy is not None:
          self.failure_policy = failure_policy
        if stack_authentication is not None:
          self.stack_authentication = stack_authentication
        if network is not None:
          self.network = network
        if image_settings is not None:
          self.image_settings = image_settings
        if flex_id is not None:
          self.flex_id = flex_id
        if cluster is not None:
          self.cluster = cluster

    @property
    def general(self):
        """
        Gets the general of this StackV2Request.
        general configuration parameters for a cluster (e.g. 'name', 'credentialname')

        :return: The general of this StackV2Request.
        :rtype: GeneralSettings
        """
        return self._general

    @general.setter
    def general(self, general):
        """
        Sets the general of this StackV2Request.
        general configuration parameters for a cluster (e.g. 'name', 'credentialname')

        :param general: The general of this StackV2Request.
        :type: GeneralSettings
        """
        if general is None:
            raise ValueError("Invalid value for `general`, must not be `None`")

        self._general = general

    @property
    def placement(self):
        """
        Gets the placement of this StackV2Request.
        placement configuration parameters for a cluster (e.g. 'region', 'availabilityZone')

        :return: The placement of this StackV2Request.
        :rtype: PlacementSettings
        """
        return self._placement

    @placement.setter
    def placement(self, placement):
        """
        Sets the placement of this StackV2Request.
        placement configuration parameters for a cluster (e.g. 'region', 'availabilityZone')

        :param placement: The placement of this StackV2Request.
        :type: PlacementSettings
        """

        self._placement = placement

    @property
    def platform_variant(self):
        """
        Gets the platform_variant of this StackV2Request.
        cloud provider api variant

        :return: The platform_variant of this StackV2Request.
        :rtype: str
        """
        return self._platform_variant

    @platform_variant.setter
    def platform_variant(self, platform_variant):
        """
        Sets the platform_variant of this StackV2Request.
        cloud provider api variant

        :param platform_variant: The platform_variant of this StackV2Request.
        :type: str
        """

        self._platform_variant = platform_variant

    @property
    def ambari_version(self):
        """
        Gets the ambari_version of this StackV2Request.
        specific version of ambari

        :return: The ambari_version of this StackV2Request.
        :rtype: str
        """
        return self._ambari_version

    @ambari_version.setter
    def ambari_version(self, ambari_version):
        """
        Sets the ambari_version of this StackV2Request.
        specific version of ambari

        :param ambari_version: The ambari_version of this StackV2Request.
        :type: str
        """

        self._ambari_version = ambari_version

    @property
    def hdp_version(self):
        """
        Gets the hdp_version of this StackV2Request.
        specific version of HDP

        :return: The hdp_version of this StackV2Request.
        :rtype: str
        """
        return self._hdp_version

    @hdp_version.setter
    def hdp_version(self, hdp_version):
        """
        Sets the hdp_version of this StackV2Request.
        specific version of HDP

        :param hdp_version: The hdp_version of this StackV2Request.
        :type: str
        """

        self._hdp_version = hdp_version

    @property
    def parameters(self):
        """
        Gets the parameters of this StackV2Request.
        additional cloud specific parameters for stack

        :return: The parameters of this StackV2Request.
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this StackV2Request.
        additional cloud specific parameters for stack

        :param parameters: The parameters of this StackV2Request.
        :type: dict(str, object)
        """

        self._parameters = parameters

    @property
    def inputs(self):
        """
        Gets the inputs of this StackV2Request.
        dynamic properties

        :return: The inputs of this StackV2Request.
        :rtype: dict(str, object)
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """
        Sets the inputs of this StackV2Request.
        dynamic properties

        :param inputs: The inputs of this StackV2Request.
        :type: dict(str, object)
        """

        self._inputs = inputs

    @property
    def custom_domain(self):
        """
        Gets the custom_domain of this StackV2Request.
        settings related to custom domain names

        :return: The custom_domain of this StackV2Request.
        :rtype: CustomDomainSettings
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """
        Sets the custom_domain of this StackV2Request.
        settings related to custom domain names

        :param custom_domain: The custom_domain of this StackV2Request.
        :type: CustomDomainSettings
        """

        self._custom_domain = custom_domain

    @property
    def tags(self):
        """
        Gets the tags of this StackV2Request.
        stack related tags

        :return: The tags of this StackV2Request.
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StackV2Request.
        stack related tags

        :param tags: The tags of this StackV2Request.
        :type: Tags
        """

        self._tags = tags

    @property
    def instance_groups(self):
        """
        Gets the instance_groups of this StackV2Request.
        collection of instance groupst

        :return: The instance_groups of this StackV2Request.
        :rtype: list[InstanceGroupsV2]
        """
        return self._instance_groups

    @instance_groups.setter
    def instance_groups(self, instance_groups):
        """
        Sets the instance_groups of this StackV2Request.
        collection of instance groupst

        :param instance_groups: The instance_groups of this StackV2Request.
        :type: list[InstanceGroupsV2]
        """
        if instance_groups is None:
            raise ValueError("Invalid value for `instance_groups`, must not be `None`")

        self._instance_groups = instance_groups

    @property
    def failure_policy(self):
        """
        Gets the failure_policy of this StackV2Request.
        failure policy in case of failures

        :return: The failure_policy of this StackV2Request.
        :rtype: FailurePolicyRequest
        """
        return self._failure_policy

    @failure_policy.setter
    def failure_policy(self, failure_policy):
        """
        Sets the failure_policy of this StackV2Request.
        failure policy in case of failures

        :param failure_policy: The failure_policy of this StackV2Request.
        :type: FailurePolicyRequest
        """

        self._failure_policy = failure_policy

    @property
    def stack_authentication(self):
        """
        Gets the stack_authentication of this StackV2Request.
        stack related authentication

        :return: The stack_authentication of this StackV2Request.
        :rtype: StackAuthentication
        """
        return self._stack_authentication

    @stack_authentication.setter
    def stack_authentication(self, stack_authentication):
        """
        Sets the stack_authentication of this StackV2Request.
        stack related authentication

        :param stack_authentication: The stack_authentication of this StackV2Request.
        :type: StackAuthentication
        """

        self._stack_authentication = stack_authentication

    @property
    def network(self):
        """
        Gets the network of this StackV2Request.
        stack related network

        :return: The network of this StackV2Request.
        :rtype: NetworkV2Request
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this StackV2Request.
        stack related network

        :param network: The network of this StackV2Request.
        :type: NetworkV2Request
        """

        self._network = network

    @property
    def image_settings(self):
        """
        Gets the image_settings of this StackV2Request.
        settings for custom images

        :return: The image_settings of this StackV2Request.
        :rtype: ImageSettings
        """
        return self._image_settings

    @image_settings.setter
    def image_settings(self, image_settings):
        """
        Sets the image_settings of this StackV2Request.
        settings for custom images

        :param image_settings: The image_settings of this StackV2Request.
        :type: ImageSettings
        """

        self._image_settings = image_settings

    @property
    def flex_id(self):
        """
        Gets the flex_id of this StackV2Request.
        id of the related flex subscription

        :return: The flex_id of this StackV2Request.
        :rtype: int
        """
        return self._flex_id

    @flex_id.setter
    def flex_id(self, flex_id):
        """
        Sets the flex_id of this StackV2Request.
        id of the related flex subscription

        :param flex_id: The flex_id of this StackV2Request.
        :type: int
        """

        self._flex_id = flex_id

    @property
    def cluster(self):
        """
        Gets the cluster of this StackV2Request.
        cluster request object on stack

        :return: The cluster of this StackV2Request.
        :rtype: ClusterV2Request
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this StackV2Request.
        cluster request object on stack

        :param cluster: The cluster of this StackV2Request.
        :type: ClusterV2Request
        """

        self._cluster = cluster

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackV2Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
