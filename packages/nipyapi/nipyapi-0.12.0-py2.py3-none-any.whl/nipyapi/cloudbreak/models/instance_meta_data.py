# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InstanceMetaData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'private_ip': 'str',
        'public_ip': 'str',
        'ssh_port': 'int',
        'instance_id': 'str',
        'ambari_server': 'bool',
        'discovery_fqdn': 'str',
        'instance_group': 'str',
        'instance_status': 'str',
        'instance_type': 'str'
    }

    attribute_map = {
        'private_ip': 'privateIp',
        'public_ip': 'publicIp',
        'ssh_port': 'sshPort',
        'instance_id': 'instanceId',
        'ambari_server': 'ambariServer',
        'discovery_fqdn': 'discoveryFQDN',
        'instance_group': 'instanceGroup',
        'instance_status': 'instanceStatus',
        'instance_type': 'instanceType'
    }

    def __init__(self, private_ip=None, public_ip=None, ssh_port=None, instance_id=None, ambari_server=False, discovery_fqdn=None, instance_group=None, instance_status=None, instance_type=None):
        """
        InstanceMetaData - a model defined in Swagger
        """

        self._private_ip = None
        self._public_ip = None
        self._ssh_port = None
        self._instance_id = None
        self._ambari_server = None
        self._discovery_fqdn = None
        self._instance_group = None
        self._instance_status = None
        self._instance_type = None

        if private_ip is not None:
          self.private_ip = private_ip
        if public_ip is not None:
          self.public_ip = public_ip
        if ssh_port is not None:
          self.ssh_port = ssh_port
        if instance_id is not None:
          self.instance_id = instance_id
        if ambari_server is not None:
          self.ambari_server = ambari_server
        if discovery_fqdn is not None:
          self.discovery_fqdn = discovery_fqdn
        if instance_group is not None:
          self.instance_group = instance_group
        if instance_status is not None:
          self.instance_status = instance_status
        if instance_type is not None:
          self.instance_type = instance_type

    @property
    def private_ip(self):
        """
        Gets the private_ip of this InstanceMetaData.
        private ip of the insctance

        :return: The private_ip of this InstanceMetaData.
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """
        Sets the private_ip of this InstanceMetaData.
        private ip of the insctance

        :param private_ip: The private_ip of this InstanceMetaData.
        :type: str
        """

        self._private_ip = private_ip

    @property
    def public_ip(self):
        """
        Gets the public_ip of this InstanceMetaData.
        public ip of the instance

        :return: The public_ip of this InstanceMetaData.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """
        Sets the public_ip of this InstanceMetaData.
        public ip of the instance

        :param public_ip: The public_ip of this InstanceMetaData.
        :type: str
        """

        self._public_ip = public_ip

    @property
    def ssh_port(self):
        """
        Gets the ssh_port of this InstanceMetaData.

        :return: The ssh_port of this InstanceMetaData.
        :rtype: int
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """
        Sets the ssh_port of this InstanceMetaData.

        :param ssh_port: The ssh_port of this InstanceMetaData.
        :type: int
        """

        self._ssh_port = ssh_port

    @property
    def instance_id(self):
        """
        Gets the instance_id of this InstanceMetaData.
        id of the instance

        :return: The instance_id of this InstanceMetaData.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this InstanceMetaData.
        id of the instance

        :param instance_id: The instance_id of this InstanceMetaData.
        :type: str
        """

        self._instance_id = instance_id

    @property
    def ambari_server(self):
        """
        Gets the ambari_server of this InstanceMetaData.
        ambari server address

        :return: The ambari_server of this InstanceMetaData.
        :rtype: bool
        """
        return self._ambari_server

    @ambari_server.setter
    def ambari_server(self, ambari_server):
        """
        Sets the ambari_server of this InstanceMetaData.
        ambari server address

        :param ambari_server: The ambari_server of this InstanceMetaData.
        :type: bool
        """

        self._ambari_server = ambari_server

    @property
    def discovery_fqdn(self):
        """
        Gets the discovery_fqdn of this InstanceMetaData.
        the fully qualified domain name of the node in the service discovery cluster

        :return: The discovery_fqdn of this InstanceMetaData.
        :rtype: str
        """
        return self._discovery_fqdn

    @discovery_fqdn.setter
    def discovery_fqdn(self, discovery_fqdn):
        """
        Sets the discovery_fqdn of this InstanceMetaData.
        the fully qualified domain name of the node in the service discovery cluster

        :param discovery_fqdn: The discovery_fqdn of this InstanceMetaData.
        :type: str
        """

        self._discovery_fqdn = discovery_fqdn

    @property
    def instance_group(self):
        """
        Gets the instance_group of this InstanceMetaData.
        name of the instance group

        :return: The instance_group of this InstanceMetaData.
        :rtype: str
        """
        return self._instance_group

    @instance_group.setter
    def instance_group(self, instance_group):
        """
        Sets the instance_group of this InstanceMetaData.
        name of the instance group

        :param instance_group: The instance_group of this InstanceMetaData.
        :type: str
        """

        self._instance_group = instance_group

    @property
    def instance_status(self):
        """
        Gets the instance_status of this InstanceMetaData.
        status of the instance

        :return: The instance_status of this InstanceMetaData.
        :rtype: str
        """
        return self._instance_status

    @instance_status.setter
    def instance_status(self, instance_status):
        """
        Sets the instance_status of this InstanceMetaData.
        status of the instance

        :param instance_status: The instance_status of this InstanceMetaData.
        :type: str
        """
        allowed_values = ["REQUESTED", "CREATED", "UNREGISTERED", "REGISTERED", "DECOMMISSIONED", "TERMINATED", "DELETED_ON_PROVIDER_SIDE", "FAILED", "STOPPED"]
        if instance_status not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_status` ({0}), must be one of {1}"
                .format(instance_status, allowed_values)
            )

        self._instance_status = instance_status

    @property
    def instance_type(self):
        """
        Gets the instance_type of this InstanceMetaData.
        type of the instance

        :return: The instance_type of this InstanceMetaData.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """
        Sets the instance_type of this InstanceMetaData.
        type of the instance

        :param instance_type: The instance_type of this InstanceMetaData.
        :type: str
        """
        allowed_values = ["GATEWAY", "GATEWAY_PRIMARY", "CORE"]
        if instance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_type` ({0}), must be one of {1}"
                .format(instance_type, allowed_values)
            )

        self._instance_type = instance_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InstanceMetaData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
