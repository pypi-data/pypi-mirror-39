# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SecurityRuleRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subnet': 'str',
        'ports': 'str',
        'protocol': 'str',
        'modifiable': 'bool'
    }

    attribute_map = {
        'subnet': 'subnet',
        'ports': 'ports',
        'protocol': 'protocol',
        'modifiable': 'modifiable'
    }

    def __init__(self, subnet=None, ports=None, protocol=None, modifiable=False):
        """
        SecurityRuleRequest - a model defined in Swagger
        """

        self._subnet = None
        self._ports = None
        self._protocol = None
        self._modifiable = None

        self.subnet = subnet
        self.ports = ports
        self.protocol = protocol
        if modifiable is not None:
          self.modifiable = modifiable

    @property
    def subnet(self):
        """
        Gets the subnet of this SecurityRuleRequest.
        definition of allowed subnet in CIDR format

        :return: The subnet of this SecurityRuleRequest.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """
        Sets the subnet of this SecurityRuleRequest.
        definition of allowed subnet in CIDR format

        :param subnet: The subnet of this SecurityRuleRequest.
        :type: str
        """
        if subnet is None:
            raise ValueError("Invalid value for `subnet`, must not be `None`")
        if subnet is not None and not re.search('^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$', subnet):
            raise ValueError("Invalid value for `subnet`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$/`")

        self._subnet = subnet

    @property
    def ports(self):
        """
        Gets the ports of this SecurityRuleRequest.
        comma separated list of accessible ports

        :return: The ports of this SecurityRuleRequest.
        :rtype: str
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """
        Sets the ports of this SecurityRuleRequest.
        comma separated list of accessible ports

        :param ports: The ports of this SecurityRuleRequest.
        :type: str
        """
        if ports is None:
            raise ValueError("Invalid value for `ports`, must not be `None`")
        if ports is not None and not re.search('^[1-9][0-9]{0,4}(-[1-9][0-9]{0,4}){0,1}(,[1-9][0-9]{0,4}(-[1-9][0-9]{0,4}){0,1})*$', ports):
            raise ValueError("Invalid value for `ports`, must be a follow pattern or equal to `/^[1-9][0-9]{0,4}(-[1-9][0-9]{0,4}){0,1}(,[1-9][0-9]{0,4}(-[1-9][0-9]{0,4}){0,1})*$/`")

        self._ports = ports

    @property
    def protocol(self):
        """
        Gets the protocol of this SecurityRuleRequest.
        protocol of the rule

        :return: The protocol of this SecurityRuleRequest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this SecurityRuleRequest.
        protocol of the rule

        :param protocol: The protocol of this SecurityRuleRequest.
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")

        self._protocol = protocol

    @property
    def modifiable(self):
        """
        Gets the modifiable of this SecurityRuleRequest.
        flag for making the rule modifiable

        :return: The modifiable of this SecurityRuleRequest.
        :rtype: bool
        """
        return self._modifiable

    @modifiable.setter
    def modifiable(self, modifiable):
        """
        Sets the modifiable of this SecurityRuleRequest.
        flag for making the rule modifiable

        :param modifiable: The modifiable of this SecurityRuleRequest.
        :type: bool
        """

        self._modifiable = modifiable

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SecurityRuleRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
