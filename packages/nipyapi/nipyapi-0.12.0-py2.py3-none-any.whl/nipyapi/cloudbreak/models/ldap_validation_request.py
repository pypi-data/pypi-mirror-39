# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LdapValidationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_host': 'str',
        'server_port': 'int',
        'protocol': 'str',
        'bind_dn': 'str',
        'bind_password': 'str'
    }

    attribute_map = {
        'server_host': 'serverHost',
        'server_port': 'serverPort',
        'protocol': 'protocol',
        'bind_dn': 'bindDn',
        'bind_password': 'bindPassword'
    }

    def __init__(self, server_host=None, server_port=None, protocol=None, bind_dn=None, bind_password=None):
        """
        LdapValidationRequest - a model defined in Swagger
        """

        self._server_host = None
        self._server_port = None
        self._protocol = None
        self._bind_dn = None
        self._bind_password = None

        self.server_host = server_host
        self.server_port = server_port
        if protocol is not None:
          self.protocol = protocol
        self.bind_dn = bind_dn
        self.bind_password = bind_password

    @property
    def server_host(self):
        """
        Gets the server_host of this LdapValidationRequest.
        public host or IP address of LDAP server

        :return: The server_host of this LdapValidationRequest.
        :rtype: str
        """
        return self._server_host

    @server_host.setter
    def server_host(self, server_host):
        """
        Sets the server_host of this LdapValidationRequest.
        public host or IP address of LDAP server

        :param server_host: The server_host of this LdapValidationRequest.
        :type: str
        """
        if server_host is None:
            raise ValueError("Invalid value for `server_host`, must not be `None`")

        self._server_host = server_host

    @property
    def server_port(self):
        """
        Gets the server_port of this LdapValidationRequest.
        port of LDAP server (typically: 389 or 636 for LDAPS)

        :return: The server_port of this LdapValidationRequest.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """
        Sets the server_port of this LdapValidationRequest.
        port of LDAP server (typically: 389 or 636 for LDAPS)

        :param server_port: The server_port of this LdapValidationRequest.
        :type: int
        """
        if server_port is None:
            raise ValueError("Invalid value for `server_port`, must not be `None`")
        if server_port is not None and server_port > 65535:
            raise ValueError("Invalid value for `server_port`, must be a value less than or equal to `65535`")
        if server_port is not None and server_port < 1:
            raise ValueError("Invalid value for `server_port`, must be a value greater than or equal to `1`")

        self._server_port = server_port

    @property
    def protocol(self):
        """
        Gets the protocol of this LdapValidationRequest.
        determines the protocol (LDAP or LDAP over SSL)

        :return: The protocol of this LdapValidationRequest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this LdapValidationRequest.
        determines the protocol (LDAP or LDAP over SSL)

        :param protocol: The protocol of this LdapValidationRequest.
        :type: str
        """

        self._protocol = protocol

    @property
    def bind_dn(self):
        """
        Gets the bind_dn of this LdapValidationRequest.
        bind distinguished name for connection test and group search (e.g. cn=admin,dc=example,dc=org)

        :return: The bind_dn of this LdapValidationRequest.
        :rtype: str
        """
        return self._bind_dn

    @bind_dn.setter
    def bind_dn(self, bind_dn):
        """
        Sets the bind_dn of this LdapValidationRequest.
        bind distinguished name for connection test and group search (e.g. cn=admin,dc=example,dc=org)

        :param bind_dn: The bind_dn of this LdapValidationRequest.
        :type: str
        """
        if bind_dn is None:
            raise ValueError("Invalid value for `bind_dn`, must not be `None`")

        self._bind_dn = bind_dn

    @property
    def bind_password(self):
        """
        Gets the bind_password of this LdapValidationRequest.
        password for the provided bind DN

        :return: The bind_password of this LdapValidationRequest.
        :rtype: str
        """
        return self._bind_password

    @bind_password.setter
    def bind_password(self, bind_password):
        """
        Sets the bind_password of this LdapValidationRequest.
        password for the provided bind DN

        :param bind_password: The bind_password of this LdapValidationRequest.
        :type: str
        """
        if bind_password is None:
            raise ValueError("Invalid value for `bind_password`, must not be `None`")

        self._bind_password = bind_password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LdapValidationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
