# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RecipeResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'recipe_type': 'str',
        'content': 'str',
        'uri': 'str',
        'id': 'int',
        'public': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'recipe_type': 'recipeType',
        'content': 'content',
        'uri': 'uri',
        'id': 'id',
        'public': 'public'
    }

    def __init__(self, name=None, description=None, recipe_type=None, content=None, uri=None, id=None, public=False):
        """
        RecipeResponse - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._recipe_type = None
        self._content = None
        self._uri = None
        self._id = None
        self._public = None

        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        self.recipe_type = recipe_type
        if content is not None:
          self.content = content
        if uri is not None:
          self.uri = uri
        if id is not None:
          self.id = id
        if public is not None:
          self.public = public

    @property
    def name(self):
        """
        Gets the name of this RecipeResponse.
        name of the resource

        :return: The name of this RecipeResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RecipeResponse.
        name of the resource

        :param name: The name of this RecipeResponse.
        :type: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 5:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `5`")
        if name is not None and not re.search('(^[a-z][-a-z0-9]*[a-z0-9]$)', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(^[a-z][-a-z0-9]*[a-z0-9]$)/`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this RecipeResponse.
        description of the resource

        :return: The description of this RecipeResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RecipeResponse.
        description of the resource

        :param description: The description of this RecipeResponse.
        :type: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def recipe_type(self):
        """
        Gets the recipe_type of this RecipeResponse.
        type of recipe

        :return: The recipe_type of this RecipeResponse.
        :rtype: str
        """
        return self._recipe_type

    @recipe_type.setter
    def recipe_type(self, recipe_type):
        """
        Sets the recipe_type of this RecipeResponse.
        type of recipe

        :param recipe_type: The recipe_type of this RecipeResponse.
        :type: str
        """
        if recipe_type is None:
            raise ValueError("Invalid value for `recipe_type`, must not be `None`")
        allowed_values = ["PRE_AMBARI_START", "PRE_TERMINATION", "POST_AMBARI_START", "POST_CLUSTER_INSTALL"]
        if recipe_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recipe_type` ({0}), must be one of {1}"
                .format(recipe_type, allowed_values)
            )

        self._recipe_type = recipe_type

    @property
    def content(self):
        """
        Gets the content of this RecipeResponse.
        content of recipe

        :return: The content of this RecipeResponse.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this RecipeResponse.
        content of recipe

        :param content: The content of this RecipeResponse.
        :type: str
        """

        self._content = content

    @property
    def uri(self):
        """
        Gets the uri of this RecipeResponse.
        recipe uri

        :return: The uri of this RecipeResponse.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this RecipeResponse.
        recipe uri

        :param uri: The uri of this RecipeResponse.
        :type: str
        """

        self._uri = uri

    @property
    def id(self):
        """
        Gets the id of this RecipeResponse.
        id of the resource

        :return: The id of this RecipeResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RecipeResponse.
        id of the resource

        :param id: The id of this RecipeResponse.
        :type: int
        """

        self._id = id

    @property
    def public(self):
        """
        Gets the public of this RecipeResponse.
        resource is visible in account

        :return: The public of this RecipeResponse.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """
        Sets the public of this RecipeResponse.
        resource is visible in account

        :param public: The public of this RecipeResponse.
        :type: bool
        """

        self._public = public

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RecipeResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
