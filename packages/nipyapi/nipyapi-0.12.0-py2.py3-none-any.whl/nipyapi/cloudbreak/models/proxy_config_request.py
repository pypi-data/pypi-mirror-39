# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ProxyConfigRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'server_host': 'str',
        'server_port': 'int',
        'protocol': 'str',
        'user_name': 'str',
        'password': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'server_host': 'serverHost',
        'server_port': 'serverPort',
        'protocol': 'protocol',
        'user_name': 'userName',
        'password': 'password'
    }

    def __init__(self, name=None, description=None, server_host=None, server_port=None, protocol=None, user_name=None, password=None):
        """
        ProxyConfigRequest - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._server_host = None
        self._server_port = None
        self._protocol = None
        self._user_name = None
        self._password = None

        self.name = name
        if description is not None:
          self.description = description
        self.server_host = server_host
        self.server_port = server_port
        self.protocol = protocol
        if user_name is not None:
          self.user_name = user_name
        if password is not None:
          self.password = password

    @property
    def name(self):
        """
        Gets the name of this ProxyConfigRequest.
        Name of the proxy configuration resource

        :return: The name of this ProxyConfigRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProxyConfigRequest.
        Name of the proxy configuration resource

        :param name: The name of this ProxyConfigRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 4:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `4`")
        if name is not None and not re.search('(^[a-z][-a-z0-9]*[a-z0-9]$)', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(^[a-z][-a-z0-9]*[a-z0-9]$)/`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ProxyConfigRequest.
        description of the resource

        :return: The description of this ProxyConfigRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProxyConfigRequest.
        description of the resource

        :param description: The description of this ProxyConfigRequest.
        :type: str
        """

        self._description = description

    @property
    def server_host(self):
        """
        Gets the server_host of this ProxyConfigRequest.
        host or IP address of proxy server

        :return: The server_host of this ProxyConfigRequest.
        :rtype: str
        """
        return self._server_host

    @server_host.setter
    def server_host(self, server_host):
        """
        Sets the server_host of this ProxyConfigRequest.
        host or IP address of proxy server

        :param server_host: The server_host of this ProxyConfigRequest.
        :type: str
        """
        if server_host is None:
            raise ValueError("Invalid value for `server_host`, must not be `None`")
        if server_host is not None and len(server_host) > 255:
            raise ValueError("Invalid value for `server_host`, length must be less than or equal to `255`")
        if server_host is not None and len(server_host) < 1:
            raise ValueError("Invalid value for `server_host`, length must be greater than or equal to `1`")
        if server_host is not None and not re.search('(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)', server_host):
            raise ValueError("Invalid value for `server_host`, must be a follow pattern or equal to `/(^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$)/`")

        self._server_host = server_host

    @property
    def server_port(self):
        """
        Gets the server_port of this ProxyConfigRequest.
        port of proxy server (typically: 3128 or 8080)

        :return: The server_port of this ProxyConfigRequest.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """
        Sets the server_port of this ProxyConfigRequest.
        port of proxy server (typically: 3128 or 8080)

        :param server_port: The server_port of this ProxyConfigRequest.
        :type: int
        """
        if server_port is None:
            raise ValueError("Invalid value for `server_port`, must not be `None`")
        if server_port is not None and server_port > 65535:
            raise ValueError("Invalid value for `server_port`, must be a value less than or equal to `65535`")
        if server_port is not None and server_port < 1:
            raise ValueError("Invalid value for `server_port`, must be a value greater than or equal to `1`")

        self._server_port = server_port

    @property
    def protocol(self):
        """
        Gets the protocol of this ProxyConfigRequest.
        determines the protocol (http or https)

        :return: The protocol of this ProxyConfigRequest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this ProxyConfigRequest.
        determines the protocol (http or https)

        :param protocol: The protocol of this ProxyConfigRequest.
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")
        if protocol is not None and not re.search('^http(s)?$', protocol):
            raise ValueError("Invalid value for `protocol`, must be a follow pattern or equal to `/^http(s)?$/`")

        self._protocol = protocol

    @property
    def user_name(self):
        """
        Gets the user_name of this ProxyConfigRequest.
        Username to use for basic authentication

        :return: The user_name of this ProxyConfigRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this ProxyConfigRequest.
        Username to use for basic authentication

        :param user_name: The user_name of this ProxyConfigRequest.
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """
        Gets the password of this ProxyConfigRequest.
        Password to use for basic authentication

        :return: The password of this ProxyConfigRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this ProxyConfigRequest.
        Password to use for basic authentication

        :param password: The password of this ProxyConfigRequest.
        :type: str
        """

        self._password = password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProxyConfigRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
