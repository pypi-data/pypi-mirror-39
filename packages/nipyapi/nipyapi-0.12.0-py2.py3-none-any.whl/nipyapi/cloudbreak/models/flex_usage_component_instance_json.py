# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlexUsageComponentInstanceJson(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'region': 'str',
        'provider': 'str',
        'flex_subscription_id': 'str',
        'creation_time': 'str',
        'usage_date': 'str',
        'peak_usage': 'int'
    }

    attribute_map = {
        'guid': 'guid',
        'region': 'region',
        'provider': 'provider',
        'flex_subscription_id': 'flexSubscriptionId',
        'creation_time': 'creationTime',
        'usage_date': 'usageDate',
        'peak_usage': 'peakUsage'
    }

    def __init__(self, guid=None, region=None, provider=None, flex_subscription_id=None, creation_time=None, usage_date=None, peak_usage=None):
        """
        FlexUsageComponentInstanceJson - a model defined in Swagger
        """

        self._guid = None
        self._region = None
        self._provider = None
        self._flex_subscription_id = None
        self._creation_time = None
        self._usage_date = None
        self._peak_usage = None

        if guid is not None:
          self.guid = guid
        if region is not None:
          self.region = region
        if provider is not None:
          self.provider = provider
        if flex_subscription_id is not None:
          self.flex_subscription_id = flex_subscription_id
        if creation_time is not None:
          self.creation_time = creation_time
        if usage_date is not None:
          self.usage_date = usage_date
        if peak_usage is not None:
          self.peak_usage = peak_usage

    @property
    def guid(self):
        """
        Gets the guid of this FlexUsageComponentInstanceJson.

        :return: The guid of this FlexUsageComponentInstanceJson.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this FlexUsageComponentInstanceJson.

        :param guid: The guid of this FlexUsageComponentInstanceJson.
        :type: str
        """

        self._guid = guid

    @property
    def region(self):
        """
        Gets the region of this FlexUsageComponentInstanceJson.

        :return: The region of this FlexUsageComponentInstanceJson.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this FlexUsageComponentInstanceJson.

        :param region: The region of this FlexUsageComponentInstanceJson.
        :type: str
        """

        self._region = region

    @property
    def provider(self):
        """
        Gets the provider of this FlexUsageComponentInstanceJson.

        :return: The provider of this FlexUsageComponentInstanceJson.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this FlexUsageComponentInstanceJson.

        :param provider: The provider of this FlexUsageComponentInstanceJson.
        :type: str
        """

        self._provider = provider

    @property
    def flex_subscription_id(self):
        """
        Gets the flex_subscription_id of this FlexUsageComponentInstanceJson.

        :return: The flex_subscription_id of this FlexUsageComponentInstanceJson.
        :rtype: str
        """
        return self._flex_subscription_id

    @flex_subscription_id.setter
    def flex_subscription_id(self, flex_subscription_id):
        """
        Sets the flex_subscription_id of this FlexUsageComponentInstanceJson.

        :param flex_subscription_id: The flex_subscription_id of this FlexUsageComponentInstanceJson.
        :type: str
        """

        self._flex_subscription_id = flex_subscription_id

    @property
    def creation_time(self):
        """
        Gets the creation_time of this FlexUsageComponentInstanceJson.

        :return: The creation_time of this FlexUsageComponentInstanceJson.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """
        Sets the creation_time of this FlexUsageComponentInstanceJson.

        :param creation_time: The creation_time of this FlexUsageComponentInstanceJson.
        :type: str
        """

        self._creation_time = creation_time

    @property
    def usage_date(self):
        """
        Gets the usage_date of this FlexUsageComponentInstanceJson.

        :return: The usage_date of this FlexUsageComponentInstanceJson.
        :rtype: str
        """
        return self._usage_date

    @usage_date.setter
    def usage_date(self, usage_date):
        """
        Sets the usage_date of this FlexUsageComponentInstanceJson.

        :param usage_date: The usage_date of this FlexUsageComponentInstanceJson.
        :type: str
        """

        self._usage_date = usage_date

    @property
    def peak_usage(self):
        """
        Gets the peak_usage of this FlexUsageComponentInstanceJson.

        :return: The peak_usage of this FlexUsageComponentInstanceJson.
        :rtype: int
        """
        return self._peak_usage

    @peak_usage.setter
    def peak_usage(self, peak_usage):
        """
        Sets the peak_usage of this FlexUsageComponentInstanceJson.

        :param peak_usage: The peak_usage of this FlexUsageComponentInstanceJson.
        :type: int
        """

        self._peak_usage = peak_usage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlexUsageComponentInstanceJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
