# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StructuredParametersQueryRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blueprint_name': 'str',
        'cluster_name': 'str',
        'account_name': 'str',
        'storage_name': 'str',
        'file_system_type': 'str'
    }

    attribute_map = {
        'blueprint_name': 'blueprintName',
        'cluster_name': 'clusterName',
        'account_name': 'accountName',
        'storage_name': 'storageName',
        'file_system_type': 'fileSystemType'
    }

    def __init__(self, blueprint_name=None, cluster_name=None, account_name=None, storage_name=None, file_system_type=None):
        """
        StructuredParametersQueryRequest - a model defined in Swagger
        """

        self._blueprint_name = None
        self._cluster_name = None
        self._account_name = None
        self._storage_name = None
        self._file_system_type = None

        self.blueprint_name = blueprint_name
        self.cluster_name = cluster_name
        if account_name is not None:
          self.account_name = account_name
        self.storage_name = storage_name
        self.file_system_type = file_system_type

    @property
    def blueprint_name(self):
        """
        Gets the blueprint_name of this StructuredParametersQueryRequest.
        gathered from blueprintName field from the blueprint JSON

        :return: The blueprint_name of this StructuredParametersQueryRequest.
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """
        Sets the blueprint_name of this StructuredParametersQueryRequest.
        gathered from blueprintName field from the blueprint JSON

        :param blueprint_name: The blueprint_name of this StructuredParametersQueryRequest.
        :type: str
        """
        if blueprint_name is None:
            raise ValueError("Invalid value for `blueprint_name`, must not be `None`")

        self._blueprint_name = blueprint_name

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this StructuredParametersQueryRequest.
        name of the stack

        :return: The cluster_name of this StructuredParametersQueryRequest.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this StructuredParametersQueryRequest.
        name of the stack

        :param cluster_name: The cluster_name of this StructuredParametersQueryRequest.
        :type: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")

        self._cluster_name = cluster_name

    @property
    def account_name(self):
        """
        Gets the account_name of this StructuredParametersQueryRequest.
        Account name of the path

        :return: The account_name of this StructuredParametersQueryRequest.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """
        Sets the account_name of this StructuredParametersQueryRequest.
        Account name of the path

        :param account_name: The account_name of this StructuredParametersQueryRequest.
        :type: str
        """

        self._account_name = account_name

    @property
    def storage_name(self):
        """
        Gets the storage_name of this StructuredParametersQueryRequest.
        Storage name of the path

        :return: The storage_name of this StructuredParametersQueryRequest.
        :rtype: str
        """
        return self._storage_name

    @storage_name.setter
    def storage_name(self, storage_name):
        """
        Sets the storage_name of this StructuredParametersQueryRequest.
        Storage name of the path

        :param storage_name: The storage_name of this StructuredParametersQueryRequest.
        :type: str
        """
        if storage_name is None:
            raise ValueError("Invalid value for `storage_name`, must not be `None`")

        self._storage_name = storage_name

    @property
    def file_system_type(self):
        """
        Gets the file_system_type of this StructuredParametersQueryRequest.
        Type of filesystem

        :return: The file_system_type of this StructuredParametersQueryRequest.
        :rtype: str
        """
        return self._file_system_type

    @file_system_type.setter
    def file_system_type(self, file_system_type):
        """
        Sets the file_system_type of this StructuredParametersQueryRequest.
        Type of filesystem

        :param file_system_type: The file_system_type of this StructuredParametersQueryRequest.
        :type: str
        """
        if file_system_type is None:
            raise ValueError("Invalid value for `file_system_type`, must not be `None`")

        self._file_system_type = file_system_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StructuredParametersQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
