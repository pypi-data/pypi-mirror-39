# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class KerberosRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin': 'str',
        'url': 'str',
        'admin_url': 'str',
        'realm': 'str',
        'ldap_url': 'str',
        'container_dn': 'str',
        'tcp_allowed': 'bool',
        'descriptor': 'str',
        'krb5_conf': 'str',
        'master_key': 'str',
        'password': 'str',
        'principal': 'str'
    }

    attribute_map = {
        'admin': 'admin',
        'url': 'url',
        'admin_url': 'adminUrl',
        'realm': 'realm',
        'ldap_url': 'ldapUrl',
        'container_dn': 'containerDn',
        'tcp_allowed': 'tcpAllowed',
        'descriptor': 'descriptor',
        'krb5_conf': 'krb5Conf',
        'master_key': 'masterKey',
        'password': 'password',
        'principal': 'principal'
    }

    def __init__(self, admin=None, url=None, admin_url=None, realm=None, ldap_url=None, container_dn=None, tcp_allowed=False, descriptor=None, krb5_conf=None, master_key=None, password=None, principal=None):
        """
        KerberosRequest - a model defined in Swagger
        """

        self._admin = None
        self._url = None
        self._admin_url = None
        self._realm = None
        self._ldap_url = None
        self._container_dn = None
        self._tcp_allowed = None
        self._descriptor = None
        self._krb5_conf = None
        self._master_key = None
        self._password = None
        self._principal = None

        if admin is not None:
          self.admin = admin
        if url is not None:
          self.url = url
        if admin_url is not None:
          self.admin_url = admin_url
        if realm is not None:
          self.realm = realm
        if ldap_url is not None:
          self.ldap_url = ldap_url
        if container_dn is not None:
          self.container_dn = container_dn
        if tcp_allowed is not None:
          self.tcp_allowed = tcp_allowed
        if descriptor is not None:
          self.descriptor = descriptor
        if krb5_conf is not None:
          self.krb5_conf = krb5_conf
        if master_key is not None:
          self.master_key = master_key
        if password is not None:
          self.password = password
        if principal is not None:
          self.principal = principal

    @property
    def admin(self):
        """
        Gets the admin of this KerberosRequest.
        kerberos admin user

        :return: The admin of this KerberosRequest.
        :rtype: str
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """
        Sets the admin of this KerberosRequest.
        kerberos admin user

        :param admin: The admin of this KerberosRequest.
        :type: str
        """
        if admin is not None and len(admin) > 15:
            raise ValueError("Invalid value for `admin`, length must be less than or equal to `15`")
        if admin is not None and len(admin) < 5:
            raise ValueError("Invalid value for `admin`, length must be greater than or equal to `5`")

        self._admin = admin

    @property
    def url(self):
        """
        Gets the url of this KerberosRequest.
        kerberos KDC server URL

        :return: The url of this KerberosRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this KerberosRequest.
        kerberos KDC server URL

        :param url: The url of this KerberosRequest.
        :type: str
        """

        self._url = url

    @property
    def admin_url(self):
        """
        Gets the admin_url of this KerberosRequest.
        kerberos admin server URL

        :return: The admin_url of this KerberosRequest.
        :rtype: str
        """
        return self._admin_url

    @admin_url.setter
    def admin_url(self, admin_url):
        """
        Sets the admin_url of this KerberosRequest.
        kerberos admin server URL

        :param admin_url: The admin_url of this KerberosRequest.
        :type: str
        """

        self._admin_url = admin_url

    @property
    def realm(self):
        """
        Gets the realm of this KerberosRequest.

        :return: The realm of this KerberosRequest.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """
        Sets the realm of this KerberosRequest.

        :param realm: The realm of this KerberosRequest.
        :type: str
        """

        self._realm = realm

    @property
    def ldap_url(self):
        """
        Gets the ldap_url of this KerberosRequest.

        :return: The ldap_url of this KerberosRequest.
        :rtype: str
        """
        return self._ldap_url

    @ldap_url.setter
    def ldap_url(self, ldap_url):
        """
        Sets the ldap_url of this KerberosRequest.

        :param ldap_url: The ldap_url of this KerberosRequest.
        :type: str
        """

        self._ldap_url = ldap_url

    @property
    def container_dn(self):
        """
        Gets the container_dn of this KerberosRequest.

        :return: The container_dn of this KerberosRequest.
        :rtype: str
        """
        return self._container_dn

    @container_dn.setter
    def container_dn(self, container_dn):
        """
        Sets the container_dn of this KerberosRequest.

        :param container_dn: The container_dn of this KerberosRequest.
        :type: str
        """

        self._container_dn = container_dn

    @property
    def tcp_allowed(self):
        """
        Gets the tcp_allowed of this KerberosRequest.

        :return: The tcp_allowed of this KerberosRequest.
        :rtype: bool
        """
        return self._tcp_allowed

    @tcp_allowed.setter
    def tcp_allowed(self, tcp_allowed):
        """
        Sets the tcp_allowed of this KerberosRequest.

        :param tcp_allowed: The tcp_allowed of this KerberosRequest.
        :type: bool
        """

        self._tcp_allowed = tcp_allowed

    @property
    def descriptor(self):
        """
        Gets the descriptor of this KerberosRequest.

        :return: The descriptor of this KerberosRequest.
        :rtype: str
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """
        Sets the descriptor of this KerberosRequest.

        :param descriptor: The descriptor of this KerberosRequest.
        :type: str
        """

        self._descriptor = descriptor

    @property
    def krb5_conf(self):
        """
        Gets the krb5_conf of this KerberosRequest.

        :return: The krb5_conf of this KerberosRequest.
        :rtype: str
        """
        return self._krb5_conf

    @krb5_conf.setter
    def krb5_conf(self, krb5_conf):
        """
        Sets the krb5_conf of this KerberosRequest.

        :param krb5_conf: The krb5_conf of this KerberosRequest.
        :type: str
        """

        self._krb5_conf = krb5_conf

    @property
    def master_key(self):
        """
        Gets the master_key of this KerberosRequest.
        kerberos master key

        :return: The master_key of this KerberosRequest.
        :rtype: str
        """
        return self._master_key

    @master_key.setter
    def master_key(self, master_key):
        """
        Sets the master_key of this KerberosRequest.
        kerberos master key

        :param master_key: The master_key of this KerberosRequest.
        :type: str
        """
        if master_key is not None and len(master_key) > 50:
            raise ValueError("Invalid value for `master_key`, length must be less than or equal to `50`")
        if master_key is not None and len(master_key) < 3:
            raise ValueError("Invalid value for `master_key`, length must be greater than or equal to `3`")

        self._master_key = master_key

    @property
    def password(self):
        """
        Gets the password of this KerberosRequest.
        kerberos admin password

        :return: The password of this KerberosRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this KerberosRequest.
        kerberos admin password

        :param password: The password of this KerberosRequest.
        :type: str
        """
        if password is not None and len(password) > 50:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `50`")
        if password is not None and len(password) < 5:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `5`")

        self._password = password

    @property
    def principal(self):
        """
        Gets the principal of this KerberosRequest.
        kerberos principal

        :return: The principal of this KerberosRequest.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """
        Sets the principal of this KerberosRequest.
        kerberos principal

        :param principal: The principal of this KerberosRequest.
        :type: str
        """

        self._principal = principal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, KerberosRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
