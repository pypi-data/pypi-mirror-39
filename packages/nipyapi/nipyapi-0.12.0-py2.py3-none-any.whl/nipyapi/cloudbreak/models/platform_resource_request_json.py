# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PlatformResourceRequestJson(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential_id': 'int',
        'credential_name': 'str',
        'region': 'str',
        'platform_variant': 'str',
        'filters': 'dict(str, str)',
        'availability_zone': 'str'
    }

    attribute_map = {
        'credential_id': 'credentialId',
        'credential_name': 'credentialName',
        'region': 'region',
        'platform_variant': 'platformVariant',
        'filters': 'filters',
        'availability_zone': 'availabilityZone'
    }

    def __init__(self, credential_id=None, credential_name=None, region=None, platform_variant=None, filters=None, availability_zone=None):
        """
        PlatformResourceRequestJson - a model defined in Swagger
        """

        self._credential_id = None
        self._credential_name = None
        self._region = None
        self._platform_variant = None
        self._filters = None
        self._availability_zone = None

        if credential_id is not None:
          self.credential_id = credential_id
        if credential_name is not None:
          self.credential_name = credential_name
        if region is not None:
          self.region = region
        if platform_variant is not None:
          self.platform_variant = platform_variant
        if filters is not None:
          self.filters = filters
        if availability_zone is not None:
          self.availability_zone = availability_zone

    @property
    def credential_id(self):
        """
        Gets the credential_id of this PlatformResourceRequestJson.
        credential resource id for the request

        :return: The credential_id of this PlatformResourceRequestJson.
        :rtype: int
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """
        Sets the credential_id of this PlatformResourceRequestJson.
        credential resource id for the request

        :param credential_id: The credential_id of this PlatformResourceRequestJson.
        :type: int
        """

        self._credential_id = credential_id

    @property
    def credential_name(self):
        """
        Gets the credential_name of this PlatformResourceRequestJson.
        credential resource name for the request

        :return: The credential_name of this PlatformResourceRequestJson.
        :rtype: str
        """
        return self._credential_name

    @credential_name.setter
    def credential_name(self, credential_name):
        """
        Sets the credential_name of this PlatformResourceRequestJson.
        credential resource name for the request

        :param credential_name: The credential_name of this PlatformResourceRequestJson.
        :type: str
        """

        self._credential_name = credential_name

    @property
    def region(self):
        """
        Gets the region of this PlatformResourceRequestJson.
        Related region

        :return: The region of this PlatformResourceRequestJson.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this PlatformResourceRequestJson.
        Related region

        :param region: The region of this PlatformResourceRequestJson.
        :type: str
        """

        self._region = region

    @property
    def platform_variant(self):
        """
        Gets the platform_variant of this PlatformResourceRequestJson.
        cloud provider api variant

        :return: The platform_variant of this PlatformResourceRequestJson.
        :rtype: str
        """
        return self._platform_variant

    @platform_variant.setter
    def platform_variant(self, platform_variant):
        """
        Sets the platform_variant of this PlatformResourceRequestJson.
        cloud provider api variant

        :param platform_variant: The platform_variant of this PlatformResourceRequestJson.
        :type: str
        """

        self._platform_variant = platform_variant

    @property
    def filters(self):
        """
        Gets the filters of this PlatformResourceRequestJson.
        filter for resources

        :return: The filters of this PlatformResourceRequestJson.
        :rtype: dict(str, str)
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """
        Sets the filters of this PlatformResourceRequestJson.
        filter for resources

        :param filters: The filters of this PlatformResourceRequestJson.
        :type: dict(str, str)
        """

        self._filters = filters

    @property
    def availability_zone(self):
        """
        Gets the availability_zone of this PlatformResourceRequestJson.
        related availability zone

        :return: The availability_zone of this PlatformResourceRequestJson.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """
        Sets the availability_zone of this PlatformResourceRequestJson.
        related availability zone

        :param availability_zone: The availability_zone of this PlatformResourceRequestJson.
        :type: str
        """

        self._availability_zone = availability_zone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PlatformResourceRequestJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
