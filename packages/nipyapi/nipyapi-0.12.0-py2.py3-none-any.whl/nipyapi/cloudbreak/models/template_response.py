# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TemplateResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_platform': 'str',
        'parameters': 'dict(str, object)',
        'description': 'str',
        'volume_type': 'str',
        'root_volume_size': 'int',
        'instance_type': 'str',
        'custom_instance_type': 'CustomInstanceType',
        'topology_id': 'int',
        'name': 'str',
        'id': 'int',
        'volume_count': 'int',
        'volume_size': 'int',
        'public': 'bool'
    }

    attribute_map = {
        'cloud_platform': 'cloudPlatform',
        'parameters': 'parameters',
        'description': 'description',
        'volume_type': 'volumeType',
        'root_volume_size': 'rootVolumeSize',
        'instance_type': 'instanceType',
        'custom_instance_type': 'customInstanceType',
        'topology_id': 'topologyId',
        'name': 'name',
        'id': 'id',
        'volume_count': 'volumeCount',
        'volume_size': 'volumeSize',
        'public': 'public'
    }

    def __init__(self, cloud_platform=None, parameters=None, description=None, volume_type=None, root_volume_size=None, instance_type=None, custom_instance_type=None, topology_id=None, name=None, id=None, volume_count=None, volume_size=None, public=False):
        """
        TemplateResponse - a model defined in Swagger
        """

        self._cloud_platform = None
        self._parameters = None
        self._description = None
        self._volume_type = None
        self._root_volume_size = None
        self._instance_type = None
        self._custom_instance_type = None
        self._topology_id = None
        self._name = None
        self._id = None
        self._volume_count = None
        self._volume_size = None
        self._public = None

        self.cloud_platform = cloud_platform
        if parameters is not None:
          self.parameters = parameters
        if description is not None:
          self.description = description
        if volume_type is not None:
          self.volume_type = volume_type
        if root_volume_size is not None:
          self.root_volume_size = root_volume_size
        if instance_type is not None:
          self.instance_type = instance_type
        if custom_instance_type is not None:
          self.custom_instance_type = custom_instance_type
        if topology_id is not None:
          self.topology_id = topology_id
        self.name = name
        if id is not None:
          self.id = id
        self.volume_count = volume_count
        self.volume_size = volume_size
        if public is not None:
          self.public = public

    @property
    def cloud_platform(self):
        """
        Gets the cloud_platform of this TemplateResponse.
        type of cloud provider

        :return: The cloud_platform of this TemplateResponse.
        :rtype: str
        """
        return self._cloud_platform

    @cloud_platform.setter
    def cloud_platform(self, cloud_platform):
        """
        Sets the cloud_platform of this TemplateResponse.
        type of cloud provider

        :param cloud_platform: The cloud_platform of this TemplateResponse.
        :type: str
        """
        if cloud_platform is None:
            raise ValueError("Invalid value for `cloud_platform`, must not be `None`")

        self._cloud_platform = cloud_platform

    @property
    def parameters(self):
        """
        Gets the parameters of this TemplateResponse.
        cloud specific parameters for template

        :return: The parameters of this TemplateResponse.
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this TemplateResponse.
        cloud specific parameters for template

        :param parameters: The parameters of this TemplateResponse.
        :type: dict(str, object)
        """

        self._parameters = parameters

    @property
    def description(self):
        """
        Gets the description of this TemplateResponse.
        description of the resource

        :return: The description of this TemplateResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TemplateResponse.
        description of the resource

        :param description: The description of this TemplateResponse.
        :type: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def volume_type(self):
        """
        Gets the volume_type of this TemplateResponse.
        type of the volumes

        :return: The volume_type of this TemplateResponse.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """
        Sets the volume_type of this TemplateResponse.
        type of the volumes

        :param volume_type: The volume_type of this TemplateResponse.
        :type: str
        """

        self._volume_type = volume_type

    @property
    def root_volume_size(self):
        """
        Gets the root_volume_size of this TemplateResponse.
        size of the root volume

        :return: The root_volume_size of this TemplateResponse.
        :rtype: int
        """
        return self._root_volume_size

    @root_volume_size.setter
    def root_volume_size(self, root_volume_size):
        """
        Sets the root_volume_size of this TemplateResponse.
        size of the root volume

        :param root_volume_size: The root_volume_size of this TemplateResponse.
        :type: int
        """

        self._root_volume_size = root_volume_size

    @property
    def instance_type(self):
        """
        Gets the instance_type of this TemplateResponse.
        type of the instance

        :return: The instance_type of this TemplateResponse.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """
        Sets the instance_type of this TemplateResponse.
        type of the instance

        :param instance_type: The instance_type of this TemplateResponse.
        :type: str
        """

        self._instance_type = instance_type

    @property
    def custom_instance_type(self):
        """
        Gets the custom_instance_type of this TemplateResponse.
        custom instancetype definition

        :return: The custom_instance_type of this TemplateResponse.
        :rtype: CustomInstanceType
        """
        return self._custom_instance_type

    @custom_instance_type.setter
    def custom_instance_type(self, custom_instance_type):
        """
        Sets the custom_instance_type of this TemplateResponse.
        custom instancetype definition

        :param custom_instance_type: The custom_instance_type of this TemplateResponse.
        :type: CustomInstanceType
        """

        self._custom_instance_type = custom_instance_type

    @property
    def topology_id(self):
        """
        Gets the topology_id of this TemplateResponse.
        id of the topology the resource belongs to

        :return: The topology_id of this TemplateResponse.
        :rtype: int
        """
        return self._topology_id

    @topology_id.setter
    def topology_id(self, topology_id):
        """
        Sets the topology_id of this TemplateResponse.
        id of the topology the resource belongs to

        :param topology_id: The topology_id of this TemplateResponse.
        :type: int
        """

        self._topology_id = topology_id

    @property
    def name(self):
        """
        Gets the name of this TemplateResponse.
        name of the resource

        :return: The name of this TemplateResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TemplateResponse.
        name of the resource

        :param name: The name of this TemplateResponse.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def id(self):
        """
        Gets the id of this TemplateResponse.
        id of the resource

        :return: The id of this TemplateResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TemplateResponse.
        id of the resource

        :param id: The id of this TemplateResponse.
        :type: int
        """

        self._id = id

    @property
    def volume_count(self):
        """
        Gets the volume_count of this TemplateResponse.
        number of volumes

        :return: The volume_count of this TemplateResponse.
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """
        Sets the volume_count of this TemplateResponse.
        number of volumes

        :param volume_count: The volume_count of this TemplateResponse.
        :type: int
        """
        if volume_count is None:
            raise ValueError("Invalid value for `volume_count`, must not be `None`")

        self._volume_count = volume_count

    @property
    def volume_size(self):
        """
        Gets the volume_size of this TemplateResponse.
        size of volumes

        :return: The volume_size of this TemplateResponse.
        :rtype: int
        """
        return self._volume_size

    @volume_size.setter
    def volume_size(self, volume_size):
        """
        Sets the volume_size of this TemplateResponse.
        size of volumes

        :param volume_size: The volume_size of this TemplateResponse.
        :type: int
        """
        if volume_size is None:
            raise ValueError("Invalid value for `volume_size`, must not be `None`")

        self._volume_size = volume_size

    @property
    def public(self):
        """
        Gets the public of this TemplateResponse.
        resource is visible in account

        :return: The public of this TemplateResponse.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """
        Sets the public of this TemplateResponse.
        resource is visible in account

        :param public: The public of this TemplateResponse.
        :type: bool
        """

        self._public = public

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TemplateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
