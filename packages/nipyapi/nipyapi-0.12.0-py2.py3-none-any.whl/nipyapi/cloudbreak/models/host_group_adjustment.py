# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HostGroupAdjustment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_group': 'str',
        'scaling_adjustment': 'int',
        'with_stack_update': 'bool',
        'validate_node_count': 'bool'
    }

    attribute_map = {
        'host_group': 'hostGroup',
        'scaling_adjustment': 'scalingAdjustment',
        'with_stack_update': 'withStackUpdate',
        'validate_node_count': 'validateNodeCount'
    }

    def __init__(self, host_group=None, scaling_adjustment=None, with_stack_update=False, validate_node_count=False):
        """
        HostGroupAdjustment - a model defined in Swagger
        """

        self._host_group = None
        self._scaling_adjustment = None
        self._with_stack_update = None
        self._validate_node_count = None

        self.host_group = host_group
        self.scaling_adjustment = scaling_adjustment
        if with_stack_update is not None:
          self.with_stack_update = with_stack_update
        if validate_node_count is not None:
          self.validate_node_count = validate_node_count

    @property
    def host_group(self):
        """
        Gets the host_group of this HostGroupAdjustment.
        name of the host group

        :return: The host_group of this HostGroupAdjustment.
        :rtype: str
        """
        return self._host_group

    @host_group.setter
    def host_group(self, host_group):
        """
        Sets the host_group of this HostGroupAdjustment.
        name of the host group

        :param host_group: The host_group of this HostGroupAdjustment.
        :type: str
        """
        if host_group is None:
            raise ValueError("Invalid value for `host_group`, must not be `None`")

        self._host_group = host_group

    @property
    def scaling_adjustment(self):
        """
        Gets the scaling_adjustment of this HostGroupAdjustment.
        scaling adjustment of the host groups

        :return: The scaling_adjustment of this HostGroupAdjustment.
        :rtype: int
        """
        return self._scaling_adjustment

    @scaling_adjustment.setter
    def scaling_adjustment(self, scaling_adjustment):
        """
        Sets the scaling_adjustment of this HostGroupAdjustment.
        scaling adjustment of the host groups

        :param scaling_adjustment: The scaling_adjustment of this HostGroupAdjustment.
        :type: int
        """
        if scaling_adjustment is None:
            raise ValueError("Invalid value for `scaling_adjustment`, must not be `None`")

        self._scaling_adjustment = scaling_adjustment

    @property
    def with_stack_update(self):
        """
        Gets the with_stack_update of this HostGroupAdjustment.
        on cluster update, update stack too

        :return: The with_stack_update of this HostGroupAdjustment.
        :rtype: bool
        """
        return self._with_stack_update

    @with_stack_update.setter
    def with_stack_update(self, with_stack_update):
        """
        Sets the with_stack_update of this HostGroupAdjustment.
        on cluster update, update stack too

        :param with_stack_update: The with_stack_update of this HostGroupAdjustment.
        :type: bool
        """

        self._with_stack_update = with_stack_update

    @property
    def validate_node_count(self):
        """
        Gets the validate_node_count of this HostGroupAdjustment.
        validate node count during downscale

        :return: The validate_node_count of this HostGroupAdjustment.
        :rtype: bool
        """
        return self._validate_node_count

    @validate_node_count.setter
    def validate_node_count(self, validate_node_count):
        """
        Sets the validate_node_count of this HostGroupAdjustment.
        validate node count during downscale

        :param validate_node_count: The validate_node_count of this HostGroupAdjustment.
        :type: bool
        """

        self._validate_node_count = validate_node_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HostGroupAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
