# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'blueprint_id': 'int',
        'blueprint_name': 'str',
        'blueprint': 'BlueprintRequest',
        'description': 'str',
        'host_groups': 'list[HostGroupRequest]',
        'email_needed': 'bool',
        'email_to': 'str',
        'gateway': 'GatewayJson',
        'enable_security': 'bool',
        'user_name': 'str',
        'password': 'str',
        'kerberos': 'KerberosRequest',
        'ldap_config_id': 'int',
        'ldap_config_name': 'str',
        'ldap_config': 'LdapConfigRequest',
        'validate_blueprint': 'bool',
        'ambari_stack_details': 'AmbariStackDetails',
        'ambari_repo_details_json': 'AmbariRepoDetails',
        'rds_config_ids': 'list[int]',
        'rds_config_names': 'list[str]',
        'ambari_database_details': 'AmbariDatabaseDetails',
        'rds_config_jsons': 'list[RdsConfig]',
        'file_system': 'FileSystem',
        'config_strategy': 'str',
        'blueprint_inputs': 'list[BlueprintInput]',
        'blueprint_custom_properties': 'str',
        'custom_container': 'CustomContainerRequest',
        'custom_queue': 'str',
        'executor_type': 'str',
        'connected_cluster': 'ConnectedClusterRequest',
        'ambari_security_master_key': 'str',
        'proxy_name': 'str'
    }

    attribute_map = {
        'name': 'name',
        'blueprint_id': 'blueprintId',
        'blueprint_name': 'blueprintName',
        'blueprint': 'blueprint',
        'description': 'description',
        'host_groups': 'hostGroups',
        'email_needed': 'emailNeeded',
        'email_to': 'emailTo',
        'gateway': 'gateway',
        'enable_security': 'enableSecurity',
        'user_name': 'userName',
        'password': 'password',
        'kerberos': 'kerberos',
        'ldap_config_id': 'ldapConfigId',
        'ldap_config_name': 'ldapConfigName',
        'ldap_config': 'ldapConfig',
        'validate_blueprint': 'validateBlueprint',
        'ambari_stack_details': 'ambariStackDetails',
        'ambari_repo_details_json': 'ambariRepoDetailsJson',
        'rds_config_ids': 'rdsConfigIds',
        'rds_config_names': 'rdsConfigNames',
        'ambari_database_details': 'ambariDatabaseDetails',
        'rds_config_jsons': 'rdsConfigJsons',
        'file_system': 'fileSystem',
        'config_strategy': 'configStrategy',
        'blueprint_inputs': 'blueprintInputs',
        'blueprint_custom_properties': 'blueprintCustomProperties',
        'custom_container': 'customContainer',
        'custom_queue': 'customQueue',
        'executor_type': 'executorType',
        'connected_cluster': 'connectedCluster',
        'ambari_security_master_key': 'ambariSecurityMasterKey',
        'proxy_name': 'proxyName'
    }

    def __init__(self, name=None, blueprint_id=None, blueprint_name=None, blueprint=None, description=None, host_groups=None, email_needed=False, email_to=None, gateway=None, enable_security=False, user_name=None, password=None, kerberos=None, ldap_config_id=None, ldap_config_name=None, ldap_config=None, validate_blueprint=False, ambari_stack_details=None, ambari_repo_details_json=None, rds_config_ids=None, rds_config_names=None, ambari_database_details=None, rds_config_jsons=None, file_system=None, config_strategy=None, blueprint_inputs=None, blueprint_custom_properties=None, custom_container=None, custom_queue=None, executor_type=None, connected_cluster=None, ambari_security_master_key=None, proxy_name=None):
        """
        ClusterRequest - a model defined in Swagger
        """

        self._name = None
        self._blueprint_id = None
        self._blueprint_name = None
        self._blueprint = None
        self._description = None
        self._host_groups = None
        self._email_needed = None
        self._email_to = None
        self._gateway = None
        self._enable_security = None
        self._user_name = None
        self._password = None
        self._kerberos = None
        self._ldap_config_id = None
        self._ldap_config_name = None
        self._ldap_config = None
        self._validate_blueprint = None
        self._ambari_stack_details = None
        self._ambari_repo_details_json = None
        self._rds_config_ids = None
        self._rds_config_names = None
        self._ambari_database_details = None
        self._rds_config_jsons = None
        self._file_system = None
        self._config_strategy = None
        self._blueprint_inputs = None
        self._blueprint_custom_properties = None
        self._custom_container = None
        self._custom_queue = None
        self._executor_type = None
        self._connected_cluster = None
        self._ambari_security_master_key = None
        self._proxy_name = None

        self.name = name
        if blueprint_id is not None:
          self.blueprint_id = blueprint_id
        if blueprint_name is not None:
          self.blueprint_name = blueprint_name
        if blueprint is not None:
          self.blueprint = blueprint
        if description is not None:
          self.description = description
        if host_groups is not None:
          self.host_groups = host_groups
        if email_needed is not None:
          self.email_needed = email_needed
        if email_to is not None:
          self.email_to = email_to
        if gateway is not None:
          self.gateway = gateway
        if enable_security is not None:
          self.enable_security = enable_security
        self.user_name = user_name
        self.password = password
        if kerberos is not None:
          self.kerberos = kerberos
        if ldap_config_id is not None:
          self.ldap_config_id = ldap_config_id
        if ldap_config_name is not None:
          self.ldap_config_name = ldap_config_name
        if ldap_config is not None:
          self.ldap_config = ldap_config
        if validate_blueprint is not None:
          self.validate_blueprint = validate_blueprint
        if ambari_stack_details is not None:
          self.ambari_stack_details = ambari_stack_details
        if ambari_repo_details_json is not None:
          self.ambari_repo_details_json = ambari_repo_details_json
        if rds_config_ids is not None:
          self.rds_config_ids = rds_config_ids
        if rds_config_names is not None:
          self.rds_config_names = rds_config_names
        if ambari_database_details is not None:
          self.ambari_database_details = ambari_database_details
        if rds_config_jsons is not None:
          self.rds_config_jsons = rds_config_jsons
        if file_system is not None:
          self.file_system = file_system
        if config_strategy is not None:
          self.config_strategy = config_strategy
        if blueprint_inputs is not None:
          self.blueprint_inputs = blueprint_inputs
        if blueprint_custom_properties is not None:
          self.blueprint_custom_properties = blueprint_custom_properties
        if custom_container is not None:
          self.custom_container = custom_container
        if custom_queue is not None:
          self.custom_queue = custom_queue
        if executor_type is not None:
          self.executor_type = executor_type
        if connected_cluster is not None:
          self.connected_cluster = connected_cluster
        if ambari_security_master_key is not None:
          self.ambari_security_master_key = ambari_security_master_key
        if proxy_name is not None:
          self.proxy_name = proxy_name

    @property
    def name(self):
        """
        Gets the name of this ClusterRequest.
        name of the resource

        :return: The name of this ClusterRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClusterRequest.
        name of the resource

        :param name: The name of this ClusterRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")
        if name is not None and len(name) < 5:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `5`")
        if name is not None and not re.search('(^[a-z][-a-z0-9]*[a-z0-9]$)', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(^[a-z][-a-z0-9]*[a-z0-9]$)/`")

        self._name = name

    @property
    def blueprint_id(self):
        """
        Gets the blueprint_id of this ClusterRequest.
        blueprint id for the cluster

        :return: The blueprint_id of this ClusterRequest.
        :rtype: int
        """
        return self._blueprint_id

    @blueprint_id.setter
    def blueprint_id(self, blueprint_id):
        """
        Sets the blueprint_id of this ClusterRequest.
        blueprint id for the cluster

        :param blueprint_id: The blueprint_id of this ClusterRequest.
        :type: int
        """

        self._blueprint_id = blueprint_id

    @property
    def blueprint_name(self):
        """
        Gets the blueprint_name of this ClusterRequest.
        blueprint name for the cluster

        :return: The blueprint_name of this ClusterRequest.
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """
        Sets the blueprint_name of this ClusterRequest.
        blueprint name for the cluster

        :param blueprint_name: The blueprint_name of this ClusterRequest.
        :type: str
        """

        self._blueprint_name = blueprint_name

    @property
    def blueprint(self):
        """
        Gets the blueprint of this ClusterRequest.
        blueprint for the cluster

        :return: The blueprint of this ClusterRequest.
        :rtype: BlueprintRequest
        """
        return self._blueprint

    @blueprint.setter
    def blueprint(self, blueprint):
        """
        Sets the blueprint of this ClusterRequest.
        blueprint for the cluster

        :param blueprint: The blueprint of this ClusterRequest.
        :type: BlueprintRequest
        """

        self._blueprint = blueprint

    @property
    def description(self):
        """
        Gets the description of this ClusterRequest.
        description of the resource

        :return: The description of this ClusterRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ClusterRequest.
        description of the resource

        :param description: The description of this ClusterRequest.
        :type: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def host_groups(self):
        """
        Gets the host_groups of this ClusterRequest.
        collection of hostgroups

        :return: The host_groups of this ClusterRequest.
        :rtype: list[HostGroupRequest]
        """
        return self._host_groups

    @host_groups.setter
    def host_groups(self, host_groups):
        """
        Sets the host_groups of this ClusterRequest.
        collection of hostgroups

        :param host_groups: The host_groups of this ClusterRequest.
        :type: list[HostGroupRequest]
        """

        self._host_groups = host_groups

    @property
    def email_needed(self):
        """
        Gets the email_needed of this ClusterRequest.
        send email about the result of the cluster installation

        :return: The email_needed of this ClusterRequest.
        :rtype: bool
        """
        return self._email_needed

    @email_needed.setter
    def email_needed(self, email_needed):
        """
        Sets the email_needed of this ClusterRequest.
        send email about the result of the cluster installation

        :param email_needed: The email_needed of this ClusterRequest.
        :type: bool
        """

        self._email_needed = email_needed

    @property
    def email_to(self):
        """
        Gets the email_to of this ClusterRequest.
        send email to the requested address

        :return: The email_to of this ClusterRequest.
        :rtype: str
        """
        return self._email_to

    @email_to.setter
    def email_to(self, email_to):
        """
        Sets the email_to of this ClusterRequest.
        send email to the requested address

        :param email_to: The email_to of this ClusterRequest.
        :type: str
        """

        self._email_to = email_to

    @property
    def gateway(self):
        """
        Gets the gateway of this ClusterRequest.

        :return: The gateway of this ClusterRequest.
        :rtype: GatewayJson
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this ClusterRequest.

        :param gateway: The gateway of this ClusterRequest.
        :type: GatewayJson
        """

        self._gateway = gateway

    @property
    def enable_security(self):
        """
        Gets the enable_security of this ClusterRequest.
        enable Kerberos security

        :return: The enable_security of this ClusterRequest.
        :rtype: bool
        """
        return self._enable_security

    @enable_security.setter
    def enable_security(self, enable_security):
        """
        Sets the enable_security of this ClusterRequest.
        enable Kerberos security

        :param enable_security: The enable_security of this ClusterRequest.
        :type: bool
        """

        self._enable_security = enable_security

    @property
    def user_name(self):
        """
        Gets the user_name of this ClusterRequest.
        ambari username

        :return: The user_name of this ClusterRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this ClusterRequest.
        ambari username

        :param user_name: The user_name of this ClusterRequest.
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")
        if user_name is not None and len(user_name) > 15:
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `15`")
        if user_name is not None and len(user_name) < 5:
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `5`")
        if user_name is not None and not re.search('(^[a-z][-a-z0-9]*[a-z0-9]$)', user_name):
            raise ValueError("Invalid value for `user_name`, must be a follow pattern or equal to `/(^[a-z][-a-z0-9]*[a-z0-9]$)/`")

        self._user_name = user_name

    @property
    def password(self):
        """
        Gets the password of this ClusterRequest.
        ambari password

        :return: The password of this ClusterRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this ClusterRequest.
        ambari password

        :param password: The password of this ClusterRequest.
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and len(password) > 100:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `100`")
        if password is not None and len(password) < 8:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")
        if password is not None and not re.search('^(.{0,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{1,})|(.{1,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{1,})|(.{1,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{0,})$', password):
            raise ValueError("Invalid value for `password`, must be a follow pattern or equal to `/^(.{0,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{1,})|(.{1,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{1,})|(.{1,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{0,})$/`")

        self._password = password

    @property
    def kerberos(self):
        """
        Gets the kerberos of this ClusterRequest.

        :return: The kerberos of this ClusterRequest.
        :rtype: KerberosRequest
        """
        return self._kerberos

    @kerberos.setter
    def kerberos(self, kerberos):
        """
        Sets the kerberos of this ClusterRequest.

        :param kerberos: The kerberos of this ClusterRequest.
        :type: KerberosRequest
        """

        self._kerberos = kerberos

    @property
    def ldap_config_id(self):
        """
        Gets the ldap_config_id of this ClusterRequest.
        LDAP config id for the cluster

        :return: The ldap_config_id of this ClusterRequest.
        :rtype: int
        """
        return self._ldap_config_id

    @ldap_config_id.setter
    def ldap_config_id(self, ldap_config_id):
        """
        Sets the ldap_config_id of this ClusterRequest.
        LDAP config id for the cluster

        :param ldap_config_id: The ldap_config_id of this ClusterRequest.
        :type: int
        """

        self._ldap_config_id = ldap_config_id

    @property
    def ldap_config_name(self):
        """
        Gets the ldap_config_name of this ClusterRequest.
        LDAP config name for the cluster

        :return: The ldap_config_name of this ClusterRequest.
        :rtype: str
        """
        return self._ldap_config_name

    @ldap_config_name.setter
    def ldap_config_name(self, ldap_config_name):
        """
        Sets the ldap_config_name of this ClusterRequest.
        LDAP config name for the cluster

        :param ldap_config_name: The ldap_config_name of this ClusterRequest.
        :type: str
        """

        self._ldap_config_name = ldap_config_name

    @property
    def ldap_config(self):
        """
        Gets the ldap_config of this ClusterRequest.
        LDAP config for the cluster

        :return: The ldap_config of this ClusterRequest.
        :rtype: LdapConfigRequest
        """
        return self._ldap_config

    @ldap_config.setter
    def ldap_config(self, ldap_config):
        """
        Sets the ldap_config of this ClusterRequest.
        LDAP config for the cluster

        :param ldap_config: The ldap_config of this ClusterRequest.
        :type: LdapConfigRequest
        """

        self._ldap_config = ldap_config

    @property
    def validate_blueprint(self):
        """
        Gets the validate_blueprint of this ClusterRequest.
        blueprint validation

        :return: The validate_blueprint of this ClusterRequest.
        :rtype: bool
        """
        return self._validate_blueprint

    @validate_blueprint.setter
    def validate_blueprint(self, validate_blueprint):
        """
        Sets the validate_blueprint of this ClusterRequest.
        blueprint validation

        :param validate_blueprint: The validate_blueprint of this ClusterRequest.
        :type: bool
        """

        self._validate_blueprint = validate_blueprint

    @property
    def ambari_stack_details(self):
        """
        Gets the ambari_stack_details of this ClusterRequest.
        details of the Ambari stack

        :return: The ambari_stack_details of this ClusterRequest.
        :rtype: AmbariStackDetails
        """
        return self._ambari_stack_details

    @ambari_stack_details.setter
    def ambari_stack_details(self, ambari_stack_details):
        """
        Sets the ambari_stack_details of this ClusterRequest.
        details of the Ambari stack

        :param ambari_stack_details: The ambari_stack_details of this ClusterRequest.
        :type: AmbariStackDetails
        """

        self._ambari_stack_details = ambari_stack_details

    @property
    def ambari_repo_details_json(self):
        """
        Gets the ambari_repo_details_json of this ClusterRequest.
        details of the Ambari package repository

        :return: The ambari_repo_details_json of this ClusterRequest.
        :rtype: AmbariRepoDetails
        """
        return self._ambari_repo_details_json

    @ambari_repo_details_json.setter
    def ambari_repo_details_json(self, ambari_repo_details_json):
        """
        Sets the ambari_repo_details_json of this ClusterRequest.
        details of the Ambari package repository

        :param ambari_repo_details_json: The ambari_repo_details_json of this ClusterRequest.
        :type: AmbariRepoDetails
        """

        self._ambari_repo_details_json = ambari_repo_details_json

    @property
    def rds_config_ids(self):
        """
        Gets the rds_config_ids of this ClusterRequest.
        RDS configuration ids for the cluster

        :return: The rds_config_ids of this ClusterRequest.
        :rtype: list[int]
        """
        return self._rds_config_ids

    @rds_config_ids.setter
    def rds_config_ids(self, rds_config_ids):
        """
        Sets the rds_config_ids of this ClusterRequest.
        RDS configuration ids for the cluster

        :param rds_config_ids: The rds_config_ids of this ClusterRequest.
        :type: list[int]
        """

        self._rds_config_ids = rds_config_ids

    @property
    def rds_config_names(self):
        """
        Gets the rds_config_names of this ClusterRequest.
        RDS configuration names for the cluster

        :return: The rds_config_names of this ClusterRequest.
        :rtype: list[str]
        """
        return self._rds_config_names

    @rds_config_names.setter
    def rds_config_names(self, rds_config_names):
        """
        Sets the rds_config_names of this ClusterRequest.
        RDS configuration names for the cluster

        :param rds_config_names: The rds_config_names of this ClusterRequest.
        :type: list[str]
        """

        self._rds_config_names = rds_config_names

    @property
    def ambari_database_details(self):
        """
        Gets the ambari_database_details of this ClusterRequest.
        [DEPRECATED] use RdsConfig instead! details of the external Ambari database

        :return: The ambari_database_details of this ClusterRequest.
        :rtype: AmbariDatabaseDetails
        """
        return self._ambari_database_details

    @ambari_database_details.setter
    def ambari_database_details(self, ambari_database_details):
        """
        Sets the ambari_database_details of this ClusterRequest.
        [DEPRECATED] use RdsConfig instead! details of the external Ambari database

        :param ambari_database_details: The ambari_database_details of this ClusterRequest.
        :type: AmbariDatabaseDetails
        """

        self._ambari_database_details = ambari_database_details

    @property
    def rds_config_jsons(self):
        """
        Gets the rds_config_jsons of this ClusterRequest.
        details of the external database for Hadoop components

        :return: The rds_config_jsons of this ClusterRequest.
        :rtype: list[RdsConfig]
        """
        return self._rds_config_jsons

    @rds_config_jsons.setter
    def rds_config_jsons(self, rds_config_jsons):
        """
        Sets the rds_config_jsons of this ClusterRequest.
        details of the external database for Hadoop components

        :param rds_config_jsons: The rds_config_jsons of this ClusterRequest.
        :type: list[RdsConfig]
        """

        self._rds_config_jsons = rds_config_jsons

    @property
    def file_system(self):
        """
        Gets the file_system of this ClusterRequest.
        external file system configuration

        :return: The file_system of this ClusterRequest.
        :rtype: FileSystem
        """
        return self._file_system

    @file_system.setter
    def file_system(self, file_system):
        """
        Sets the file_system of this ClusterRequest.
        external file system configuration

        :param file_system: The file_system of this ClusterRequest.
        :type: FileSystem
        """

        self._file_system = file_system

    @property
    def config_strategy(self):
        """
        Gets the config_strategy of this ClusterRequest.
        config recommendation strategy

        :return: The config_strategy of this ClusterRequest.
        :rtype: str
        """
        return self._config_strategy

    @config_strategy.setter
    def config_strategy(self, config_strategy):
        """
        Sets the config_strategy of this ClusterRequest.
        config recommendation strategy

        :param config_strategy: The config_strategy of this ClusterRequest.
        :type: str
        """
        allowed_values = ["NEVER_APPLY", "ONLY_STACK_DEFAULTS_APPLY", "ALWAYS_APPLY", "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"]
        if config_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `config_strategy` ({0}), must be one of {1}"
                .format(config_strategy, allowed_values)
            )

        self._config_strategy = config_strategy

    @property
    def blueprint_inputs(self):
        """
        Gets the blueprint_inputs of this ClusterRequest.
        blueprint inputs in the cluster

        :return: The blueprint_inputs of this ClusterRequest.
        :rtype: list[BlueprintInput]
        """
        return self._blueprint_inputs

    @blueprint_inputs.setter
    def blueprint_inputs(self, blueprint_inputs):
        """
        Sets the blueprint_inputs of this ClusterRequest.
        blueprint inputs in the cluster

        :param blueprint_inputs: The blueprint_inputs of this ClusterRequest.
        :type: list[BlueprintInput]
        """

        self._blueprint_inputs = blueprint_inputs

    @property
    def blueprint_custom_properties(self):
        """
        Gets the blueprint_custom_properties of this ClusterRequest.
        blueprint custom properties

        :return: The blueprint_custom_properties of this ClusterRequest.
        :rtype: str
        """
        return self._blueprint_custom_properties

    @blueprint_custom_properties.setter
    def blueprint_custom_properties(self, blueprint_custom_properties):
        """
        Sets the blueprint_custom_properties of this ClusterRequest.
        blueprint custom properties

        :param blueprint_custom_properties: The blueprint_custom_properties of this ClusterRequest.
        :type: str
        """

        self._blueprint_custom_properties = blueprint_custom_properties

    @property
    def custom_container(self):
        """
        Gets the custom_container of this ClusterRequest.
        custom containers

        :return: The custom_container of this ClusterRequest.
        :rtype: CustomContainerRequest
        """
        return self._custom_container

    @custom_container.setter
    def custom_container(self, custom_container):
        """
        Sets the custom_container of this ClusterRequest.
        custom containers

        :param custom_container: The custom_container of this ClusterRequest.
        :type: CustomContainerRequest
        """

        self._custom_container = custom_container

    @property
    def custom_queue(self):
        """
        Gets the custom_queue of this ClusterRequest.
        custom queue for yarn orchestrator

        :return: The custom_queue of this ClusterRequest.
        :rtype: str
        """
        return self._custom_queue

    @custom_queue.setter
    def custom_queue(self, custom_queue):
        """
        Sets the custom_queue of this ClusterRequest.
        custom queue for yarn orchestrator

        :param custom_queue: The custom_queue of this ClusterRequest.
        :type: str
        """

        self._custom_queue = custom_queue

    @property
    def executor_type(self):
        """
        Gets the executor_type of this ClusterRequest.
        executor type of cluster

        :return: The executor_type of this ClusterRequest.
        :rtype: str
        """
        return self._executor_type

    @executor_type.setter
    def executor_type(self, executor_type):
        """
        Sets the executor_type of this ClusterRequest.
        executor type of cluster

        :param executor_type: The executor_type of this ClusterRequest.
        :type: str
        """
        allowed_values = ["CONTAINER", "DEFAULT"]
        if executor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `executor_type` ({0}), must be one of {1}"
                .format(executor_type, allowed_values)
            )

        self._executor_type = executor_type

    @property
    def connected_cluster(self):
        """
        Gets the connected_cluster of this ClusterRequest.
        cluster can connect to a datalake you can define the parameters here

        :return: The connected_cluster of this ClusterRequest.
        :rtype: ConnectedClusterRequest
        """
        return self._connected_cluster

    @connected_cluster.setter
    def connected_cluster(self, connected_cluster):
        """
        Sets the connected_cluster of this ClusterRequest.
        cluster can connect to a datalake you can define the parameters here

        :param connected_cluster: The connected_cluster of this ClusterRequest.
        :type: ConnectedClusterRequest
        """

        self._connected_cluster = connected_cluster

    @property
    def ambari_security_master_key(self):
        """
        Gets the ambari_security_master_key of this ClusterRequest.
        a master key for encrypting the passwords in Ambari

        :return: The ambari_security_master_key of this ClusterRequest.
        :rtype: str
        """
        return self._ambari_security_master_key

    @ambari_security_master_key.setter
    def ambari_security_master_key(self, ambari_security_master_key):
        """
        Sets the ambari_security_master_key of this ClusterRequest.
        a master key for encrypting the passwords in Ambari

        :param ambari_security_master_key: The ambari_security_master_key of this ClusterRequest.
        :type: str
        """
        if ambari_security_master_key is not None and len(ambari_security_master_key) > 100:
            raise ValueError("Invalid value for `ambari_security_master_key`, length must be less than or equal to `100`")
        if ambari_security_master_key is not None and len(ambari_security_master_key) < 5:
            raise ValueError("Invalid value for `ambari_security_master_key`, length must be greater than or equal to `5`")

        self._ambari_security_master_key = ambari_security_master_key

    @property
    def proxy_name(self):
        """
        Gets the proxy_name of this ClusterRequest.
        proxy configuration name for the cluster

        :return: The proxy_name of this ClusterRequest.
        :rtype: str
        """
        return self._proxy_name

    @proxy_name.setter
    def proxy_name(self, proxy_name):
        """
        Sets the proxy_name of this ClusterRequest.
        proxy configuration name for the cluster

        :param proxy_name: The proxy_name of this ClusterRequest.
        :type: str
        """

        self._proxy_name = proxy_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
