# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LdapConfigRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'server_host': 'str',
        'server_port': 'int',
        'protocol': 'str',
        'bind_dn': 'str',
        'user_search_base': 'str',
        'user_dn_pattern': 'str',
        'group_search_base': 'str',
        'user_name_attribute': 'str',
        'domain': 'str',
        'directory_type': 'str',
        'user_object_class': 'str',
        'group_object_class': 'str',
        'group_name_attribute': 'str',
        'group_member_attribute': 'str',
        'admin_group': 'str',
        'name': 'str',
        'bind_password': 'str'
    }

    attribute_map = {
        'description': 'description',
        'server_host': 'serverHost',
        'server_port': 'serverPort',
        'protocol': 'protocol',
        'bind_dn': 'bindDn',
        'user_search_base': 'userSearchBase',
        'user_dn_pattern': 'userDnPattern',
        'group_search_base': 'groupSearchBase',
        'user_name_attribute': 'userNameAttribute',
        'domain': 'domain',
        'directory_type': 'directoryType',
        'user_object_class': 'userObjectClass',
        'group_object_class': 'groupObjectClass',
        'group_name_attribute': 'groupNameAttribute',
        'group_member_attribute': 'groupMemberAttribute',
        'admin_group': 'adminGroup',
        'name': 'name',
        'bind_password': 'bindPassword'
    }

    def __init__(self, description=None, server_host=None, server_port=None, protocol=None, bind_dn=None, user_search_base=None, user_dn_pattern=None, group_search_base=None, user_name_attribute=None, domain=None, directory_type=None, user_object_class=None, group_object_class=None, group_name_attribute=None, group_member_attribute=None, admin_group=None, name=None, bind_password=None):
        """
        LdapConfigRequest - a model defined in Swagger
        """

        self._description = None
        self._server_host = None
        self._server_port = None
        self._protocol = None
        self._bind_dn = None
        self._user_search_base = None
        self._user_dn_pattern = None
        self._group_search_base = None
        self._user_name_attribute = None
        self._domain = None
        self._directory_type = None
        self._user_object_class = None
        self._group_object_class = None
        self._group_name_attribute = None
        self._group_member_attribute = None
        self._admin_group = None
        self._name = None
        self._bind_password = None

        if description is not None:
          self.description = description
        self.server_host = server_host
        self.server_port = server_port
        if protocol is not None:
          self.protocol = protocol
        self.bind_dn = bind_dn
        self.user_search_base = user_search_base
        self.user_dn_pattern = user_dn_pattern
        if group_search_base is not None:
          self.group_search_base = group_search_base
        if user_name_attribute is not None:
          self.user_name_attribute = user_name_attribute
        if domain is not None:
          self.domain = domain
        if directory_type is not None:
          self.directory_type = directory_type
        if user_object_class is not None:
          self.user_object_class = user_object_class
        if group_object_class is not None:
          self.group_object_class = group_object_class
        if group_name_attribute is not None:
          self.group_name_attribute = group_name_attribute
        if group_member_attribute is not None:
          self.group_member_attribute = group_member_attribute
        if admin_group is not None:
          self.admin_group = admin_group
        self.name = name
        self.bind_password = bind_password

    @property
    def description(self):
        """
        Gets the description of this LdapConfigRequest.
        description of the resource

        :return: The description of this LdapConfigRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LdapConfigRequest.
        description of the resource

        :param description: The description of this LdapConfigRequest.
        :type: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def server_host(self):
        """
        Gets the server_host of this LdapConfigRequest.
        public host or IP address of LDAP server

        :return: The server_host of this LdapConfigRequest.
        :rtype: str
        """
        return self._server_host

    @server_host.setter
    def server_host(self, server_host):
        """
        Sets the server_host of this LdapConfigRequest.
        public host or IP address of LDAP server

        :param server_host: The server_host of this LdapConfigRequest.
        :type: str
        """
        if server_host is None:
            raise ValueError("Invalid value for `server_host`, must not be `None`")

        self._server_host = server_host

    @property
    def server_port(self):
        """
        Gets the server_port of this LdapConfigRequest.
        port of LDAP server (typically: 389 or 636 for LDAPS)

        :return: The server_port of this LdapConfigRequest.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """
        Sets the server_port of this LdapConfigRequest.
        port of LDAP server (typically: 389 or 636 for LDAPS)

        :param server_port: The server_port of this LdapConfigRequest.
        :type: int
        """
        if server_port is None:
            raise ValueError("Invalid value for `server_port`, must not be `None`")
        if server_port is not None and server_port > 65535:
            raise ValueError("Invalid value for `server_port`, must be a value less than or equal to `65535`")
        if server_port is not None and server_port < 1:
            raise ValueError("Invalid value for `server_port`, must be a value greater than or equal to `1`")

        self._server_port = server_port

    @property
    def protocol(self):
        """
        Gets the protocol of this LdapConfigRequest.
        determines the protocol (LDAP or LDAP over SSL)

        :return: The protocol of this LdapConfigRequest.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this LdapConfigRequest.
        determines the protocol (LDAP or LDAP over SSL)

        :param protocol: The protocol of this LdapConfigRequest.
        :type: str
        """

        self._protocol = protocol

    @property
    def bind_dn(self):
        """
        Gets the bind_dn of this LdapConfigRequest.
        bind distinguished name for connection test and group search (e.g. cn=admin,dc=example,dc=org)

        :return: The bind_dn of this LdapConfigRequest.
        :rtype: str
        """
        return self._bind_dn

    @bind_dn.setter
    def bind_dn(self, bind_dn):
        """
        Sets the bind_dn of this LdapConfigRequest.
        bind distinguished name for connection test and group search (e.g. cn=admin,dc=example,dc=org)

        :param bind_dn: The bind_dn of this LdapConfigRequest.
        :type: str
        """
        if bind_dn is None:
            raise ValueError("Invalid value for `bind_dn`, must not be `None`")

        self._bind_dn = bind_dn

    @property
    def user_search_base(self):
        """
        Gets the user_search_base of this LdapConfigRequest.
        template for user search for authentication (e.g. dc=hadoop,dc=apache,dc=org)

        :return: The user_search_base of this LdapConfigRequest.
        :rtype: str
        """
        return self._user_search_base

    @user_search_base.setter
    def user_search_base(self, user_search_base):
        """
        Sets the user_search_base of this LdapConfigRequest.
        template for user search for authentication (e.g. dc=hadoop,dc=apache,dc=org)

        :param user_search_base: The user_search_base of this LdapConfigRequest.
        :type: str
        """
        if user_search_base is None:
            raise ValueError("Invalid value for `user_search_base`, must not be `None`")

        self._user_search_base = user_search_base

    @property
    def user_dn_pattern(self):
        """
        Gets the user_dn_pattern of this LdapConfigRequest.
        template for pattern based user search for authentication (e.g. cn={0},dc=hadoop,dc=apache,dc=org)

        :return: The user_dn_pattern of this LdapConfigRequest.
        :rtype: str
        """
        return self._user_dn_pattern

    @user_dn_pattern.setter
    def user_dn_pattern(self, user_dn_pattern):
        """
        Sets the user_dn_pattern of this LdapConfigRequest.
        template for pattern based user search for authentication (e.g. cn={0},dc=hadoop,dc=apache,dc=org)

        :param user_dn_pattern: The user_dn_pattern of this LdapConfigRequest.
        :type: str
        """
        if user_dn_pattern is None:
            raise ValueError("Invalid value for `user_dn_pattern`, must not be `None`")

        self._user_dn_pattern = user_dn_pattern

    @property
    def group_search_base(self):
        """
        Gets the group_search_base of this LdapConfigRequest.
        template for group search for authorization (e.g. dc=hadoop,dc=apache,dc=org)

        :return: The group_search_base of this LdapConfigRequest.
        :rtype: str
        """
        return self._group_search_base

    @group_search_base.setter
    def group_search_base(self, group_search_base):
        """
        Sets the group_search_base of this LdapConfigRequest.
        template for group search for authorization (e.g. dc=hadoop,dc=apache,dc=org)

        :param group_search_base: The group_search_base of this LdapConfigRequest.
        :type: str
        """

        self._group_search_base = group_search_base

    @property
    def user_name_attribute(self):
        """
        Gets the user_name_attribute of this LdapConfigRequest.
        attribute name for simplified search filter (e.g. sAMAccountName in case of AD, UID or cn for LDAP).

        :return: The user_name_attribute of this LdapConfigRequest.
        :rtype: str
        """
        return self._user_name_attribute

    @user_name_attribute.setter
    def user_name_attribute(self, user_name_attribute):
        """
        Sets the user_name_attribute of this LdapConfigRequest.
        attribute name for simplified search filter (e.g. sAMAccountName in case of AD, UID or cn for LDAP).

        :param user_name_attribute: The user_name_attribute of this LdapConfigRequest.
        :type: str
        """

        self._user_name_attribute = user_name_attribute

    @property
    def domain(self):
        """
        Gets the domain of this LdapConfigRequest.
        domain in LDAP server (e.g. ad.seq.com).

        :return: The domain of this LdapConfigRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this LdapConfigRequest.
        domain in LDAP server (e.g. ad.seq.com).

        :param domain: The domain of this LdapConfigRequest.
        :type: str
        """

        self._domain = domain

    @property
    def directory_type(self):
        """
        Gets the directory_type of this LdapConfigRequest.
        directory type of server LDAP or AD

        :return: The directory_type of this LdapConfigRequest.
        :rtype: str
        """
        return self._directory_type

    @directory_type.setter
    def directory_type(self, directory_type):
        """
        Sets the directory_type of this LdapConfigRequest.
        directory type of server LDAP or AD

        :param directory_type: The directory_type of this LdapConfigRequest.
        :type: str
        """
        allowed_values = ["LDAP", "ACTIVE_DIRECTORY"]
        if directory_type not in allowed_values:
            raise ValueError(
                "Invalid value for `directory_type` ({0}), must be one of {1}"
                .format(directory_type, allowed_values)
            )

        self._directory_type = directory_type

    @property
    def user_object_class(self):
        """
        Gets the user_object_class of this LdapConfigRequest.
        User Object Class (defaults to person)

        :return: The user_object_class of this LdapConfigRequest.
        :rtype: str
        """
        return self._user_object_class

    @user_object_class.setter
    def user_object_class(self, user_object_class):
        """
        Sets the user_object_class of this LdapConfigRequest.
        User Object Class (defaults to person)

        :param user_object_class: The user_object_class of this LdapConfigRequest.
        :type: str
        """

        self._user_object_class = user_object_class

    @property
    def group_object_class(self):
        """
        Gets the group_object_class of this LdapConfigRequest.
        Group Object Class (defaults to groupOfNames)

        :return: The group_object_class of this LdapConfigRequest.
        :rtype: str
        """
        return self._group_object_class

    @group_object_class.setter
    def group_object_class(self, group_object_class):
        """
        Sets the group_object_class of this LdapConfigRequest.
        Group Object Class (defaults to groupOfNames)

        :param group_object_class: The group_object_class of this LdapConfigRequest.
        :type: str
        """

        self._group_object_class = group_object_class

    @property
    def group_name_attribute(self):
        """
        Gets the group_name_attribute of this LdapConfigRequest.
        Group Id Attribute (defaults to cn)

        :return: The group_name_attribute of this LdapConfigRequest.
        :rtype: str
        """
        return self._group_name_attribute

    @group_name_attribute.setter
    def group_name_attribute(self, group_name_attribute):
        """
        Sets the group_name_attribute of this LdapConfigRequest.
        Group Id Attribute (defaults to cn)

        :param group_name_attribute: The group_name_attribute of this LdapConfigRequest.
        :type: str
        """

        self._group_name_attribute = group_name_attribute

    @property
    def group_member_attribute(self):
        """
        Gets the group_member_attribute of this LdapConfigRequest.
        Group Member Attribute (defaults to member)

        :return: The group_member_attribute of this LdapConfigRequest.
        :rtype: str
        """
        return self._group_member_attribute

    @group_member_attribute.setter
    def group_member_attribute(self, group_member_attribute):
        """
        Sets the group_member_attribute of this LdapConfigRequest.
        Group Member Attribute (defaults to member)

        :param group_member_attribute: The group_member_attribute of this LdapConfigRequest.
        :type: str
        """

        self._group_member_attribute = group_member_attribute

    @property
    def admin_group(self):
        """
        Gets the admin_group of this LdapConfigRequest.
        LDAP group for administrators

        :return: The admin_group of this LdapConfigRequest.
        :rtype: str
        """
        return self._admin_group

    @admin_group.setter
    def admin_group(self, admin_group):
        """
        Sets the admin_group of this LdapConfigRequest.
        LDAP group for administrators

        :param admin_group: The admin_group of this LdapConfigRequest.
        :type: str
        """

        self._admin_group = admin_group

    @property
    def name(self):
        """
        Gets the name of this LdapConfigRequest.
        name of the resource

        :return: The name of this LdapConfigRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LdapConfigRequest.
        name of the resource

        :param name: The name of this LdapConfigRequest.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search('(^[a-z][-a-z0-9]*[a-z0-9]$)', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(^[a-z][-a-z0-9]*[a-z0-9]$)/`")

        self._name = name

    @property
    def bind_password(self):
        """
        Gets the bind_password of this LdapConfigRequest.
        password for the provided bind DN

        :return: The bind_password of this LdapConfigRequest.
        :rtype: str
        """
        return self._bind_password

    @bind_password.setter
    def bind_password(self, bind_password):
        """
        Sets the bind_password of this LdapConfigRequest.
        password for the provided bind DN

        :param bind_password: The bind_password of this LdapConfigRequest.
        :type: str
        """
        if bind_password is None:
            raise ValueError("Invalid value for `bind_password`, must not be `None`")

        self._bind_password = bind_password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LdapConfigRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
