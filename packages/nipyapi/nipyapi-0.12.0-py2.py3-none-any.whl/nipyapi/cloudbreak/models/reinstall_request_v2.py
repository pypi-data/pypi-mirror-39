# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReinstallRequestV2(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_groups': 'list[InstanceGroupsV2]',
        'ambari_stack_details': 'AmbariStackDetails',
        'blueprint_name': 'str',
        'kerberos_password': 'str',
        'kerberos_principal': 'str'
    }

    attribute_map = {
        'instance_groups': 'instanceGroups',
        'ambari_stack_details': 'ambariStackDetails',
        'blueprint_name': 'blueprintName',
        'kerberos_password': 'kerberosPassword',
        'kerberos_principal': 'kerberosPrincipal'
    }

    def __init__(self, instance_groups=None, ambari_stack_details=None, blueprint_name=None, kerberos_password=None, kerberos_principal=None):
        """
        ReinstallRequestV2 - a model defined in Swagger
        """

        self._instance_groups = None
        self._ambari_stack_details = None
        self._blueprint_name = None
        self._kerberos_password = None
        self._kerberos_principal = None

        if instance_groups is not None:
          self.instance_groups = instance_groups
        if ambari_stack_details is not None:
          self.ambari_stack_details = ambari_stack_details
        self.blueprint_name = blueprint_name
        if kerberos_password is not None:
          self.kerberos_password = kerberos_password
        if kerberos_principal is not None:
          self.kerberos_principal = kerberos_principal

    @property
    def instance_groups(self):
        """
        Gets the instance_groups of this ReinstallRequestV2.
        collection of instance groupst

        :return: The instance_groups of this ReinstallRequestV2.
        :rtype: list[InstanceGroupsV2]
        """
        return self._instance_groups

    @instance_groups.setter
    def instance_groups(self, instance_groups):
        """
        Sets the instance_groups of this ReinstallRequestV2.
        collection of instance groupst

        :param instance_groups: The instance_groups of this ReinstallRequestV2.
        :type: list[InstanceGroupsV2]
        """

        self._instance_groups = instance_groups

    @property
    def ambari_stack_details(self):
        """
        Gets the ambari_stack_details of this ReinstallRequestV2.
        details of the Ambari stack

        :return: The ambari_stack_details of this ReinstallRequestV2.
        :rtype: AmbariStackDetails
        """
        return self._ambari_stack_details

    @ambari_stack_details.setter
    def ambari_stack_details(self, ambari_stack_details):
        """
        Sets the ambari_stack_details of this ReinstallRequestV2.
        details of the Ambari stack

        :param ambari_stack_details: The ambari_stack_details of this ReinstallRequestV2.
        :type: AmbariStackDetails
        """

        self._ambari_stack_details = ambari_stack_details

    @property
    def blueprint_name(self):
        """
        Gets the blueprint_name of this ReinstallRequestV2.
        blueprint name for the cluster

        :return: The blueprint_name of this ReinstallRequestV2.
        :rtype: str
        """
        return self._blueprint_name

    @blueprint_name.setter
    def blueprint_name(self, blueprint_name):
        """
        Sets the blueprint_name of this ReinstallRequestV2.
        blueprint name for the cluster

        :param blueprint_name: The blueprint_name of this ReinstallRequestV2.
        :type: str
        """
        if blueprint_name is None:
            raise ValueError("Invalid value for `blueprint_name`, must not be `None`")

        self._blueprint_name = blueprint_name

    @property
    def kerberos_password(self):
        """
        Gets the kerberos_password of this ReinstallRequestV2.
        kerberos admin password

        :return: The kerberos_password of this ReinstallRequestV2.
        :rtype: str
        """
        return self._kerberos_password

    @kerberos_password.setter
    def kerberos_password(self, kerberos_password):
        """
        Sets the kerberos_password of this ReinstallRequestV2.
        kerberos admin password

        :param kerberos_password: The kerberos_password of this ReinstallRequestV2.
        :type: str
        """
        if kerberos_password is not None and len(kerberos_password) > 50:
            raise ValueError("Invalid value for `kerberos_password`, length must be less than or equal to `50`")
        if kerberos_password is not None and len(kerberos_password) < 5:
            raise ValueError("Invalid value for `kerberos_password`, length must be greater than or equal to `5`")

        self._kerberos_password = kerberos_password

    @property
    def kerberos_principal(self):
        """
        Gets the kerberos_principal of this ReinstallRequestV2.
        kerberos principal

        :return: The kerberos_principal of this ReinstallRequestV2.
        :rtype: str
        """
        return self._kerberos_principal

    @kerberos_principal.setter
    def kerberos_principal(self, kerberos_principal):
        """
        Sets the kerberos_principal of this ReinstallRequestV2.
        kerberos principal

        :param kerberos_principal: The kerberos_principal of this ReinstallRequestV2.
        :type: str
        """

        self._kerberos_principal = kerberos_principal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReinstallRequestV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
