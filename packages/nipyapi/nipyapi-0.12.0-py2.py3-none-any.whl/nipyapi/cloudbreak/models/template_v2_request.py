# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TemplateV2Request(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'volume_count': 'int',
        'volume_size': 'int',
        'root_volume_size': 'int',
        'parameters': 'dict(str, object)',
        'volume_type': 'str',
        'instance_type': 'str',
        'custom_instance_type': 'CustomInstanceType'
    }

    attribute_map = {
        'volume_count': 'volumeCount',
        'volume_size': 'volumeSize',
        'root_volume_size': 'rootVolumeSize',
        'parameters': 'parameters',
        'volume_type': 'volumeType',
        'instance_type': 'instanceType',
        'custom_instance_type': 'customInstanceType'
    }

    def __init__(self, volume_count=None, volume_size=None, root_volume_size=None, parameters=None, volume_type=None, instance_type=None, custom_instance_type=None):
        """
        TemplateV2Request - a model defined in Swagger
        """

        self._volume_count = None
        self._volume_size = None
        self._root_volume_size = None
        self._parameters = None
        self._volume_type = None
        self._instance_type = None
        self._custom_instance_type = None

        if volume_count is not None:
          self.volume_count = volume_count
        if volume_size is not None:
          self.volume_size = volume_size
        if root_volume_size is not None:
          self.root_volume_size = root_volume_size
        if parameters is not None:
          self.parameters = parameters
        if volume_type is not None:
          self.volume_type = volume_type
        if instance_type is not None:
          self.instance_type = instance_type
        if custom_instance_type is not None:
          self.custom_instance_type = custom_instance_type

    @property
    def volume_count(self):
        """
        Gets the volume_count of this TemplateV2Request.
        number of volumes

        :return: The volume_count of this TemplateV2Request.
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """
        Sets the volume_count of this TemplateV2Request.
        number of volumes

        :param volume_count: The volume_count of this TemplateV2Request.
        :type: int
        """

        self._volume_count = volume_count

    @property
    def volume_size(self):
        """
        Gets the volume_size of this TemplateV2Request.
        size of volumes

        :return: The volume_size of this TemplateV2Request.
        :rtype: int
        """
        return self._volume_size

    @volume_size.setter
    def volume_size(self, volume_size):
        """
        Sets the volume_size of this TemplateV2Request.
        size of volumes

        :param volume_size: The volume_size of this TemplateV2Request.
        :type: int
        """

        self._volume_size = volume_size

    @property
    def root_volume_size(self):
        """
        Gets the root_volume_size of this TemplateV2Request.
        size of the root volume

        :return: The root_volume_size of this TemplateV2Request.
        :rtype: int
        """
        return self._root_volume_size

    @root_volume_size.setter
    def root_volume_size(self, root_volume_size):
        """
        Sets the root_volume_size of this TemplateV2Request.
        size of the root volume

        :param root_volume_size: The root_volume_size of this TemplateV2Request.
        :type: int
        """

        self._root_volume_size = root_volume_size

    @property
    def parameters(self):
        """
        Gets the parameters of this TemplateV2Request.
        cloud specific parameters for template

        :return: The parameters of this TemplateV2Request.
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this TemplateV2Request.
        cloud specific parameters for template

        :param parameters: The parameters of this TemplateV2Request.
        :type: dict(str, object)
        """

        self._parameters = parameters

    @property
    def volume_type(self):
        """
        Gets the volume_type of this TemplateV2Request.
        type of the volumes

        :return: The volume_type of this TemplateV2Request.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """
        Sets the volume_type of this TemplateV2Request.
        type of the volumes

        :param volume_type: The volume_type of this TemplateV2Request.
        :type: str
        """

        self._volume_type = volume_type

    @property
    def instance_type(self):
        """
        Gets the instance_type of this TemplateV2Request.
        type of the instance

        :return: The instance_type of this TemplateV2Request.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """
        Sets the instance_type of this TemplateV2Request.
        type of the instance

        :param instance_type: The instance_type of this TemplateV2Request.
        :type: str
        """

        self._instance_type = instance_type

    @property
    def custom_instance_type(self):
        """
        Gets the custom_instance_type of this TemplateV2Request.
        custom instancetype definition

        :return: The custom_instance_type of this TemplateV2Request.
        :rtype: CustomInstanceType
        """
        return self._custom_instance_type

    @custom_instance_type.setter
    def custom_instance_type(self, custom_instance_type):
        """
        Sets the custom_instance_type of this TemplateV2Request.
        custom instancetype definition

        :param custom_instance_type: The custom_instance_type of this TemplateV2Request.
        :type: CustomInstanceType
        """

        self._custom_instance_type = custom_instance_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TemplateV2Request):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
