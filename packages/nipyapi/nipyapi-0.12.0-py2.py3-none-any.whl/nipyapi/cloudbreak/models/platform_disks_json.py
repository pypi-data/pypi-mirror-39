# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PlatformDisksJson(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disk_types': 'dict(str, list[str])',
        'default_disks': 'dict(str, str)',
        'disk_mappings': 'dict(str, dict(str, str))',
        'display_names': 'dict(str, dict(str, str))'
    }

    attribute_map = {
        'disk_types': 'diskTypes',
        'default_disks': 'defaultDisks',
        'disk_mappings': 'diskMappings',
        'display_names': 'displayNames'
    }

    def __init__(self, disk_types=None, default_disks=None, disk_mappings=None, display_names=None):
        """
        PlatformDisksJson - a model defined in Swagger
        """

        self._disk_types = None
        self._default_disks = None
        self._disk_mappings = None
        self._display_names = None

        if disk_types is not None:
          self.disk_types = disk_types
        if default_disks is not None:
          self.default_disks = default_disks
        if disk_mappings is not None:
          self.disk_mappings = disk_mappings
        if display_names is not None:
          self.display_names = display_names

    @property
    def disk_types(self):
        """
        Gets the disk_types of this PlatformDisksJson.
        disk types

        :return: The disk_types of this PlatformDisksJson.
        :rtype: dict(str, list[str])
        """
        return self._disk_types

    @disk_types.setter
    def disk_types(self, disk_types):
        """
        Sets the disk_types of this PlatformDisksJson.
        disk types

        :param disk_types: The disk_types of this PlatformDisksJson.
        :type: dict(str, list[str])
        """

        self._disk_types = disk_types

    @property
    def default_disks(self):
        """
        Gets the default_disks of this PlatformDisksJson.
        default disks

        :return: The default_disks of this PlatformDisksJson.
        :rtype: dict(str, str)
        """
        return self._default_disks

    @default_disks.setter
    def default_disks(self, default_disks):
        """
        Sets the default_disks of this PlatformDisksJson.
        default disks

        :param default_disks: The default_disks of this PlatformDisksJson.
        :type: dict(str, str)
        """

        self._default_disks = default_disks

    @property
    def disk_mappings(self):
        """
        Gets the disk_mappings of this PlatformDisksJson.
        disk mappings

        :return: The disk_mappings of this PlatformDisksJson.
        :rtype: dict(str, dict(str, str))
        """
        return self._disk_mappings

    @disk_mappings.setter
    def disk_mappings(self, disk_mappings):
        """
        Sets the disk_mappings of this PlatformDisksJson.
        disk mappings

        :param disk_mappings: The disk_mappings of this PlatformDisksJson.
        :type: dict(str, dict(str, str))
        """

        self._disk_mappings = disk_mappings

    @property
    def display_names(self):
        """
        Gets the display_names of this PlatformDisksJson.
        disk displayNames

        :return: The display_names of this PlatformDisksJson.
        :rtype: dict(str, dict(str, str))
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names):
        """
        Sets the display_names of this PlatformDisksJson.
        disk displayNames

        :param display_names: The display_names of this PlatformDisksJson.
        :type: dict(str, dict(str, str))
        """

        self._display_names = display_names

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PlatformDisksJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
