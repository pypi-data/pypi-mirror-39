# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AmbariDatabaseDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor': 'str',
        'name': 'str',
        'host': 'str',
        'port': 'int',
        'user_name': 'str',
        'password': 'str'
    }

    attribute_map = {
        'vendor': 'vendor',
        'name': 'name',
        'host': 'host',
        'port': 'port',
        'user_name': 'userName',
        'password': 'password'
    }

    def __init__(self, vendor=None, name=None, host=None, port=None, user_name=None, password=None):
        """
        AmbariDatabaseDetails - a model defined in Swagger
        """

        self._vendor = None
        self._name = None
        self._host = None
        self._port = None
        self._user_name = None
        self._password = None

        self.vendor = vendor
        self.name = name
        self.host = host
        self.port = port
        self.user_name = user_name
        self.password = password

    @property
    def vendor(self):
        """
        Gets the vendor of this AmbariDatabaseDetails.
        vendor of the Ambari database

        :return: The vendor of this AmbariDatabaseDetails.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this AmbariDatabaseDetails.
        vendor of the Ambari database

        :param vendor: The vendor of this AmbariDatabaseDetails.
        :type: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")
        allowed_values = ["POSTGRES", "MYSQL", "MARIADB", "MSSQL", "ORACLE11", "ORACLE12", "SQLANYWHERE", "EMBEDDED"]
        if vendor not in allowed_values:
            raise ValueError(
                "Invalid value for `vendor` ({0}), must be one of {1}"
                .format(vendor, allowed_values)
            )

        self._vendor = vendor

    @property
    def name(self):
        """
        Gets the name of this AmbariDatabaseDetails.
        name of the Ambari database

        :return: The name of this AmbariDatabaseDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AmbariDatabaseDetails.
        name of the Ambari database

        :param name: The name of this AmbariDatabaseDetails.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search('^[^\']+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[^']+$/`")

        self._name = name

    @property
    def host(self):
        """
        Gets the host of this AmbariDatabaseDetails.
        host of the Ambari database

        :return: The host of this AmbariDatabaseDetails.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this AmbariDatabaseDetails.
        host of the Ambari database

        :param host: The host of this AmbariDatabaseDetails.
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")
        if host is not None and not re.search('^[a-zA-Z0-9]([a-zA-Z0-9-\\.]+)$', host):
            raise ValueError("Invalid value for `host`, must be a follow pattern or equal to `/^[a-zA-Z0-9]([a-zA-Z0-9-\\.]+)$/`")

        self._host = host

    @property
    def port(self):
        """
        Gets the port of this AmbariDatabaseDetails.
        port of the Ambari database

        :return: The port of this AmbariDatabaseDetails.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this AmbariDatabaseDetails.
        port of the Ambari database

        :param port: The port of this AmbariDatabaseDetails.
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def user_name(self):
        """
        Gets the user_name of this AmbariDatabaseDetails.
        user name for the Ambari database

        :return: The user_name of this AmbariDatabaseDetails.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this AmbariDatabaseDetails.
        user name for the Ambari database

        :param user_name: The user_name of this AmbariDatabaseDetails.
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")
        if user_name is not None and not re.search('^[^\']+$', user_name):
            raise ValueError("Invalid value for `user_name`, must be a follow pattern or equal to `/^[^']+$/`")

        self._user_name = user_name

    @property
    def password(self):
        """
        Gets the password of this AmbariDatabaseDetails.
        password for the Ambari database

        :return: The password of this AmbariDatabaseDetails.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this AmbariDatabaseDetails.
        password for the Ambari database

        :param password: The password of this AmbariDatabaseDetails.
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")
        if password is not None and not re.search('^[^\']+$', password):
            raise ValueError("Invalid value for `password`, must be a follow pattern or equal to `/^[^']+$/`")

        self._password = password

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AmbariDatabaseDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
