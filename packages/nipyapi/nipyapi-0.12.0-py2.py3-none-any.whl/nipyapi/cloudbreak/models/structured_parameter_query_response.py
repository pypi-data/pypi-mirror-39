# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StructuredParameterQueryResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_name': 'str',
        'description': 'str',
        'default_path': 'str',
        'related_service': 'str',
        'property_file': 'str',
        'protocol': 'str',
        'property_display_name': 'str'
    }

    attribute_map = {
        'property_name': 'propertyName',
        'description': 'description',
        'default_path': 'defaultPath',
        'related_service': 'relatedService',
        'property_file': 'propertyFile',
        'protocol': 'protocol',
        'property_display_name': 'propertyDisplayName'
    }

    def __init__(self, property_name=None, description=None, default_path=None, related_service=None, property_file=None, protocol=None, property_display_name=None):
        """
        StructuredParameterQueryResponse - a model defined in Swagger
        """

        self._property_name = None
        self._description = None
        self._default_path = None
        self._related_service = None
        self._property_file = None
        self._protocol = None
        self._property_display_name = None

        if property_name is not None:
          self.property_name = property_name
        if description is not None:
          self.description = description
        if default_path is not None:
          self.default_path = default_path
        if related_service is not None:
          self.related_service = related_service
        if property_file is not None:
          self.property_file = property_file
        if protocol is not None:
          self.protocol = protocol
        if property_display_name is not None:
          self.property_display_name = property_display_name

    @property
    def property_name(self):
        """
        Gets the property_name of this StructuredParameterQueryResponse.

        :return: The property_name of this StructuredParameterQueryResponse.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """
        Sets the property_name of this StructuredParameterQueryResponse.

        :param property_name: The property_name of this StructuredParameterQueryResponse.
        :type: str
        """

        self._property_name = property_name

    @property
    def description(self):
        """
        Gets the description of this StructuredParameterQueryResponse.

        :return: The description of this StructuredParameterQueryResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this StructuredParameterQueryResponse.

        :param description: The description of this StructuredParameterQueryResponse.
        :type: str
        """

        self._description = description

    @property
    def default_path(self):
        """
        Gets the default_path of this StructuredParameterQueryResponse.

        :return: The default_path of this StructuredParameterQueryResponse.
        :rtype: str
        """
        return self._default_path

    @default_path.setter
    def default_path(self, default_path):
        """
        Sets the default_path of this StructuredParameterQueryResponse.

        :param default_path: The default_path of this StructuredParameterQueryResponse.
        :type: str
        """

        self._default_path = default_path

    @property
    def related_service(self):
        """
        Gets the related_service of this StructuredParameterQueryResponse.

        :return: The related_service of this StructuredParameterQueryResponse.
        :rtype: str
        """
        return self._related_service

    @related_service.setter
    def related_service(self, related_service):
        """
        Sets the related_service of this StructuredParameterQueryResponse.

        :param related_service: The related_service of this StructuredParameterQueryResponse.
        :type: str
        """

        self._related_service = related_service

    @property
    def property_file(self):
        """
        Gets the property_file of this StructuredParameterQueryResponse.

        :return: The property_file of this StructuredParameterQueryResponse.
        :rtype: str
        """
        return self._property_file

    @property_file.setter
    def property_file(self, property_file):
        """
        Sets the property_file of this StructuredParameterQueryResponse.

        :param property_file: The property_file of this StructuredParameterQueryResponse.
        :type: str
        """

        self._property_file = property_file

    @property
    def protocol(self):
        """
        Gets the protocol of this StructuredParameterQueryResponse.

        :return: The protocol of this StructuredParameterQueryResponse.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this StructuredParameterQueryResponse.

        :param protocol: The protocol of this StructuredParameterQueryResponse.
        :type: str
        """

        self._protocol = protocol

    @property
    def property_display_name(self):
        """
        Gets the property_display_name of this StructuredParameterQueryResponse.

        :return: The property_display_name of this StructuredParameterQueryResponse.
        :rtype: str
        """
        return self._property_display_name

    @property_display_name.setter
    def property_display_name(self, property_display_name):
        """
        Sets the property_display_name of this StructuredParameterQueryResponse.

        :param property_display_name: The property_display_name of this StructuredParameterQueryResponse.
        :type: str
        """

        self._property_display_name = property_display_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StructuredParameterQueryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
