# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AutoscaleStackResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stack_id': 'int',
        'name': 'str',
        'owner': 'str',
        'account': 'str',
        'gateway_port': 'int',
        'ambari_server_ip': 'str',
        'user_name': 'str',
        'password': 'str',
        'status': 'str',
        'cluster_status': 'str',
        'created': 'int'
    }

    attribute_map = {
        'stack_id': 'stackId',
        'name': 'name',
        'owner': 'owner',
        'account': 'account',
        'gateway_port': 'gatewayPort',
        'ambari_server_ip': 'ambariServerIp',
        'user_name': 'userName',
        'password': 'password',
        'status': 'status',
        'cluster_status': 'clusterStatus',
        'created': 'created'
    }

    def __init__(self, stack_id=None, name=None, owner=None, account=None, gateway_port=None, ambari_server_ip=None, user_name=None, password=None, status=None, cluster_status=None, created=None):
        """
        AutoscaleStackResponse - a model defined in Swagger
        """

        self._stack_id = None
        self._name = None
        self._owner = None
        self._account = None
        self._gateway_port = None
        self._ambari_server_ip = None
        self._user_name = None
        self._password = None
        self._status = None
        self._cluster_status = None
        self._created = None

        if stack_id is not None:
          self.stack_id = stack_id
        self.name = name
        if owner is not None:
          self.owner = owner
        if account is not None:
          self.account = account
        if gateway_port is not None:
          self.gateway_port = gateway_port
        if ambari_server_ip is not None:
          self.ambari_server_ip = ambari_server_ip
        if user_name is not None:
          self.user_name = user_name
        if password is not None:
          self.password = password
        if status is not None:
          self.status = status
        if cluster_status is not None:
          self.cluster_status = cluster_status
        if created is not None:
          self.created = created

    @property
    def stack_id(self):
        """
        Gets the stack_id of this AutoscaleStackResponse.
        id of the stack

        :return: The stack_id of this AutoscaleStackResponse.
        :rtype: int
        """
        return self._stack_id

    @stack_id.setter
    def stack_id(self, stack_id):
        """
        Sets the stack_id of this AutoscaleStackResponse.
        id of the stack

        :param stack_id: The stack_id of this AutoscaleStackResponse.
        :type: int
        """

        self._stack_id = stack_id

    @property
    def name(self):
        """
        Gets the name of this AutoscaleStackResponse.
        name of the stack

        :return: The name of this AutoscaleStackResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AutoscaleStackResponse.
        name of the stack

        :param name: The name of this AutoscaleStackResponse.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 40:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `40`")
        if name is not None and len(name) < 5:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `5`")
        if name is not None and not re.search('(^[a-z][-a-z0-9]*[a-z0-9]$)', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(^[a-z][-a-z0-9]*[a-z0-9]$)/`")

        self._name = name

    @property
    def owner(self):
        """
        Gets the owner of this AutoscaleStackResponse.
        id of the resource owner that is provided by OAuth provider

        :return: The owner of this AutoscaleStackResponse.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this AutoscaleStackResponse.
        id of the resource owner that is provided by OAuth provider

        :param owner: The owner of this AutoscaleStackResponse.
        :type: str
        """

        self._owner = owner

    @property
    def account(self):
        """
        Gets the account of this AutoscaleStackResponse.
        account id of the resource owner that is provided by OAuth provider

        :return: The account of this AutoscaleStackResponse.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this AutoscaleStackResponse.
        account id of the resource owner that is provided by OAuth provider

        :param account: The account of this AutoscaleStackResponse.
        :type: str
        """

        self._account = account

    @property
    def gateway_port(self):
        """
        Gets the gateway_port of this AutoscaleStackResponse.
        port of the gateway secured proxy

        :return: The gateway_port of this AutoscaleStackResponse.
        :rtype: int
        """
        return self._gateway_port

    @gateway_port.setter
    def gateway_port(self, gateway_port):
        """
        Sets the gateway_port of this AutoscaleStackResponse.
        port of the gateway secured proxy

        :param gateway_port: The gateway_port of this AutoscaleStackResponse.
        :type: int
        """

        self._gateway_port = gateway_port

    @property
    def ambari_server_ip(self):
        """
        Gets the ambari_server_ip of this AutoscaleStackResponse.
        public ambari ip of the stack

        :return: The ambari_server_ip of this AutoscaleStackResponse.
        :rtype: str
        """
        return self._ambari_server_ip

    @ambari_server_ip.setter
    def ambari_server_ip(self, ambari_server_ip):
        """
        Sets the ambari_server_ip of this AutoscaleStackResponse.
        public ambari ip of the stack

        :param ambari_server_ip: The ambari_server_ip of this AutoscaleStackResponse.
        :type: str
        """

        self._ambari_server_ip = ambari_server_ip

    @property
    def user_name(self):
        """
        Gets the user_name of this AutoscaleStackResponse.
        ambari username

        :return: The user_name of this AutoscaleStackResponse.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this AutoscaleStackResponse.
        ambari username

        :param user_name: The user_name of this AutoscaleStackResponse.
        :type: str
        """

        self._user_name = user_name

    @property
    def password(self):
        """
        Gets the password of this AutoscaleStackResponse.
        ambari password

        :return: The password of this AutoscaleStackResponse.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this AutoscaleStackResponse.
        ambari password

        :param password: The password of this AutoscaleStackResponse.
        :type: str
        """

        self._password = password

    @property
    def status(self):
        """
        Gets the status of this AutoscaleStackResponse.
        status of the stack

        :return: The status of this AutoscaleStackResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AutoscaleStackResponse.
        status of the stack

        :param status: The status of this AutoscaleStackResponse.
        :type: str
        """
        allowed_values = ["REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def cluster_status(self):
        """
        Gets the cluster_status of this AutoscaleStackResponse.
        status of the cluster

        :return: The cluster_status of this AutoscaleStackResponse.
        :rtype: str
        """
        return self._cluster_status

    @cluster_status.setter
    def cluster_status(self, cluster_status):
        """
        Sets the cluster_status of this AutoscaleStackResponse.
        status of the cluster

        :param cluster_status: The cluster_status of this AutoscaleStackResponse.
        :type: str
        """
        allowed_values = ["REQUESTED", "CREATE_IN_PROGRESS", "AVAILABLE", "UPDATE_IN_PROGRESS", "UPDATE_REQUESTED", "UPDATE_FAILED", "CREATE_FAILED", "ENABLE_SECURITY_FAILED", "PRE_DELETE_IN_PROGRESS", "DELETE_IN_PROGRESS", "DELETE_FAILED", "DELETE_COMPLETED", "STOPPED", "STOP_REQUESTED", "START_REQUESTED", "STOP_IN_PROGRESS", "START_IN_PROGRESS", "START_FAILED", "STOP_FAILED", "WAIT_FOR_SYNC"]
        if cluster_status not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_status` ({0}), must be one of {1}"
                .format(cluster_status, allowed_values)
            )

        self._cluster_status = cluster_status

    @property
    def created(self):
        """
        Gets the created of this AutoscaleStackResponse.
        creation time of the stack in long

        :return: The created of this AutoscaleStackResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this AutoscaleStackResponse.
        creation time of the stack in long

        :param created: The created of this AutoscaleStackResponse.
        :type: int
        """

        self._created = created

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AutoscaleStackResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
