# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SmartSenseSubscriptionJson(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'subscription_id': 'str',
        'owner': 'str',
        'account': 'str',
        'public_in_account': 'bool',
        'auto_generated': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'subscription_id': 'subscriptionId',
        'owner': 'owner',
        'account': 'account',
        'public_in_account': 'publicInAccount',
        'auto_generated': 'autoGenerated'
    }

    def __init__(self, id=None, subscription_id=None, owner=None, account=None, public_in_account=False, auto_generated=False):
        """
        SmartSenseSubscriptionJson - a model defined in Swagger
        """

        self._id = None
        self._subscription_id = None
        self._owner = None
        self._account = None
        self._public_in_account = None
        self._auto_generated = None

        if id is not None:
          self.id = id
        self.subscription_id = subscription_id
        if owner is not None:
          self.owner = owner
        if account is not None:
          self.account = account
        if public_in_account is not None:
          self.public_in_account = public_in_account
        if auto_generated is not None:
          self.auto_generated = auto_generated

    @property
    def id(self):
        """
        Gets the id of this SmartSenseSubscriptionJson.
        id of the resource

        :return: The id of this SmartSenseSubscriptionJson.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SmartSenseSubscriptionJson.
        id of the resource

        :param id: The id of this SmartSenseSubscriptionJson.
        :type: int
        """

        self._id = id

    @property
    def subscription_id(self):
        """
        Gets the subscription_id of this SmartSenseSubscriptionJson.
        Identifier of SmartSense subscription.

        :return: The subscription_id of this SmartSenseSubscriptionJson.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """
        Sets the subscription_id of this SmartSenseSubscriptionJson.
        Identifier of SmartSense subscription.

        :param subscription_id: The subscription_id of this SmartSenseSubscriptionJson.
        :type: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")
        if subscription_id is not None and not re.search('^([a-zA-Z]{1}-[0-9]{8}-[a-zA-Z]{1}-[0-9]{8}$)', subscription_id):
            raise ValueError("Invalid value for `subscription_id`, must be a follow pattern or equal to `/^([a-zA-Z]{1}-[0-9]{8}-[a-zA-Z]{1}-[0-9]{8}$)/`")

        self._subscription_id = subscription_id

    @property
    def owner(self):
        """
        Gets the owner of this SmartSenseSubscriptionJson.
        id of the resource owner that is provided by OAuth provider

        :return: The owner of this SmartSenseSubscriptionJson.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this SmartSenseSubscriptionJson.
        id of the resource owner that is provided by OAuth provider

        :param owner: The owner of this SmartSenseSubscriptionJson.
        :type: str
        """

        self._owner = owner

    @property
    def account(self):
        """
        Gets the account of this SmartSenseSubscriptionJson.
        account id of the resource owner that is provided by OAuth provider

        :return: The account of this SmartSenseSubscriptionJson.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this SmartSenseSubscriptionJson.
        account id of the resource owner that is provided by OAuth provider

        :param account: The account of this SmartSenseSubscriptionJson.
        :type: str
        """

        self._account = account

    @property
    def public_in_account(self):
        """
        Gets the public_in_account of this SmartSenseSubscriptionJson.
        resource is visible in account

        :return: The public_in_account of this SmartSenseSubscriptionJson.
        :rtype: bool
        """
        return self._public_in_account

    @public_in_account.setter
    def public_in_account(self, public_in_account):
        """
        Sets the public_in_account of this SmartSenseSubscriptionJson.
        resource is visible in account

        :param public_in_account: The public_in_account of this SmartSenseSubscriptionJson.
        :type: bool
        """

        self._public_in_account = public_in_account

    @property
    def auto_generated(self):
        """
        Gets the auto_generated of this SmartSenseSubscriptionJson.
        Flag of aut generated SmartSense subscription.

        :return: The auto_generated of this SmartSenseSubscriptionJson.
        :rtype: bool
        """
        return self._auto_generated

    @auto_generated.setter
    def auto_generated(self, auto_generated):
        """
        Sets the auto_generated of this SmartSenseSubscriptionJson.
        Flag of aut generated SmartSense subscription.

        :param auto_generated: The auto_generated of this SmartSenseSubscriptionJson.
        :type: bool
        """

        self._auto_generated = auto_generated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SmartSenseSubscriptionJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
