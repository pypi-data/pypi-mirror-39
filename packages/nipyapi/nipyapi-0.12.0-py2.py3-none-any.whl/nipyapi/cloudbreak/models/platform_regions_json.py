# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PlatformRegionsJson(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'regions': 'dict(str, list[str])',
        'display_names': 'dict(str, dict(str, str))',
        'availability_zones': 'dict(str, dict(str, list[str]))',
        'default_regions': 'dict(str, str)'
    }

    attribute_map = {
        'regions': 'regions',
        'display_names': 'displayNames',
        'availability_zones': 'availabilityZones',
        'default_regions': 'defaultRegions'
    }

    def __init__(self, regions=None, display_names=None, availability_zones=None, default_regions=None):
        """
        PlatformRegionsJson - a model defined in Swagger
        """

        self._regions = None
        self._display_names = None
        self._availability_zones = None
        self._default_regions = None

        if regions is not None:
          self.regions = regions
        if display_names is not None:
          self.display_names = display_names
        if availability_zones is not None:
          self.availability_zones = availability_zones
        if default_regions is not None:
          self.default_regions = default_regions

    @property
    def regions(self):
        """
        Gets the regions of this PlatformRegionsJson.
        regions

        :return: The regions of this PlatformRegionsJson.
        :rtype: dict(str, list[str])
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """
        Sets the regions of this PlatformRegionsJson.
        regions

        :param regions: The regions of this PlatformRegionsJson.
        :type: dict(str, list[str])
        """

        self._regions = regions

    @property
    def display_names(self):
        """
        Gets the display_names of this PlatformRegionsJson.
        regions with displayNames

        :return: The display_names of this PlatformRegionsJson.
        :rtype: dict(str, dict(str, str))
        """
        return self._display_names

    @display_names.setter
    def display_names(self, display_names):
        """
        Sets the display_names of this PlatformRegionsJson.
        regions with displayNames

        :param display_names: The display_names of this PlatformRegionsJson.
        :type: dict(str, dict(str, str))
        """

        self._display_names = display_names

    @property
    def availability_zones(self):
        """
        Gets the availability_zones of this PlatformRegionsJson.
        availability zones

        :return: The availability_zones of this PlatformRegionsJson.
        :rtype: dict(str, dict(str, list[str]))
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """
        Sets the availability_zones of this PlatformRegionsJson.
        availability zones

        :param availability_zones: The availability_zones of this PlatformRegionsJson.
        :type: dict(str, dict(str, list[str]))
        """

        self._availability_zones = availability_zones

    @property
    def default_regions(self):
        """
        Gets the default_regions of this PlatformRegionsJson.
        default regions

        :return: The default_regions of this PlatformRegionsJson.
        :rtype: dict(str, str)
        """
        return self._default_regions

    @default_regions.setter
    def default_regions(self, default_regions):
        """
        Sets the default_regions of this PlatformRegionsJson.
        default regions

        :param default_regions: The default_regions of this PlatformRegionsJson.
        :type: dict(str, str)
        """

        self._default_regions = default_regions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PlatformRegionsJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
