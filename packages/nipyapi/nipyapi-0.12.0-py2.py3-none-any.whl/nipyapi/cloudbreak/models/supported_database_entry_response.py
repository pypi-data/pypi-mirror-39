# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SupportedDatabaseEntryResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'database_name': 'str',
        'display_name': 'str',
        'jdbc_prefix': 'str',
        'versions': 'list[str]'
    }

    attribute_map = {
        'database_name': 'databaseName',
        'display_name': 'displayName',
        'jdbc_prefix': 'jdbcPrefix',
        'versions': 'versions'
    }

    def __init__(self, database_name=None, display_name=None, jdbc_prefix=None, versions=None):
        """
        SupportedDatabaseEntryResponse - a model defined in Swagger
        """

        self._database_name = None
        self._display_name = None
        self._jdbc_prefix = None
        self._versions = None

        if database_name is not None:
          self.database_name = database_name
        if display_name is not None:
          self.display_name = display_name
        if jdbc_prefix is not None:
          self.jdbc_prefix = jdbc_prefix
        if versions is not None:
          self.versions = versions

    @property
    def database_name(self):
        """
        Gets the database_name of this SupportedDatabaseEntryResponse.
        Name of the database

        :return: The database_name of this SupportedDatabaseEntryResponse.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """
        Sets the database_name of this SupportedDatabaseEntryResponse.
        Name of the database

        :param database_name: The database_name of this SupportedDatabaseEntryResponse.
        :type: str
        """

        self._database_name = database_name

    @property
    def display_name(self):
        """
        Gets the display_name of this SupportedDatabaseEntryResponse.
        Display name of the database

        :return: The display_name of this SupportedDatabaseEntryResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this SupportedDatabaseEntryResponse.
        Display name of the database

        :param display_name: The display_name of this SupportedDatabaseEntryResponse.
        :type: str
        """

        self._display_name = display_name

    @property
    def jdbc_prefix(self):
        """
        Gets the jdbc_prefix of this SupportedDatabaseEntryResponse.
        Jdbc prefix of the database

        :return: The jdbc_prefix of this SupportedDatabaseEntryResponse.
        :rtype: str
        """
        return self._jdbc_prefix

    @jdbc_prefix.setter
    def jdbc_prefix(self, jdbc_prefix):
        """
        Sets the jdbc_prefix of this SupportedDatabaseEntryResponse.
        Jdbc prefix of the database

        :param jdbc_prefix: The jdbc_prefix of this SupportedDatabaseEntryResponse.
        :type: str
        """

        self._jdbc_prefix = jdbc_prefix

    @property
    def versions(self):
        """
        Gets the versions of this SupportedDatabaseEntryResponse.
        Supported version types currently only for Oracle

        :return: The versions of this SupportedDatabaseEntryResponse.
        :rtype: list[str]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """
        Sets the versions of this SupportedDatabaseEntryResponse.
        Supported version types currently only for Oracle

        :param versions: The versions of this SupportedDatabaseEntryResponse.
        :type: list[str]
        """

        self._versions = versions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SupportedDatabaseEntryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
