# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserProfileResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential': 'CredentialResponse',
        'owner': 'str',
        'account': 'str',
        'ui_properties': 'dict(str, object)'
    }

    attribute_map = {
        'credential': 'credential',
        'owner': 'owner',
        'account': 'account',
        'ui_properties': 'uiProperties'
    }

    def __init__(self, credential=None, owner=None, account=None, ui_properties=None):
        """
        UserProfileResponse - a model defined in Swagger
        """

        self._credential = None
        self._owner = None
        self._account = None
        self._ui_properties = None

        if credential is not None:
          self.credential = credential
        if owner is not None:
          self.owner = owner
        if account is not None:
          self.account = account
        if ui_properties is not None:
          self.ui_properties = ui_properties

    @property
    def credential(self):
        """
        Gets the credential of this UserProfileResponse.

        :return: The credential of this UserProfileResponse.
        :rtype: CredentialResponse
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """
        Sets the credential of this UserProfileResponse.

        :param credential: The credential of this UserProfileResponse.
        :type: CredentialResponse
        """

        self._credential = credential

    @property
    def owner(self):
        """
        Gets the owner of this UserProfileResponse.

        :return: The owner of this UserProfileResponse.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this UserProfileResponse.

        :param owner: The owner of this UserProfileResponse.
        :type: str
        """

        self._owner = owner

    @property
    def account(self):
        """
        Gets the account of this UserProfileResponse.

        :return: The account of this UserProfileResponse.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this UserProfileResponse.

        :param account: The account of this UserProfileResponse.
        :type: str
        """

        self._account = account

    @property
    def ui_properties(self):
        """
        Gets the ui_properties of this UserProfileResponse.

        :return: The ui_properties of this UserProfileResponse.
        :rtype: dict(str, object)
        """
        return self._ui_properties

    @ui_properties.setter
    def ui_properties(self, ui_properties):
        """
        Sets the ui_properties of this UserProfileResponse.

        :param ui_properties: The ui_properties of this UserProfileResponse.
        :type: dict(str, object)
        """

        self._ui_properties = ui_properties

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserProfileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
