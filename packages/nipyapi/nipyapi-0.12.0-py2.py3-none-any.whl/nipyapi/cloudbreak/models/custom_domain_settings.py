# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CustomDomainSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_domain': 'str',
        'custom_hostname': 'str',
        'cluster_name_as_subdomain': 'bool',
        'hostgroup_name_as_hostname': 'bool'
    }

    attribute_map = {
        'custom_domain': 'customDomain',
        'custom_hostname': 'customHostname',
        'cluster_name_as_subdomain': 'clusterNameAsSubdomain',
        'hostgroup_name_as_hostname': 'hostgroupNameAsHostname'
    }

    def __init__(self, custom_domain=None, custom_hostname=None, cluster_name_as_subdomain=False, hostgroup_name_as_hostname=False):
        """
        CustomDomainSettings - a model defined in Swagger
        """

        self._custom_domain = None
        self._custom_hostname = None
        self._cluster_name_as_subdomain = None
        self._hostgroup_name_as_hostname = None

        if custom_domain is not None:
          self.custom_domain = custom_domain
        if custom_hostname is not None:
          self.custom_hostname = custom_hostname
        if cluster_name_as_subdomain is not None:
          self.cluster_name_as_subdomain = cluster_name_as_subdomain
        if hostgroup_name_as_hostname is not None:
          self.hostgroup_name_as_hostname = hostgroup_name_as_hostname

    @property
    def custom_domain(self):
        """
        Gets the custom_domain of this CustomDomainSettings.
        custom domain name for the nodes in the stack

        :return: The custom_domain of this CustomDomainSettings.
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """
        Sets the custom_domain of this CustomDomainSettings.
        custom domain name for the nodes in the stack

        :param custom_domain: The custom_domain of this CustomDomainSettings.
        :type: str
        """

        self._custom_domain = custom_domain

    @property
    def custom_hostname(self):
        """
        Gets the custom_hostname of this CustomDomainSettings.
        custom hostname for nodes in the stack

        :return: The custom_hostname of this CustomDomainSettings.
        :rtype: str
        """
        return self._custom_hostname

    @custom_hostname.setter
    def custom_hostname(self, custom_hostname):
        """
        Sets the custom_hostname of this CustomDomainSettings.
        custom hostname for nodes in the stack

        :param custom_hostname: The custom_hostname of this CustomDomainSettings.
        :type: str
        """

        self._custom_hostname = custom_hostname

    @property
    def cluster_name_as_subdomain(self):
        """
        Gets the cluster_name_as_subdomain of this CustomDomainSettings.
        using the cluster name to create subdomain

        :return: The cluster_name_as_subdomain of this CustomDomainSettings.
        :rtype: bool
        """
        return self._cluster_name_as_subdomain

    @cluster_name_as_subdomain.setter
    def cluster_name_as_subdomain(self, cluster_name_as_subdomain):
        """
        Sets the cluster_name_as_subdomain of this CustomDomainSettings.
        using the cluster name to create subdomain

        :param cluster_name_as_subdomain: The cluster_name_as_subdomain of this CustomDomainSettings.
        :type: bool
        """

        self._cluster_name_as_subdomain = cluster_name_as_subdomain

    @property
    def hostgroup_name_as_hostname(self):
        """
        Gets the hostgroup_name_as_hostname of this CustomDomainSettings.
        using the hostgroup names to create hostnames

        :return: The hostgroup_name_as_hostname of this CustomDomainSettings.
        :rtype: bool
        """
        return self._hostgroup_name_as_hostname

    @hostgroup_name_as_hostname.setter
    def hostgroup_name_as_hostname(self, hostgroup_name_as_hostname):
        """
        Sets the hostgroup_name_as_hostname of this CustomDomainSettings.
        using the hostgroup names to create hostnames

        :param hostgroup_name_as_hostname: The hostgroup_name_as_hostname of this CustomDomainSettings.
        :type: bool
        """

        self._hostgroup_name_as_hostname = hostgroup_name_as_hostname

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CustomDomainSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
