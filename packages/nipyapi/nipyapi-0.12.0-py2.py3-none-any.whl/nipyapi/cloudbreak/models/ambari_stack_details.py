# coding: utf-8

"""
    Cloudbreak API

    Cloudbreak is a powerful left surf that breaks over a coral reef, a mile off southwest the island of Tavarua, Fiji. Cloudbreak is a cloud agnostic Hadoop as a Service API. Abstracts the provisioning and ease management and monitoring of on-demand clusters. SequenceIQ's Cloudbreak is a RESTful application development platform with the goal of helping developers to build solutions for deploying Hadoop YARN clusters in different environments. Once it is deployed in your favourite servlet container it exposes a REST API allowing to span up Hadoop clusters of arbitary sizes and cloud providers. Provisioning Hadoop has never been easier. Cloudbreak is built on the foundation of cloud providers API (Amazon AWS, Microsoft Azure, Google Cloud Platform, Openstack), Apache Ambari, Docker lightweight containers, Swarm and Consul. For further product documentation follow the link: <a href=\"http://hortonworks.com/apache/cloudbreak/\">http://hortonworks.com/apache/cloudbreak/</a>

    OpenAPI spec version: 2.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AmbariStackDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stack': 'str',
        'version': 'str',
        'os': 'str',
        'stack_repo_id': 'str',
        'stack_base_url': 'str',
        'utils_repo_id': 'str',
        'utils_base_url': 'str',
        'enable_gpl_repo': 'bool',
        'verify': 'bool',
        'repository_version': 'str',
        'version_definition_file_url': 'str',
        'mpack_url': 'str',
        'mpacks': 'list[ManagementPackDetails]'
    }

    attribute_map = {
        'stack': 'stack',
        'version': 'version',
        'os': 'os',
        'stack_repo_id': 'stackRepoId',
        'stack_base_url': 'stackBaseURL',
        'utils_repo_id': 'utilsRepoId',
        'utils_base_url': 'utilsBaseURL',
        'enable_gpl_repo': 'enableGplRepo',
        'verify': 'verify',
        'repository_version': 'repositoryVersion',
        'version_definition_file_url': 'versionDefinitionFileUrl',
        'mpack_url': 'mpackUrl',
        'mpacks': 'mpacks'
    }

    def __init__(self, stack=None, version=None, os=None, stack_repo_id=None, stack_base_url=None, utils_repo_id=None, utils_base_url=None, enable_gpl_repo=False, verify=False, repository_version=None, version_definition_file_url=None, mpack_url=None, mpacks=None):
        """
        AmbariStackDetails - a model defined in Swagger
        """

        self._stack = None
        self._version = None
        self._os = None
        self._stack_repo_id = None
        self._stack_base_url = None
        self._utils_repo_id = None
        self._utils_base_url = None
        self._enable_gpl_repo = None
        self._verify = None
        self._repository_version = None
        self._version_definition_file_url = None
        self._mpack_url = None
        self._mpacks = None

        if stack is not None:
          self.stack = stack
        if version is not None:
          self.version = version
        if os is not None:
          self.os = os
        if stack_repo_id is not None:
          self.stack_repo_id = stack_repo_id
        if stack_base_url is not None:
          self.stack_base_url = stack_base_url
        if utils_repo_id is not None:
          self.utils_repo_id = utils_repo_id
        if utils_base_url is not None:
          self.utils_base_url = utils_base_url
        if enable_gpl_repo is not None:
          self.enable_gpl_repo = enable_gpl_repo
        if verify is not None:
          self.verify = verify
        if repository_version is not None:
          self.repository_version = repository_version
        if version_definition_file_url is not None:
          self.version_definition_file_url = version_definition_file_url
        if mpack_url is not None:
          self.mpack_url = mpack_url
        if mpacks is not None:
          self.mpacks = mpacks

    @property
    def stack(self):
        """
        Gets the stack of this AmbariStackDetails.
        name of the stack, like HDP

        :return: The stack of this AmbariStackDetails.
        :rtype: str
        """
        return self._stack

    @stack.setter
    def stack(self, stack):
        """
        Sets the stack of this AmbariStackDetails.
        name of the stack, like HDP

        :param stack: The stack of this AmbariStackDetails.
        :type: str
        """

        self._stack = stack

    @property
    def version(self):
        """
        Gets the version of this AmbariStackDetails.
        version of the stack

        :return: The version of this AmbariStackDetails.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this AmbariStackDetails.
        version of the stack

        :param version: The version of this AmbariStackDetails.
        :type: str
        """

        self._version = version

    @property
    def os(self):
        """
        Gets the os of this AmbariStackDetails.
        operating system for the stack, like redhat6

        :return: The os of this AmbariStackDetails.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this AmbariStackDetails.
        operating system for the stack, like redhat6

        :param os: The os of this AmbariStackDetails.
        :type: str
        """

        self._os = os

    @property
    def stack_repo_id(self):
        """
        Gets the stack_repo_id of this AmbariStackDetails.
        id of the stack repository

        :return: The stack_repo_id of this AmbariStackDetails.
        :rtype: str
        """
        return self._stack_repo_id

    @stack_repo_id.setter
    def stack_repo_id(self, stack_repo_id):
        """
        Sets the stack_repo_id of this AmbariStackDetails.
        id of the stack repository

        :param stack_repo_id: The stack_repo_id of this AmbariStackDetails.
        :type: str
        """

        self._stack_repo_id = stack_repo_id

    @property
    def stack_base_url(self):
        """
        Gets the stack_base_url of this AmbariStackDetails.
        url of the stack repository

        :return: The stack_base_url of this AmbariStackDetails.
        :rtype: str
        """
        return self._stack_base_url

    @stack_base_url.setter
    def stack_base_url(self, stack_base_url):
        """
        Sets the stack_base_url of this AmbariStackDetails.
        url of the stack repository

        :param stack_base_url: The stack_base_url of this AmbariStackDetails.
        :type: str
        """

        self._stack_base_url = stack_base_url

    @property
    def utils_repo_id(self):
        """
        Gets the utils_repo_id of this AmbariStackDetails.
        id of the stack utils repository

        :return: The utils_repo_id of this AmbariStackDetails.
        :rtype: str
        """
        return self._utils_repo_id

    @utils_repo_id.setter
    def utils_repo_id(self, utils_repo_id):
        """
        Sets the utils_repo_id of this AmbariStackDetails.
        id of the stack utils repository

        :param utils_repo_id: The utils_repo_id of this AmbariStackDetails.
        :type: str
        """

        self._utils_repo_id = utils_repo_id

    @property
    def utils_base_url(self):
        """
        Gets the utils_base_url of this AmbariStackDetails.
        url of the stack utils repository

        :return: The utils_base_url of this AmbariStackDetails.
        :rtype: str
        """
        return self._utils_base_url

    @utils_base_url.setter
    def utils_base_url(self, utils_base_url):
        """
        Sets the utils_base_url of this AmbariStackDetails.
        url of the stack utils repository

        :param utils_base_url: The utils_base_url of this AmbariStackDetails.
        :type: str
        """

        self._utils_base_url = utils_base_url

    @property
    def enable_gpl_repo(self):
        """
        Gets the enable_gpl_repo of this AmbariStackDetails.
        enable gpl repository

        :return: The enable_gpl_repo of this AmbariStackDetails.
        :rtype: bool
        """
        return self._enable_gpl_repo

    @enable_gpl_repo.setter
    def enable_gpl_repo(self, enable_gpl_repo):
        """
        Sets the enable_gpl_repo of this AmbariStackDetails.
        enable gpl repository

        :param enable_gpl_repo: The enable_gpl_repo of this AmbariStackDetails.
        :type: bool
        """

        self._enable_gpl_repo = enable_gpl_repo

    @property
    def verify(self):
        """
        Gets the verify of this AmbariStackDetails.
        whether to verify or not the repo url

        :return: The verify of this AmbariStackDetails.
        :rtype: bool
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """
        Sets the verify of this AmbariStackDetails.
        whether to verify or not the repo url

        :param verify: The verify of this AmbariStackDetails.
        :type: bool
        """

        self._verify = verify

    @property
    def repository_version(self):
        """
        Gets the repository_version of this AmbariStackDetails.
        version of the repository for VDF file creation in Ambari

        :return: The repository_version of this AmbariStackDetails.
        :rtype: str
        """
        return self._repository_version

    @repository_version.setter
    def repository_version(self, repository_version):
        """
        Sets the repository_version of this AmbariStackDetails.
        version of the repository for VDF file creation in Ambari

        :param repository_version: The repository_version of this AmbariStackDetails.
        :type: str
        """

        self._repository_version = repository_version

    @property
    def version_definition_file_url(self):
        """
        Gets the version_definition_file_url of this AmbariStackDetails.
        local path on the Ambari server or URL that point to the desired VDF file

        :return: The version_definition_file_url of this AmbariStackDetails.
        :rtype: str
        """
        return self._version_definition_file_url

    @version_definition_file_url.setter
    def version_definition_file_url(self, version_definition_file_url):
        """
        Sets the version_definition_file_url of this AmbariStackDetails.
        local path on the Ambari server or URL that point to the desired VDF file

        :param version_definition_file_url: The version_definition_file_url of this AmbariStackDetails.
        :type: str
        """

        self._version_definition_file_url = version_definition_file_url

    @property
    def mpack_url(self):
        """
        Gets the mpack_url of this AmbariStackDetails.
        url the MPACK that needs to be installed before HDF installation

        :return: The mpack_url of this AmbariStackDetails.
        :rtype: str
        """
        return self._mpack_url

    @mpack_url.setter
    def mpack_url(self, mpack_url):
        """
        Sets the mpack_url of this AmbariStackDetails.
        url the MPACK that needs to be installed before HDF installation

        :param mpack_url: The mpack_url of this AmbariStackDetails.
        :type: str
        """

        self._mpack_url = mpack_url

    @property
    def mpacks(self):
        """
        Gets the mpacks of this AmbariStackDetails.
        Management packs which are needed for the HDP / HDF clusters

        :return: The mpacks of this AmbariStackDetails.
        :rtype: list[ManagementPackDetails]
        """
        return self._mpacks

    @mpacks.setter
    def mpacks(self, mpacks):
        """
        Sets the mpacks of this AmbariStackDetails.
        Management packs which are needed for the HDP / HDF clusters

        :param mpacks: The mpacks of this AmbariStackDetails.
        :type: list[ManagementPackDetails]
        """

        self._mpacks = mpacks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AmbariStackDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
