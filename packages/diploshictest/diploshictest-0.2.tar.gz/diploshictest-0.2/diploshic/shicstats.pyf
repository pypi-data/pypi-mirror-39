! File shicstats.pyf
python module shicstats
interface
  subroutine computeR2Matrix(nSamps,nSnps,haps,r2Matrix)
    intent(c) computeR2Matrix
    intent(c)
    integer intent(in), dimension(nSnps, nSamps) :: haps
    double precision intent(out), dimension(nSnps, nSnps) :: r2Matrix
    integer intent(hide), depend(haps) :: nSnps = shape(haps, 0)
    integer intent(hide), depend(haps) :: nSamps = shape(haps, 1)
  end subroutine computeR2Matrix
  subroutine omega(nSnps,r2Matrix,omegaMax)
    intent(c) omega
    intent(c)
    double precision intent(in), dimension(nSnps, nSnps) :: r2Matrix
    integer intent(hide), depend(r2Matrix) :: nSnps = shape(r2Matrix, 0)
    double precision intent(out) :: omegaMax(1)
  end subroutine omega
  subroutine ZnS(nSnps,r2Matrix,zns)
    intent(c) ZnS
    intent(c)
    double precision intent(in), dimension(nSnps, nSnps) :: r2Matrix
    integer intent(hide), depend(r2Matrix) :: nSnps = shape(r2Matrix, 0)
    double precision intent(out) :: zns(1)
  end subroutine ZnS
  subroutine pairwiseDiffs(nSamps,nSnps,haps,diffLs)
    intent(c) pairwiseDiffs
    intent(c)
    integer intent(in), dimension(nSnps, nSamps) :: haps
    double precision intent(out), dimension(nSamps*(nSamps-1)/2) :: diffLs
    integer intent(hide), depend(haps) :: nSnps = shape(haps, 0)
    integer intent(hide), depend(haps) :: nSamps = shape(haps, 1)
  end subroutine pairwiseDiffs
  subroutine pairwiseDiffsDiplo(nSamps,nSnps,haps,diffLs)
    intent(c) pairwiseDiffsDiplo
    intent(c)
    integer intent(in), dimension(nSnps, nSamps) :: haps
    double precision intent(out), dimension(nSamps*(nSamps-1)/2) :: diffLs
    integer intent(hide), depend(haps) :: nSnps = shape(haps, 0)
    integer intent(hide), depend(haps) :: nSamps = shape(haps, 1)
  end subroutine pairwiseDiffsDiplo
  subroutine getHaplotypeFreqSpec(nSamps,nSnps,haps,hapCounts)
    intent(c) getHaplotypeFreqSpec
    intent(c)
    integer intent(in), dimension(nSnps, nSamps) :: haps
    integer intent(out), dimension(nSamps+1) :: hapCounts
    integer intent(hide), depend(haps) :: nSnps = shape(haps, 0)
    integer intent(hide), depend(haps) :: nSamps = shape(haps, 1)
end interface
end python module shicstats
