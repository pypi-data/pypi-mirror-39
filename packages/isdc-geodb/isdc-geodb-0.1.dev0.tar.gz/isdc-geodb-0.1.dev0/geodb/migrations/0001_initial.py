# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.contrib.gis.db.models.fields


class Migration(migrations.Migration):

    dependencies = [
        ('geodb', 'userfunctions_migration'),
    ]

    operations = [
        migrations.CreateModel(
            name='AfgAdmbndaAdm1',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('prov_na_dar', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_en', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_dar', models.CharField(max_length=255, blank=True)),
                ('reg_code', models.IntegerField(null=True, blank=True)),
                ('area', models.FloatField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_admbnda_adm1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgAdmbndaAdm2',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('unit_type', models.CharField(max_length=255, blank=True)),
                ('dist_na_dar', models.CharField(max_length=255, blank=True)),
                ('prov_na_dar', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_en', models.CharField(max_length=255, blank=True)),
                ('dist_na_ps', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_dar', models.CharField(max_length=255, blank=True)),
                ('test2', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_admbnda_adm2',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgAdmbndaInt',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('name_en_short', models.CharField(max_length=255, blank=True)),
                ('names_ps', models.CharField(max_length=255, blank=True)),
                ('name_prs', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_admbnda_int',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgAdmbndlAdm1',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326, null=True, blank=True)),
                ('fid_afg_admbnda_adm1_50000_agcho', models.IntegerField(null=True, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('prov_na_dar', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_en', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_dar', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_admbndl_adm1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgAdmbndlAdm2',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('unit_type', models.CharField(max_length=255, blank=True)),
                ('dist_na_dar', models.CharField(max_length=255, blank=True)),
                ('prov_na_dar', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_en', models.CharField(max_length=255, blank=True)),
                ('dist_na_ps', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_dar', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_admbndl_adm2',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgAdmbndlInt',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326, null=True, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_admbndl_int',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgAirdrma',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, dim=3, null=True, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('nameshort', models.CharField(max_length=255, blank=True)),
                ('namelong', models.CharField(max_length=255, blank=True)),
                ('city', models.CharField(max_length=255, blank=True)),
                ('icao', models.CharField(max_length=255, blank=True)),
                ('iata', models.CharField(max_length=255, blank=True)),
                ('apttype', models.CharField(max_length=255, blank=True)),
                ('aptclass', models.CharField(max_length=255, blank=True)),
                ('authority', models.CharField(max_length=255, blank=True)),
                ('status', models.CharField(max_length=255, blank=True)),
                ('rwpaved', models.CharField(max_length=255, blank=True)),
                ('rwlengthm', models.IntegerField(null=True, blank=True)),
                ('elevm', models.IntegerField(null=True, blank=True)),
                ('humuse', models.CharField(max_length=255, blank=True)),
                ('humoperate', models.CharField(max_length=255, blank=True)),
                ('locprecisi', models.CharField(max_length=255, blank=True)),
                ('iso3', models.CharField(max_length=255, blank=True)),
                ('lastcheckd', models.DateTimeField(null=True, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('createdate', models.DateTimeField(null=True, blank=True)),
                ('updatedate', models.DateTimeField(null=True, blank=True)),
                ('adjusted_by', models.CharField(max_length=255, blank=True)),
                ('type', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_airdrma',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgAirdrmp',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, dim=3, null=True, blank=True)),
                ('nameshort', models.CharField(max_length=255, blank=True)),
                ('namelong', models.CharField(max_length=255, blank=True)),
                ('city', models.CharField(max_length=255, blank=True)),
                ('icao', models.CharField(max_length=255, blank=True)),
                ('iata', models.CharField(max_length=255, blank=True)),
                ('apttype', models.CharField(max_length=255, blank=True)),
                ('aptclass', models.CharField(max_length=255, blank=True)),
                ('authority', models.CharField(max_length=255, blank=True)),
                ('status', models.CharField(max_length=255, blank=True)),
                ('rwpaved', models.CharField(max_length=255, blank=True)),
                ('rwlengthm', models.IntegerField(null=True, blank=True)),
                ('rwlengthf', models.IntegerField(null=True, blank=True)),
                ('elevm', models.IntegerField(null=True, blank=True)),
                ('humuse', models.CharField(max_length=255, blank=True)),
                ('humoperate', models.CharField(max_length=255, blank=True)),
                ('locprecisi', models.CharField(max_length=255, blank=True)),
                ('latitude', models.FloatField(null=True, blank=True)),
                ('longitude', models.FloatField(null=True, blank=True)),
                ('iso3', models.CharField(max_length=255, blank=True)),
                ('country', models.CharField(max_length=255, blank=True)),
                ('lastcheckd', models.DateTimeField(null=True, blank=True)),
                ('remarks', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('createdate', models.DateTimeField(null=True, blank=True)),
                ('updatedate', models.DateTimeField(null=True, blank=True)),
                ('geonameid', models.IntegerField(null=True, blank=True)),
                ('adjusted_by', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.CharField(max_length=20, blank=True)),
                ('dist_code', models.CharField(max_length=20, blank=True)),
            ],
            options={
                'db_table': 'afg_airdrmp',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgAvsa',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('avalanche_cat', models.CharField(max_length=255, blank=True)),
                ('avalanche_id', models.IntegerField(null=True, blank=True)),
                ('avalanche_zone', models.CharField(max_length=255, blank=True)),
                ('avalanche_area', models.IntegerField(null=True, blank=True)),
                ('avalanche_lenght_m', models.IntegerField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('sum_area_sqm', models.IntegerField(null=True, blank=True)),
                ('avalanche_pop', models.IntegerField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_avsa',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgBasinLvl4GlofasPoint',
            fields=[
                ('gid', models.IntegerField(serialize=False, primary_key=True)),
                ('value', models.DecimalField(null=True, max_digits=10, decimal_places=0, blank=True)),
                ('wcmwf_lat', models.DecimalField(null=True, max_digits=30, decimal_places=20, blank=True)),
                ('wcmwf_lon', models.DecimalField(null=True, max_digits=30, decimal_places=20, blank=True)),
                ('shape_leng', models.DecimalField(null=True, max_digits=30, decimal_places=20, blank=True)),
                ('shape_area', models.DecimalField(null=True, max_digits=30, decimal_places=20, blank=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_basin_lvl4_glofas_point',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaAdm1ItsProvc',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('facilities_name', models.CharField(max_length=255, blank=True)),
                ('time', models.CharField(max_length=255, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_adm1_its_provc',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaAdm1NearestProvc',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('facilities_name', models.CharField(max_length=255, blank=True)),
                ('time', models.CharField(max_length=255, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_adm1_nearest_provc',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaAdm2NearestDistrictc',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('facilities_name', models.CharField(max_length=255, blank=True)),
                ('time', models.CharField(max_length=255, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_adm2_nearest_districtc',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaAirdrm',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('facilities_name', models.CharField(max_length=255, blank=True)),
                ('time', models.CharField(max_length=255, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_airdrm',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaGsmcvr',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('gsm_coverage', models.CharField(max_length=255, blank=True)),
                ('gsm_coverage_population', models.FloatField(null=True, blank=True)),
                ('gsm_coverage_area_sqm', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_gsmcvr',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaHltfacTier1',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('facilities_name', models.CharField(max_length=255, blank=True)),
                ('time', models.CharField(max_length=255, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_hltfac_tier1',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaHltfacTier2',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('facilities_name', models.CharField(max_length=255, blank=True)),
                ('time', models.CharField(max_length=255, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_hltfac_tier2',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaHltfacTier3',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('facilities_name', models.CharField(max_length=255, blank=True)),
                ('time', models.CharField(max_length=255, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_hltfac_tier3',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCapaHltfacTierall',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('facilities_name', models.CharField(max_length=255, blank=True)),
                ('time', models.CharField(max_length=255, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capa_hltfac_tierall',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptAdm1ItsProvcImmap',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('facilities_name', models.CharField(max_length=50, blank=True)),
                ('time', models.CharField(max_length=50, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('sum_area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_adm1_its_provc_immap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptAdm1NearestProvcImmap',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('facilities_name', models.CharField(max_length=50, blank=True)),
                ('time', models.CharField(max_length=50, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('sum_area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_adm1_nearest_provc_immap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptAdm2NearestDistrictcImmap',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('facilities_name', models.CharField(max_length=50, blank=True)),
                ('time', models.CharField(max_length=50, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('sum_area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_adm2_nearest_districtc_immap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptAirdrmImmap',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('facilities_name', models.CharField(max_length=50, blank=True)),
                ('time', models.CharField(max_length=50, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('sum_area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_airdrm_immap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptGmscvr',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('gsm_coverage', models.CharField(max_length=255, blank=True)),
                ('frequency', models.IntegerField(null=True, blank=True)),
                ('gsm_coverage_population', models.FloatField(null=True, blank=True)),
                ('gsm_coverage_area_sqm', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_gmscvr',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptHltfacTier1Immap',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('facilities_name', models.CharField(max_length=50, blank=True)),
                ('time', models.CharField(max_length=50, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('sum_area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_hltfac_tier1_immap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptHltfacTier2Immap',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('facilities_name', models.CharField(max_length=50, blank=True)),
                ('time', models.CharField(max_length=50, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('sum_area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_hltfac_tier2_immap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptHltfacTier3Immap',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('facilities_name', models.CharField(max_length=50, blank=True)),
                ('time', models.CharField(max_length=50, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('sum_area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_hltfac_tier3_immap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptHltfacTierallImmap',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('facilities_name', models.CharField(max_length=50, blank=True)),
                ('time', models.CharField(max_length=50, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('sum_area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_hltfac_tierall_immap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgCaptPpl',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('vil_uid', models.CharField(max_length=50, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('distance_to_road', models.IntegerField(null=True, blank=True)),
                ('time_to_road', models.IntegerField(null=True, blank=True)),
                ('airdrm_id', models.IntegerField(null=True, blank=True)),
                ('airdrm_dist', models.IntegerField(null=True, blank=True)),
                ('airdrm_time', models.IntegerField(null=True, blank=True)),
                ('ppl_provc_vuid', models.CharField(max_length=50, blank=True)),
                ('ppl_provc_dist', models.IntegerField(null=True, blank=True)),
                ('ppl_provc_time', models.IntegerField(null=True, blank=True)),
                ('ppl_provc_its_vuid', models.CharField(max_length=50, blank=True)),
                ('ppl_provc_its_dist', models.IntegerField(null=True, blank=True)),
                ('ppl_provc_its_time', models.IntegerField(null=True, blank=True)),
                ('ppl_distc_vuid', models.CharField(max_length=50, blank=True)),
                ('ppl_distc_dist', models.IntegerField(null=True, blank=True)),
                ('ppl_distc_time', models.IntegerField(null=True, blank=True)),
                ('ppl_distc_its_vuid', models.CharField(max_length=50, blank=True)),
                ('ppl_distc_its_dist', models.IntegerField(null=True, blank=True)),
                ('ppl_distc_its_time', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier1_id', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier1_dist', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier1_time', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier2_id', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier2_dist', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier2_time', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier3_id', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier3_dist', models.IntegerField(null=True, blank=True)),
                ('hltfac_tier3_time', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_capt_ppl',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgEqHzda',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('acc_val', models.FloatField(null=True, blank=True)),
                ('valley', models.IntegerField(null=True, blank=True)),
                ('seismic_intensity_and_description', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('data', models.CharField(max_length=255, blank=True)),
                ('population_at_risk', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
                ('seismic_intensity_cat', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'db_table': 'afg_eq_hzda',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgEqtUnkPplEqHzd',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('acc_val', models.FloatField(null=True, blank=True)),
                ('seismic_intensity_and_description', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('data', models.CharField(max_length=255, blank=True)),
                ('seismic_intensity_cat', models.CharField(max_length=255, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'db_table': 'afg_eqt_unk_ppl_eq_hzd',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgFaultslUnkCafd',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326, null=True, blank=True)),
                ('shape_leng', models.FloatField(null=True, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('faultid', models.IntegerField(null=True, blank=True)),
                ('type', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('remarks', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_faultsl_unk_cafd',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgFaultslUnkUsgs',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326, null=True, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('data', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_faultsl_unk_usgs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgGeologyTecta',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_geology_tecta',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgHltfac',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('facility_id', models.FloatField(null=True, blank=True)),
                ('vilicode', models.CharField(max_length=50, blank=True)),
                ('facility_name', models.CharField(max_length=255, blank=True)),
                ('facility_name_dari', models.CharField(max_length=255, blank=True)),
                ('facility_name_pashto', models.CharField(max_length=255, blank=True)),
                ('location', models.CharField(max_length=255, blank=True)),
                ('location_dari', models.CharField(max_length=255, blank=True)),
                ('location_pashto', models.CharField(max_length=255, blank=True)),
                ('facilitytype', models.FloatField(null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('lon', models.FloatField(null=True, blank=True)),
                ('activestatus', models.CharField(max_length=255, blank=True)),
                ('date_established', models.DateTimeField(null=True, blank=True)),
                ('subimplementer', models.CharField(max_length=255, blank=True)),
                ('locationsource', models.CharField(max_length=255, blank=True)),
                ('moph', models.CharField(max_length=250, blank=True)),
                ('hproreply', models.CharField(max_length=250, blank=True)),
                ('facility_types_description', models.CharField(max_length=255, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=250, blank=True)),
                ('prov_na_en', models.CharField(max_length=250, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('hpro_facilitytypes_description', models.CharField(max_length=250, blank=True)),
            ],
            options={
                'db_table': 'afg_hltfac',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgIncidentOasis',
            fields=[
                ('uid', models.IntegerField(serialize=False, primary_key=True, db_column='UID')),
                ('xmin', models.FloatField(null=True, db_column='XMIN', blank=True)),
                ('xmax', models.FloatField(null=True, db_column='XMAX', blank=True)),
                ('ymin', models.FloatField(null=True, db_column='YMIN', blank=True)),
                ('ymax', models.FloatField(null=True, db_column='YMAX', blank=True)),
                ('id', models.CharField(max_length=255, db_column='ID', blank=True)),
                ('name', models.CharField(max_length=255, db_column='NAME', blank=True)),
                ('type', models.CharField(max_length=255, db_column='TYPE', blank=True)),
                ('target', models.CharField(max_length=255, db_column='TARGET', blank=True)),
                ('dead', models.IntegerField(null=True, blank=True)),
                ('affected', models.IntegerField(null=True, blank=True)),
                ('violent', models.IntegerField(null=True, blank=True)),
                ('injured', models.IntegerField(null=True, blank=True)),
                ('incident_date', models.DateField(null=True, blank=True)),
                ('time00', models.CharField(max_length=255, blank=True)),
                ('locdesc', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('town', models.CharField(max_length=255, blank=True)),
                ('district', models.CharField(max_length=255, blank=True)),
                ('province', models.CharField(max_length=255, blank=True)),
                ('description', models.CharField(max_length=255, blank=True)),
                ('scoring', models.IntegerField(null=True, blank=True)),
                ('incident_dateserial', models.BigIntegerField(null=True, blank=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('accumulative_affected', models.IntegerField(null=True, blank=True)),
                ('main_type', models.CharField(max_length=255, blank=True)),
                ('main_target', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_incident_oasis',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgIncidentOasisTemp',
            fields=[
                ('uid', models.IntegerField(serialize=False, primary_key=True, db_column='UID')),
                ('name', models.CharField(max_length=255, db_column='NAME', blank=True)),
                ('type', models.CharField(max_length=255, db_column='TYPE', blank=True)),
                ('target', models.CharField(max_length=255, db_column='TARGET', blank=True)),
                ('dead', models.IntegerField(null=True, blank=True)),
                ('affected', models.IntegerField(null=True, blank=True)),
                ('violent', models.IntegerField(null=True, blank=True)),
                ('injured', models.IntegerField(null=True, blank=True)),
                ('incident_date', models.DateField(null=True, blank=True)),
                ('locdesc', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('town', models.CharField(max_length=255, blank=True)),
                ('district', models.CharField(max_length=255, blank=True)),
                ('province', models.CharField(max_length=255, blank=True)),
                ('description', models.CharField(max_length=255, blank=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_incident_oasis_temp',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgLndcrva',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('lccsuslb', models.CharField(max_length=255, blank=True)),
                ('lccsperc', models.CharField(max_length=255, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('aggcode_simplified', models.CharField(max_length=255, blank=True)),
                ('agg_simplified_description', models.CharField(max_length=255, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.IntegerField(null=True, blank=True)),
                ('area_buildup_assoc', models.CharField(max_length=255, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('lccs_main_description', models.CharField(max_length=255, blank=True)),
                ('lccs_sub_description', models.CharField(max_length=255, blank=True)),
                ('lccsuslb_simplified', models.CharField(max_length=255, blank=True)),
                ('lccs_aggregated', models.CharField(max_length=255, blank=True)),
                ('aggcode', models.CharField(max_length=255, blank=True)),
                ('vuid_buildings', models.FloatField(null=True, blank=True)),
                ('vuid_population', models.FloatField(null=True, blank=True)),
                ('vuid_pop_per_building', models.FloatField(null=True, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('type_settlement', models.CharField(max_length=255, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('reg_unama_na_en', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_lndcrva',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgLndcrvaCity',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('osm_id', models.CharField(max_length=255, blank=True)),
                ('code', models.IntegerField(null=True, blank=True)),
                ('fclass', models.CharField(max_length=255, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_lndcrva_city',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgLndcrvaSimplified',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('lccsperc', models.CharField(max_length=255, blank=True)),
                ('aggcode', models.CharField(max_length=255, blank=True)),
                ('aggcode_simplified', models.CharField(max_length=255, blank=True)),
                ('agg_simplified_description', models.CharField(max_length=255, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('vuid_population_landscan', models.IntegerField(null=True, blank=True)),
                ('vuid_area_sqm', models.FloatField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('population_misti', models.IntegerField(null=True, blank=True)),
                ('note', models.CharField(max_length=255, blank=True)),
                ('edited_by', models.CharField(max_length=255, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('type_settlement', models.CharField(max_length=255, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('unit_type', models.CharField(max_length=255, blank=True)),
                ('dist_na_dar', models.CharField(max_length=255, blank=True)),
                ('prov_na_dar', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_en', models.CharField(max_length=255, blank=True)),
                ('dist_na_ps', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_dar', models.CharField(max_length=255, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_lndcrva_simplified',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgLspAffpplp',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('lsi_ku', models.IntegerField(null=True, blank=True)),
                ('ls_s1_wb', models.IntegerField(null=True, blank=True)),
                ('ls_s2_wb', models.IntegerField(null=True, blank=True)),
                ('ls_s3_wb', models.IntegerField(null=True, blank=True)),
                ('lsi_immap', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_lsp_affpplp',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClim1KmChelsaBioclim',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('bio1', models.FloatField(null=True, blank=True)),
                ('bio2', models.FloatField(null=True, blank=True)),
                ('bio3', models.FloatField(null=True, blank=True)),
                ('bio4', models.FloatField(null=True, blank=True)),
                ('bio5', models.FloatField(null=True, blank=True)),
                ('bio6', models.FloatField(null=True, blank=True)),
                ('bio7', models.FloatField(null=True, blank=True)),
                ('bio8', models.FloatField(null=True, blank=True)),
                ('bio9', models.FloatField(null=True, blank=True)),
                ('bio10', models.FloatField(null=True, blank=True)),
                ('bio11', models.FloatField(null=True, blank=True)),
                ('bio12', models.IntegerField(null=True, blank=True)),
                ('bio13', models.IntegerField(null=True, blank=True)),
                ('bio14', models.IntegerField(null=True, blank=True)),
                ('bio15', models.IntegerField(null=True, blank=True)),
                ('bio16', models.IntegerField(null=True, blank=True)),
                ('bio17', models.IntegerField(null=True, blank=True)),
                ('bio18', models.IntegerField(null=True, blank=True)),
                ('bio19', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_clim_1km_chelsa_bioclim',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClim1KmWorldclimBioclim2050Rpc26',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('bio1', models.FloatField(null=True, blank=True)),
                ('bio2', models.FloatField(null=True, blank=True)),
                ('bio3', models.FloatField(null=True, blank=True)),
                ('bio4', models.FloatField(null=True, blank=True)),
                ('bio5', models.FloatField(null=True, blank=True)),
                ('bio6', models.FloatField(null=True, blank=True)),
                ('bio7', models.FloatField(null=True, blank=True)),
                ('bio8', models.FloatField(null=True, blank=True)),
                ('bio9', models.FloatField(null=True, blank=True)),
                ('bio10', models.FloatField(null=True, blank=True)),
                ('bio11', models.FloatField(null=True, blank=True)),
                ('bio12', models.FloatField(null=True, blank=True)),
                ('bio13', models.FloatField(null=True, blank=True)),
                ('bio14', models.FloatField(null=True, blank=True)),
                ('bio15', models.FloatField(null=True, blank=True)),
                ('bio16', models.FloatField(null=True, blank=True)),
                ('bio17', models.FloatField(null=True, blank=True)),
                ('bio18', models.FloatField(null=True, blank=True)),
                ('bio19', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_clim_1km_worldclim_bioclim_2050_rpc26',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClim1KmWorldclimBioclim2050Rpc45',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('bio1', models.FloatField(null=True, blank=True)),
                ('bio2', models.FloatField(null=True, blank=True)),
                ('bio3', models.FloatField(null=True, blank=True)),
                ('bio4', models.FloatField(null=True, blank=True)),
                ('bio5', models.FloatField(null=True, blank=True)),
                ('bio6', models.FloatField(null=True, blank=True)),
                ('bio7', models.FloatField(null=True, blank=True)),
                ('bio8', models.FloatField(null=True, blank=True)),
                ('bio9', models.FloatField(null=True, blank=True)),
                ('bio10', models.FloatField(null=True, blank=True)),
                ('bio11', models.FloatField(null=True, blank=True)),
                ('bio12', models.FloatField(null=True, blank=True)),
                ('bio13', models.FloatField(null=True, blank=True)),
                ('bio14', models.FloatField(null=True, blank=True)),
                ('bio15', models.FloatField(null=True, blank=True)),
                ('bio16', models.FloatField(null=True, blank=True)),
                ('bio17', models.FloatField(null=True, blank=True)),
                ('bio18', models.FloatField(null=True, blank=True)),
                ('bio19', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_clim_1km_worldclim_bioclim_2050_rpc45',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClim1KmWorldclimBioclim2050Rpc85',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('bio1', models.FloatField(null=True, blank=True)),
                ('bio2', models.FloatField(null=True, blank=True)),
                ('bio3', models.FloatField(null=True, blank=True)),
                ('bio4', models.FloatField(null=True, blank=True)),
                ('bio5', models.FloatField(null=True, blank=True)),
                ('bio6', models.FloatField(null=True, blank=True)),
                ('bio7', models.FloatField(null=True, blank=True)),
                ('bio8', models.FloatField(null=True, blank=True)),
                ('bio9', models.FloatField(null=True, blank=True)),
                ('bio10', models.FloatField(null=True, blank=True)),
                ('bio11', models.FloatField(null=True, blank=True)),
                ('bio12', models.FloatField(null=True, blank=True)),
                ('bio13', models.FloatField(null=True, blank=True)),
                ('bio14', models.FloatField(null=True, blank=True)),
                ('bio15', models.FloatField(null=True, blank=True)),
                ('bio16', models.FloatField(null=True, blank=True)),
                ('bio17', models.FloatField(null=True, blank=True)),
                ('bio18', models.FloatField(null=True, blank=True)),
                ('bio19', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_clim_1km_worldclim_bioclim_2050_rpc85',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClim1KmWorldclimBioclim2070Rpc26',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('bio1', models.FloatField(null=True, blank=True)),
                ('bio2', models.FloatField(null=True, blank=True)),
                ('bio3', models.FloatField(null=True, blank=True)),
                ('bio4', models.FloatField(null=True, blank=True)),
                ('bio5', models.FloatField(null=True, blank=True)),
                ('bio6', models.FloatField(null=True, blank=True)),
                ('bio7', models.FloatField(null=True, blank=True)),
                ('bio8', models.FloatField(null=True, blank=True)),
                ('bio9', models.FloatField(null=True, blank=True)),
                ('bio10', models.FloatField(null=True, blank=True)),
                ('bio11', models.FloatField(null=True, blank=True)),
                ('bio12', models.FloatField(null=True, blank=True)),
                ('bio13', models.FloatField(null=True, blank=True)),
                ('bio14', models.FloatField(null=True, blank=True)),
                ('bio15', models.FloatField(null=True, blank=True)),
                ('bio16', models.FloatField(null=True, blank=True)),
                ('bio17', models.FloatField(null=True, blank=True)),
                ('bio18', models.FloatField(null=True, blank=True)),
                ('bio19', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_clim_1km_worldclim_bioclim_2070_rpc26',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClim1KmWorldclimBioclim2070Rpc45',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('bio1', models.FloatField(null=True, blank=True)),
                ('bio2', models.FloatField(null=True, blank=True)),
                ('bio3', models.FloatField(null=True, blank=True)),
                ('bio4', models.FloatField(null=True, blank=True)),
                ('bio5', models.FloatField(null=True, blank=True)),
                ('bio6', models.FloatField(null=True, blank=True)),
                ('bio7', models.FloatField(null=True, blank=True)),
                ('bio8', models.FloatField(null=True, blank=True)),
                ('bio9', models.FloatField(null=True, blank=True)),
                ('bio10', models.FloatField(null=True, blank=True)),
                ('bio11', models.FloatField(null=True, blank=True)),
                ('bio12', models.FloatField(null=True, blank=True)),
                ('bio13', models.FloatField(null=True, blank=True)),
                ('bio14', models.FloatField(null=True, blank=True)),
                ('bio15', models.FloatField(null=True, blank=True)),
                ('bio16', models.FloatField(null=True, blank=True)),
                ('bio17', models.FloatField(null=True, blank=True)),
                ('bio18', models.FloatField(null=True, blank=True)),
                ('bio19', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_clim_1km_worldclim_bioclim_2070_rpc45',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClim1KmWorldclimBioclim2070Rpc85',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('bio1', models.FloatField(null=True, blank=True)),
                ('bio2', models.FloatField(null=True, blank=True)),
                ('bio3', models.FloatField(null=True, blank=True)),
                ('bio4', models.FloatField(null=True, blank=True)),
                ('bio5', models.FloatField(null=True, blank=True)),
                ('bio6', models.FloatField(null=True, blank=True)),
                ('bio7', models.FloatField(null=True, blank=True)),
                ('bio8', models.FloatField(null=True, blank=True)),
                ('bio9', models.FloatField(null=True, blank=True)),
                ('bio10', models.FloatField(null=True, blank=True)),
                ('bio11', models.FloatField(null=True, blank=True)),
                ('bio12', models.FloatField(null=True, blank=True)),
                ('bio13', models.FloatField(null=True, blank=True)),
                ('bio14', models.FloatField(null=True, blank=True)),
                ('bio15', models.FloatField(null=True, blank=True)),
                ('bio16', models.FloatField(null=True, blank=True)),
                ('bio17', models.FloatField(null=True, blank=True)),
                ('bio18', models.FloatField(null=True, blank=True)),
                ('bio19', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_clim_1km_worldclim_bioclim_2070_rpc85',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClimperc1KmChelsaPrec',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('january', models.FloatField(null=True, blank=True)),
                ('february', models.FloatField(null=True, blank=True)),
                ('march', models.FloatField(null=True, blank=True)),
                ('april', models.FloatField(null=True, blank=True)),
                ('may', models.FloatField(null=True, blank=True)),
                ('june', models.FloatField(null=True, blank=True)),
                ('july', models.FloatField(null=True, blank=True)),
                ('august', models.FloatField(null=True, blank=True)),
                ('september', models.FloatField(null=True, blank=True)),
                ('october', models.FloatField(null=True, blank=True)),
                ('november', models.FloatField(null=True, blank=True)),
                ('december', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_climperc_1km_chelsa_prec',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClimtemp1KmChelsaTempavg',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('january', models.FloatField(null=True, blank=True)),
                ('february', models.FloatField(null=True, blank=True)),
                ('march', models.FloatField(null=True, blank=True)),
                ('april', models.FloatField(null=True, blank=True)),
                ('may', models.FloatField(null=True, blank=True)),
                ('june', models.FloatField(null=True, blank=True)),
                ('july', models.FloatField(null=True, blank=True)),
                ('august', models.FloatField(null=True, blank=True)),
                ('september', models.FloatField(null=True, blank=True)),
                ('october', models.FloatField(null=True, blank=True)),
                ('november', models.FloatField(null=True, blank=True)),
                ('december', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_climtemp_1km_chelsa_tempavg',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClimtemp1KmChelsaTempmax',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('january', models.FloatField(null=True, blank=True)),
                ('february', models.FloatField(null=True, blank=True)),
                ('march', models.FloatField(null=True, blank=True)),
                ('april', models.FloatField(null=True, blank=True)),
                ('may', models.FloatField(null=True, blank=True)),
                ('june', models.FloatField(null=True, blank=True)),
                ('july', models.FloatField(null=True, blank=True)),
                ('august', models.FloatField(null=True, blank=True)),
                ('september', models.FloatField(null=True, blank=True)),
                ('october', models.FloatField(null=True, blank=True)),
                ('november', models.FloatField(null=True, blank=True)),
                ('december', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_climtemp_1km_chelsa_tempmax',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgMettClimtemp1KmChelsaTempmin',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=50, blank=True)),
                ('january', models.FloatField(null=True, blank=True)),
                ('february', models.FloatField(null=True, blank=True)),
                ('march', models.FloatField(null=True, blank=True)),
                ('april', models.FloatField(null=True, blank=True)),
                ('may', models.FloatField(null=True, blank=True)),
                ('june', models.FloatField(null=True, blank=True)),
                ('july', models.FloatField(null=True, blank=True)),
                ('august', models.FloatField(null=True, blank=True)),
                ('september', models.FloatField(null=True, blank=True)),
                ('october', models.FloatField(null=True, blank=True)),
                ('november', models.FloatField(null=True, blank=True)),
                ('december', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_mett_climtemp_1km_chelsa_tempmin',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgPoiaBuildings',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('osm_id', models.FloatField(null=True, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('type', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_poia_buildings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgPoip',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('osm_id', models.FloatField(null=True, blank=True)),
                ('timestamp', models.CharField(max_length=255, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('type', models.CharField(max_length=255, blank=True)),
                ('category_style', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'db_table': 'afg_poip',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgPpla',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('vuidnear', models.CharField(max_length=255, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('vuid_buildings', models.FloatField(null=True, blank=True)),
                ('vuid_population', models.FloatField(null=True, blank=True)),
                ('vuid_pop_per_building', models.FloatField(null=True, blank=True)),
                ('name_local', models.CharField(max_length=255, blank=True)),
                ('name_alternative_en', models.CharField(max_length=255, blank=True)),
                ('name_local_confidence', models.CharField(max_length=255, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
                ('area_sqm', models.FloatField(null=True, blank=True)),
                ('type_settlement', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
                ('pplp_point_x', models.FloatField(null=True, blank=True)),
                ('pplp_point_y', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_ppla',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgPplaBasin',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('vuidnear', models.CharField(max_length=50, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('area_population', models.FloatField(null=True, blank=True)),
                ('area_buildings', models.FloatField(null=True, blank=True)),
                ('area_sqm', models.IntegerField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('vuid_buildings', models.FloatField(null=True, blank=True)),
                ('vuid_population', models.FloatField(null=True, blank=True)),
                ('vuid_pop_per_building', models.FloatField(null=True, blank=True)),
                ('name_local', models.CharField(max_length=255, blank=True)),
                ('name_alternative_en', models.CharField(max_length=255, blank=True)),
                ('name_local_confidence', models.CharField(max_length=255, blank=True)),
                ('type_settlement', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
                ('basinmember_id', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_ppla_basin',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgPplp',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('vil_uid', models.CharField(max_length=255, blank=True)),
                ('cntr_code', models.IntegerField(null=True, blank=True)),
                ('afg_uid', models.CharField(max_length=255, blank=True)),
                ('language_field', models.CharField(max_length=255, db_column='language_', blank=True)),
                ('lang_code', models.IntegerField(null=True, blank=True)),
                ('elevation', models.FloatField(null=True, blank=True)),
                ('lat_y', models.FloatField(null=True, blank=True)),
                ('lon_x', models.FloatField(null=True, blank=True)),
                ('note', models.CharField(max_length=255, blank=True)),
                ('edited_by', models.CharField(max_length=255, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('type_settlement', models.CharField(max_length=255, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code_1', models.IntegerField(null=True, blank=True)),
                ('unit_type', models.CharField(max_length=255, blank=True)),
                ('dist_na_dar', models.CharField(max_length=255, blank=True)),
                ('prov_na_dar', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_en', models.CharField(max_length=255, blank=True)),
                ('dist_na_ps', models.CharField(max_length=255, blank=True)),
                ('reg_unama_na_dar', models.CharField(max_length=255, blank=True)),
                ('vuid_area_sqm', models.FloatField(null=True, blank=True)),
                ('vuidnear', models.CharField(max_length=255, blank=True)),
                ('vuid_buildings', models.FloatField(null=True, blank=True)),
                ('vuid_population', models.FloatField(null=True, blank=True)),
                ('vuid_pop_per_building', models.FloatField(null=True, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('name_local', models.CharField(max_length=255, blank=True)),
                ('name_local_confidence', models.CharField(max_length=255, blank=True)),
                ('name_alternative_en', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'db_table': 'afg_pplp',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgPpltDemographics',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('vuidnear', models.CharField(max_length=50, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=100, blank=True)),
                ('prov_na_en', models.CharField(max_length=100, blank=True)),
                ('prov_code_field', models.IntegerField(null=True, db_column='prov_code_', blank=True)),
                ('partofbuil', models.CharField(max_length=100, blank=True)),
                ('vuid_buildings', models.IntegerField(null=True, blank=True)),
                ('vuid_population', models.IntegerField(null=True, blank=True)),
                ('vuid_male_perc', models.FloatField(null=True, blank=True)),
                ('vuid_female_perc', models.FloatField(null=True, blank=True)),
                ('note', models.CharField(max_length=200, blank=True)),
                ('vuid_pop_per_building', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_0_4', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_5_9', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_10_14', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_15_19', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_20_24', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_25_29', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_30_34', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_35_39', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_40_44', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_45_49', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_50_54', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_55_59', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_60_64', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_65_69', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_70_74', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_75_79', models.FloatField(null=True, blank=True)),
                ('m_perc_yrs_80pls', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_0_4', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_5_9', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_10_14', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_15_19', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_20_24', models.FloatField(null=True, db_column='f_perc_yrs__20_24', blank=True)),
                ('f_perc_yrs_25_29', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_30_34', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_35_39', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_40_44', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_45_49', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_50_54', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_55_59', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_60_64', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_65_69', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_70_74', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_75_79', models.FloatField(null=True, blank=True)),
                ('f_perc_yrs_80pls', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_pplt_demographics',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgRafUnkIom',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('no', models.IntegerField(null=True, blank=True)),
                ('incident_date', models.DateTimeField(null=True, blank=True)),
                ('disaster_type', models.CharField(max_length=255, blank=True)),
                ('rafno', models.CharField(max_length=255, blank=True)),
                ('assessment_date', models.DateTimeField(null=True, blank=True)),
                ('msraf_status', models.CharField(max_length=255, blank=True)),
                ('region', models.CharField(max_length=255, blank=True)),
                ('province', models.CharField(max_length=255, blank=True)),
                ('district', models.CharField(max_length=255, blank=True)),
                ('village_or_nahya', models.CharField(max_length=255, blank=True)),
                ('long', models.FloatField(null=True, blank=True)),
                ('lat', models.FloatField(null=True, blank=True)),
                ('numberofhouseholds', models.IntegerField(null=True, blank=True)),
                ('numberoffamilies', models.IntegerField(null=True, blank=True)),
                ('numberofidps', models.IntegerField(null=True, blank=True)),
                ('totalpopulation', models.IntegerField(null=True, blank=True)),
                ('affectedfamilies', models.IntegerField(null=True, blank=True)),
                ('province_1', models.CharField(max_length=255, blank=True)),
                ('district_1', models.CharField(max_length=255, blank=True)),
                ('village', models.CharField(max_length=255, blank=True)),
                ('nodamaged', models.CharField(max_length=255, blank=True)),
                ('moderatelydamaged', models.IntegerField(null=True, blank=True)),
                ('severelydamaged', models.IntegerField(null=True, blank=True)),
                ('completelydestroyed', models.IntegerField(null=True, blank=True)),
                ('affected_individuals', models.IntegerField(null=True, blank=True)),
                ('deaths', models.IntegerField(null=True, blank=True)),
                ('injuried', models.IntegerField(null=True, blank=True)),
                ('missing', models.IntegerField(null=True, blank=True)),
                ('long_1', models.FloatField(null=True, blank=True)),
                ('lat_1', models.FloatField(null=True, blank=True)),
                ('alternativevillagenamemisti', models.CharField(max_length=255, blank=True)),
                ('alternativedistrictname', models.CharField(max_length=255, blank=True)),
                ('misti_vuid', models.CharField(max_length=255, blank=True)),
                ('disastertype', models.CharField(max_length=255, blank=True)),
            ],
            options={
                'db_table': 'afg_raf_unk_iom',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgRdsl',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326, null=True, blank=True)),
                ('avg_slope', models.FloatField(null=True, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('source', models.CharField(max_length=255, blank=True)),
                ('speedkmh', models.IntegerField(null=True, blank=True)),
                ('type_update', models.CharField(max_length=255, blank=True)),
                ('adjusted_kmh', models.IntegerField(null=True, blank=True)),
                ('priority_class', models.IntegerField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('bridge', models.CharField(max_length=255, blank=True)),
                ('tunnel', models.CharField(max_length=255, blank=True)),
                ('road_length', models.IntegerField(null=True, blank=True)),
                ('builduparea', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_rdsl',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgRiv',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326, null=True, blank=True)),
                ('join_count', models.IntegerField(null=True, blank=True)),
                ('join_cou_1', models.IntegerField(null=True, blank=True)),
                ('join_cou_2', models.IntegerField(null=True, blank=True)),
                ('objectid', models.IntegerField(null=True, blank=True)),
                ('arcid', models.IntegerField(null=True, blank=True)),
                ('grid_code', models.IntegerField(null=True, blank=True)),
                ('from_node', models.IntegerField(null=True, blank=True)),
                ('to_node', models.IntegerField(null=True, blank=True)),
                ('shape_leng', models.FloatField(null=True, blank=True)),
                ('idcode', models.IntegerField(null=True, blank=True)),
                ('fnode', models.IntegerField(null=True, blank=True)),
                ('tnode', models.IntegerField(null=True, blank=True)),
                ('strahler', models.IntegerField(null=True, blank=True)),
                ('segment', models.IntegerField(null=True, blank=True)),
                ('shreve', models.IntegerField(null=True, blank=True)),
                ('us_accum', models.FloatField(null=True, blank=True)),
                ('link_type', models.CharField(max_length=255, blank=True)),
                ('riverwidth', models.IntegerField(null=True, blank=True)),
                ('landcover', models.CharField(max_length=255, blank=True)),
                ('vertices', models.IntegerField(null=True, blank=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('flooddepth', models.FloatField(null=True, blank=True)),
                ('riverwid_1', models.FloatField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_riv',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgShedaLvl2',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, dim=3, null=True, blank=True)),
                ('basinnumbe', models.IntegerField(null=True, blank=True)),
                ('basinname', models.CharField(max_length=255, blank=True)),
                ('area', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_sheda_lvl2',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgShedaLvl3',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, dim=3, null=True, blank=True)),
                ('basinnumbe', models.IntegerField(null=True, blank=True)),
                ('basinname', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_sheda_lvl3',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgShedaLvl4',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('value', models.FloatField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_sheda_lvl4',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgSnowaAverageExtent',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('aver_cov', models.CharField(max_length=50, blank=True)),
                ('cov_10_oct', models.CharField(max_length=50, blank=True)),
                ('cov_11_nov', models.CharField(max_length=50, blank=True)),
                ('cov_05_may', models.CharField(max_length=50, blank=True)),
                ('cov_03_mar', models.CharField(max_length=50, blank=True)),
                ('cov_04_apr', models.CharField(max_length=50, blank=True)),
                ('cov_08_aug', models.CharField(max_length=50, blank=True)),
                ('cov_12_dec', models.CharField(max_length=50, blank=True)),
                ('cov_02_feb', models.CharField(max_length=50, blank=True)),
                ('cov_01_jan', models.CharField(max_length=50, blank=True)),
                ('cov_07_jul', models.CharField(max_length=50, blank=True)),
                ('cov_06_jun', models.CharField(max_length=50, blank=True)),
                ('cov_09_sep', models.CharField(max_length=50, blank=True)),
                ('source', models.CharField(max_length=250, blank=True)),
                ('author', models.CharField(max_length=250, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_snowa_average_extent',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AfgUtilWell',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('serial_number', models.FloatField(null=True, blank=True)),
                ('implementing_agency', models.CharField(max_length=255, blank=True)),
                ('donor_name', models.CharField(max_length=255, blank=True)),
                ('date_visited', models.DateTimeField(null=True, blank=True)),
                ('district_name', models.CharField(max_length=255, blank=True)),
                ('village_name', models.CharField(max_length=255, blank=True)),
                ('care_taker_name', models.CharField(max_length=255, blank=True)),
                ('longitude_degree', models.FloatField(null=True, blank=True)),
                ('latitude_degree', models.FloatField(null=True, blank=True)),
                ('water_point_code', models.FloatField(null=True, blank=True)),
                ('year_implented', models.FloatField(null=True, blank=True)),
                ('ec_micros_cm', models.FloatField(null=True, blank=True)),
                ('ph', models.FloatField(null=True, blank=True)),
                ('t_c', models.FloatField(null=True, blank=True)),
                ('beneficiaries_families', models.FloatField(null=True, blank=True)),
                ('well_depth_m', models.FloatField(null=True, blank=True)),
                ('well_diameter_cm', models.FloatField(null=True, blank=True)),
                ('static_water_level_m', models.FloatField(null=True, blank=True)),
                ('type_of_system', models.CharField(max_length=255, blank=True)),
                ('maintenance_system_existing', models.CharField(max_length=255, blank=True)),
                ('maintenance_agreement_signed', models.CharField(max_length=255, blank=True)),
                ('mechanic_valveman_trained', models.CharField(max_length=255, blank=True)),
                ('wage_of_mechanic_valveman_paid', models.CharField(max_length=255, blank=True)),
                ('water_user_group_established', models.CharField(max_length=255, blank=True)),
                ('care_taker_selected_trained', models.CharField(max_length=255, blank=True)),
                ('water_management_committee_established', models.FloatField(null=True, blank=True)),
                ('pipe_scheme_conditions', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_problem', models.CharField(max_length=255, blank=True)),
                ('water_point_working', models.CharField(max_length=255, blank=True)),
                ('water_point_working_with_bucket', models.CharField(max_length=255, blank=True)),
                ('water_point_dry_drawdown', models.CharField(max_length=255, blank=True)),
                ('water_point_collapsed_destroyed', models.CharField(max_length=255, blank=True)),
                ('water_point_plugged_abandoned', models.CharField(max_length=255, blank=True)),
                ('water_point_enclosed', models.CharField(max_length=255, blank=True)),
                ('water_point_concrete_problem', models.CharField(max_length=255, blank=True)),
                ('water_point_pump_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_tap_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_pipeline_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_catchment_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_reservoir_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_solar_pump_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_solar_panel_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_submersible_pump_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_generator_problem', models.CharField(max_length=255, blank=True)),
                ('pipe_scheme_generator_room_problem', models.CharField(max_length=255, blank=True)),
                ('wp_type', models.CharField(max_length=255, blank=True)),
                ('no_maintenance_problem', models.CharField(max_length=255, blank=True)),
                ('community_problem', models.CharField(max_length=255, blank=True)),
                ('mechanic_valveman_problem', models.CharField(max_length=255, blank=True)),
                ('spare_parts_availlability_problem', models.CharField(max_length=255, blank=True)),
                ('original_hp_present', models.CharField(max_length=255, blank=True)),
                ('no_new_hp', models.CharField(max_length=255, blank=True)),
                ('new_hp_from_community', models.CharField(max_length=255, blank=True)),
                ('new_hp_from_ngo_government', models.CharField(max_length=255, blank=True)),
                ('hp_condition', models.CharField(max_length=255, blank=True)),
                ('hp_problem_fixible', models.CharField(max_length=255, blank=True)),
                ('hp_problem_not_fixible', models.CharField(max_length=255, blank=True)),
                ('hp_raising_main_problem', models.CharField(max_length=255, blank=True)),
                ('hp_removed_vandalized', models.CharField(max_length=255, blank=True)),
                ('pump_manufacturer', models.CharField(max_length=255, blank=True)),
                ('pump_code', models.FloatField(null=True, blank=True)),
                ('solar_panel_manufacturer', models.CharField(max_length=255, blank=True)),
                ('pump_type', models.CharField(max_length=255, blank=True)),
                ('flood_risk', models.CharField(max_length=255, blank=True)),
                ('avalanche_risk', models.CharField(max_length=255, blank=True)),
                ('data_source', models.CharField(max_length=255, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('landcover_description', models.CharField(max_length=255, blank=True)),
                ('vuid', models.CharField(max_length=255, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('type_settlement', models.CharField(max_length=255, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'afg_util_well',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AndmaOffice',
            fields=[
                ('gid', models.IntegerField(serialize=False, primary_key=True)),
                ('objectid', models.DecimalField(null=True, max_digits=10, decimal_places=0, blank=True)),
                ('vil_uid', models.CharField(max_length=10, blank=True)),
                ('note', models.CharField(max_length=50, blank=True)),
                ('name_en', models.CharField(max_length=50, blank=True)),
                ('dist_na_en', models.CharField(max_length=50, blank=True)),
                ('prov_na_en', models.CharField(max_length=50, blank=True)),
                ('dist_na_da', models.CharField(max_length=254, blank=True)),
                ('prov_na_da', models.CharField(max_length=254, blank=True)),
                ('dist_na_ps', models.CharField(max_length=254, blank=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
            ],
            options={
                'db_table': 'andma_office',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='basinsummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('basin', models.CharField(max_length=255)),
                ('Population', models.FloatField(null=True, blank=True)),
                ('Area', models.FloatField(null=True, blank=True)),
                ('settlements', models.FloatField(null=True, blank=True)),
                ('water_body_pop', models.FloatField(null=True, blank=True)),
                ('barren_land_pop', models.FloatField(null=True, blank=True)),
                ('built_up_pop', models.FloatField(null=True, blank=True)),
                ('fruit_trees_pop', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_pop', models.FloatField(null=True, blank=True)),
                ('permanent_snow_pop', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_pop', models.FloatField(null=True, blank=True)),
                ('rangeland_pop', models.FloatField(null=True, blank=True)),
                ('sandcover_pop', models.FloatField(null=True, blank=True)),
                ('vineyards_pop', models.FloatField(null=True, blank=True)),
                ('forest_pop', models.FloatField(null=True, blank=True)),
                ('water_body_area', models.FloatField(null=True, blank=True)),
                ('barren_land_area', models.FloatField(null=True, blank=True)),
                ('built_up_area', models.FloatField(null=True, blank=True)),
                ('fruit_trees_area', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_area', models.FloatField(null=True, blank=True)),
                ('permanent_snow_area', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_area', models.FloatField(null=True, blank=True)),
                ('rangeland_area', models.FloatField(null=True, blank=True)),
                ('sandcover_area', models.FloatField(null=True, blank=True)),
                ('vineyards_area', models.FloatField(null=True, blank=True)),
                ('forest_area', models.FloatField(null=True, blank=True)),
                ('high_risk_population', models.FloatField(null=True, blank=True)),
                ('med_risk_population', models.FloatField(null=True, blank=True)),
                ('low_risk_population', models.FloatField(null=True, blank=True)),
                ('total_risk_population', models.FloatField(null=True, blank=True)),
                ('settlements_at_risk', models.FloatField(null=True, blank=True)),
                ('high_risk_area', models.FloatField(null=True, blank=True)),
                ('med_risk_area', models.FloatField(null=True, blank=True)),
                ('low_risk_area', models.FloatField(null=True, blank=True)),
                ('total_risk_area', models.FloatField(null=True, blank=True)),
                ('water_body_pop_risk', models.FloatField(null=True, blank=True)),
                ('barren_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('built_up_pop_risk', models.FloatField(null=True, blank=True)),
                ('fruit_trees_pop_risk', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('permanent_snow_pop_risk', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('rangeland_pop_risk', models.FloatField(null=True, blank=True)),
                ('sandcover_pop_risk', models.FloatField(null=True, blank=True)),
                ('vineyards_pop_risk', models.FloatField(null=True, blank=True)),
                ('forest_pop_risk', models.FloatField(null=True, blank=True)),
                ('water_body_area_risk', models.FloatField(null=True, blank=True)),
                ('barren_land_area_risk', models.FloatField(null=True, blank=True)),
                ('built_up_area_risk', models.FloatField(null=True, blank=True)),
                ('fruit_trees_area_risk', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_area_risk', models.FloatField(null=True, blank=True)),
                ('permanent_snow_area_risk', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_area_risk', models.FloatField(null=True, blank=True)),
                ('rangeland_area_risk', models.FloatField(null=True, blank=True)),
                ('sandcover_area_risk', models.FloatField(null=True, blank=True)),
                ('vineyards_area_risk', models.FloatField(null=True, blank=True)),
                ('forest_area_risk', models.FloatField(null=True, blank=True)),
                ('high_ava_population', models.FloatField(null=True, blank=True)),
                ('med_ava_population', models.FloatField(null=True, blank=True)),
                ('low_ava_population', models.FloatField(null=True, blank=True)),
                ('total_ava_population', models.FloatField(null=True, blank=True)),
                ('high_ava_area', models.FloatField(null=True, blank=True)),
                ('med_ava_area', models.FloatField(null=True, blank=True)),
                ('low_ava_area', models.FloatField(null=True, blank=True)),
                ('total_ava_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_verylow_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_veryhigh_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_extreme_pop', models.FloatField(null=True, blank=True)),
                ('total_riverflood_forecast_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_verylow_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_low_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_med_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_high_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_veryhigh_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_extreme_area', models.FloatField(null=True, blank=True)),
                ('total_riverflood_forecast_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_verylow_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_veryhigh_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_extreme_pop', models.FloatField(null=True, blank=True)),
                ('total_flashflood_forecast_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_verylow_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_low_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_med_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_high_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_veryhigh_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_extreme_area', models.FloatField(null=True, blank=True)),
                ('total_flashflood_forecast_area', models.FloatField(null=True, blank=True)),
                ('ava_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('ava_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('ava_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('total_ava_forecast_pop', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'basinsummary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CurrentScBasins',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('basin', models.FloatField(null=True, blank=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
            ],
            options={
                'db_table': 'current_sc_basins',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DistrictAddSummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('dist_code', models.CharField(max_length=255)),
                ('hlt_h1', models.FloatField(null=True, blank=True)),
                ('hlt_h2', models.FloatField(null=True, blank=True)),
                ('hlt_h3', models.FloatField(null=True, blank=True)),
                ('hlt_special_hospital', models.FloatField(null=True, blank=True)),
                ('hlt_rehabilitation_center', models.FloatField(null=True, blank=True)),
                ('hlt_maternity_home', models.FloatField(null=True, blank=True)),
                ('hlt_drug_addicted_treatment_center', models.FloatField(null=True, blank=True)),
                ('hlt_chc', models.FloatField(null=True, blank=True)),
                ('hlt_bhc', models.FloatField(null=True, blank=True)),
                ('hlt_shc', models.FloatField(null=True, blank=True)),
                ('hlt_private_clinic', models.FloatField(null=True, blank=True)),
                ('hlt_malaria_center', models.FloatField(null=True, blank=True)),
                ('hlt_mobile_health_team', models.FloatField(null=True, blank=True)),
                ('hlt_other', models.FloatField(null=True, blank=True)),
                ('road_highway', models.FloatField(null=True, blank=True)),
                ('road_primary', models.FloatField(null=True, blank=True)),
                ('road_secondary', models.FloatField(null=True, blank=True)),
                ('road_tertiary', models.FloatField(null=True, blank=True)),
                ('road_residential', models.FloatField(null=True, blank=True)),
                ('road_track', models.FloatField(null=True, blank=True)),
                ('road_path', models.FloatField(null=True, blank=True)),
                ('road_river_crossing', models.FloatField(null=True, blank=True)),
                ('road_bridge', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'district_add_summary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='districtsummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('district', models.CharField(max_length=255)),
                ('Population', models.FloatField(null=True, blank=True)),
                ('Area', models.FloatField(null=True, blank=True)),
                ('settlements', models.FloatField(null=True, blank=True)),
                ('water_body_pop', models.FloatField(null=True, blank=True)),
                ('barren_land_pop', models.FloatField(null=True, blank=True)),
                ('built_up_pop', models.FloatField(null=True, blank=True)),
                ('fruit_trees_pop', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_pop', models.FloatField(null=True, blank=True)),
                ('permanent_snow_pop', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_pop', models.FloatField(null=True, blank=True)),
                ('rangeland_pop', models.FloatField(null=True, blank=True)),
                ('sandcover_pop', models.FloatField(null=True, blank=True)),
                ('vineyards_pop', models.FloatField(null=True, blank=True)),
                ('forest_pop', models.FloatField(null=True, blank=True)),
                ('water_body_area', models.FloatField(null=True, blank=True)),
                ('barren_land_area', models.FloatField(null=True, blank=True)),
                ('built_up_area', models.FloatField(null=True, blank=True)),
                ('fruit_trees_area', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_area', models.FloatField(null=True, blank=True)),
                ('permanent_snow_area', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_area', models.FloatField(null=True, blank=True)),
                ('rangeland_area', models.FloatField(null=True, blank=True)),
                ('sandcover_area', models.FloatField(null=True, blank=True)),
                ('vineyards_area', models.FloatField(null=True, blank=True)),
                ('forest_area', models.FloatField(null=True, blank=True)),
                ('high_risk_population', models.FloatField(null=True, blank=True)),
                ('med_risk_population', models.FloatField(null=True, blank=True)),
                ('low_risk_population', models.FloatField(null=True, blank=True)),
                ('total_risk_population', models.FloatField(null=True, blank=True)),
                ('settlements_at_risk', models.FloatField(null=True, blank=True)),
                ('high_risk_area', models.FloatField(null=True, blank=True)),
                ('med_risk_area', models.FloatField(null=True, blank=True)),
                ('low_risk_area', models.FloatField(null=True, blank=True)),
                ('total_risk_area', models.FloatField(null=True, blank=True)),
                ('water_body_pop_risk', models.FloatField(null=True, blank=True)),
                ('barren_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('built_up_pop_risk', models.FloatField(null=True, blank=True)),
                ('fruit_trees_pop_risk', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('permanent_snow_pop_risk', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('rangeland_pop_risk', models.FloatField(null=True, blank=True)),
                ('sandcover_pop_risk', models.FloatField(null=True, blank=True)),
                ('vineyards_pop_risk', models.FloatField(null=True, blank=True)),
                ('forest_pop_risk', models.FloatField(null=True, blank=True)),
                ('water_body_area_risk', models.FloatField(null=True, blank=True)),
                ('barren_land_area_risk', models.FloatField(null=True, blank=True)),
                ('built_up_area_risk', models.FloatField(null=True, blank=True)),
                ('fruit_trees_area_risk', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_area_risk', models.FloatField(null=True, blank=True)),
                ('permanent_snow_area_risk', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_area_risk', models.FloatField(null=True, blank=True)),
                ('rangeland_area_risk', models.FloatField(null=True, blank=True)),
                ('sandcover_area_risk', models.FloatField(null=True, blank=True)),
                ('vineyards_area_risk', models.FloatField(null=True, blank=True)),
                ('forest_area_risk', models.FloatField(null=True, blank=True)),
                ('high_ava_population', models.FloatField(null=True, blank=True)),
                ('med_ava_population', models.FloatField(null=True, blank=True)),
                ('low_ava_population', models.FloatField(null=True, blank=True)),
                ('total_ava_population', models.FloatField(null=True, blank=True)),
                ('high_ava_area', models.FloatField(null=True, blank=True)),
                ('med_ava_area', models.FloatField(null=True, blank=True)),
                ('low_ava_area', models.FloatField(null=True, blank=True)),
                ('total_ava_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_verylow_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_veryhigh_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_extreme_pop', models.FloatField(null=True, blank=True)),
                ('total_riverflood_forecast_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_verylow_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_low_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_med_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_high_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_veryhigh_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_extreme_area', models.FloatField(null=True, blank=True)),
                ('total_riverflood_forecast_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_verylow_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_veryhigh_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_extreme_pop', models.FloatField(null=True, blank=True)),
                ('total_flashflood_forecast_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_verylow_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_low_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_med_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_high_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_veryhigh_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_extreme_area', models.FloatField(null=True, blank=True)),
                ('total_flashflood_forecast_area', models.FloatField(null=True, blank=True)),
                ('ava_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('ava_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('ava_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('total_ava_forecast_pop', models.FloatField(null=True, blank=True)),
                ('sand_dunes_pop', models.FloatField(null=True, blank=True)),
                ('sand_dunes_pop_risk', models.FloatField(null=True, blank=True)),
                ('sand_dunes_area', models.FloatField(null=True, blank=True)),
                ('sand_dunes_area_risk', models.FloatField(null=True, blank=True)),
                ('total_buildings', models.FloatField(null=True, blank=True)),
                ('total_risk_buildings', models.FloatField(null=True, blank=True)),
                ('high_ava_buildings', models.FloatField(null=True, blank=True)),
                ('med_ava_buildings', models.FloatField(null=True, blank=True)),
                ('total_ava_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'districtsummary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='earthquake_events',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('event_code', models.CharField(max_length=25)),
                ('title', models.CharField(max_length=255)),
                ('dateofevent', models.DateTimeField()),
                ('magnitude', models.FloatField(null=True, blank=True)),
                ('depth', models.FloatField(null=True, blank=True)),
                ('shakemaptimestamp', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'earthquake_events',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='earthquake_shakemap',
            fields=[
                ('id', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('event_code', models.CharField(max_length=25, blank=True)),
                ('shakemaptimestamp', models.BigIntegerField(null=True, blank=True)),
                ('grid_value', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'earthquake_shakemap',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventdataHistory',
            fields=[
                ('id', models.IntegerField(serialize=False, primary_key=True)),
                ('timestamp', models.DateTimeField(null=True, blank=True)),
                ('api', models.CharField(max_length=255, blank=True)),
                ('eventdata', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'eventdata_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HistoryDrought',
            fields=[
                ('id', models.IntegerField(serialize=False, primary_key=True)),
                ('ogc_fid', models.IntegerField(null=True, blank=True)),
                ('min', models.FloatField(null=True, blank=True)),
                ('mean', models.FloatField(null=True, blank=True)),
                ('max', models.FloatField(null=True, blank=True)),
                ('std', models.FloatField(null=True, blank=True)),
                ('sum', models.FloatField(null=True, blank=True)),
                ('count', models.FloatField(null=True, blank=True)),
                ('basin_id', models.FloatField(null=True, blank=True)),
                ('agg_code', models.CharField(max_length=50, blank=True)),
                ('woy', models.CharField(max_length=50, blank=True)),
            ],
            options={
                'db_table': 'history_drought',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LandcoverDescription',
            fields=[
                ('code', models.CharField(max_length=255, blank=True)),
                ('id', models.IntegerField(serialize=False, primary_key=True)),
            ],
            options={
                'db_table': 'landcover_description',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OasisSettlements',
            fields=[
                ('gid', models.IntegerField(serialize=False, primary_key=True)),
                ('type_settlement', models.CharField(max_length=20, blank=True)),
                ('source', models.CharField(max_length=50, blank=True)),
                ('x', models.DecimalField(null=True, max_digits=30, decimal_places=20, blank=True)),
                ('y', models.DecimalField(null=True, max_digits=30, decimal_places=20, blank=True)),
                ('prov_na_en', models.CharField(max_length=50, blank=True)),
                ('dist_na_en', models.CharField(max_length=50, blank=True)),
                ('un_reg', models.CharField(max_length=50, blank=True)),
                ('isaf_rc', models.CharField(max_length=50, blank=True)),
                ('name_en', models.CharField(max_length=200, blank=True)),
                ('vil_uid', models.IntegerField(null=True, blank=True)),
                ('anso_reg', models.CharField(max_length=50, blank=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.PointField(srid=4326, null=True, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'db_table': 'oasis_settlements',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProvinceAddSummary',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('prov_code', models.CharField(max_length=255)),
                ('hlt_h1', models.FloatField(null=True, blank=True)),
                ('hlt_h2', models.FloatField(null=True, blank=True)),
                ('hlt_h3', models.FloatField(null=True, blank=True)),
                ('hlt_special_hospital', models.FloatField(null=True, blank=True)),
                ('hlt_rehabilitation_center', models.FloatField(null=True, blank=True)),
                ('hlt_maternity_home', models.FloatField(null=True, blank=True)),
                ('hlt_drug_addicted_treatment_center', models.FloatField(null=True, blank=True)),
                ('hlt_chc', models.FloatField(null=True, blank=True)),
                ('hlt_bhc', models.FloatField(null=True, blank=True)),
                ('hlt_shc', models.FloatField(null=True, blank=True)),
                ('hlt_private_clinic', models.FloatField(null=True, blank=True)),
                ('hlt_malaria_center', models.FloatField(null=True, blank=True)),
                ('hlt_mobile_health_team', models.FloatField(null=True, blank=True)),
                ('hlt_other', models.FloatField(null=True, blank=True)),
                ('road_highway', models.FloatField(null=True, blank=True)),
                ('road_primary', models.FloatField(null=True, blank=True)),
                ('road_secondary', models.FloatField(null=True, blank=True)),
                ('road_tertiary', models.FloatField(null=True, blank=True)),
                ('road_residential', models.FloatField(null=True, blank=True)),
                ('road_track', models.FloatField(null=True, blank=True)),
                ('road_path', models.FloatField(null=True, blank=True)),
                ('road_river_crossing', models.FloatField(null=True, blank=True)),
                ('road_bridge', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'province_add_summary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='provincesummary',
            fields=[
                ('id', models.IntegerField(serialize=False, primary_key=True)),
                ('province', models.CharField(max_length=255)),
                ('Population', models.FloatField(null=True, blank=True)),
                ('Area', models.FloatField(null=True, blank=True)),
                ('settlements', models.FloatField(null=True, blank=True)),
                ('water_body_pop', models.FloatField(null=True, blank=True)),
                ('barren_land_pop', models.FloatField(null=True, blank=True)),
                ('built_up_pop', models.FloatField(null=True, blank=True)),
                ('fruit_trees_pop', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_pop', models.FloatField(null=True, blank=True)),
                ('permanent_snow_pop', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_pop', models.FloatField(null=True, blank=True)),
                ('rangeland_pop', models.FloatField(null=True, blank=True)),
                ('sandcover_pop', models.FloatField(null=True, blank=True)),
                ('vineyards_pop', models.FloatField(null=True, blank=True)),
                ('forest_pop', models.FloatField(null=True, blank=True)),
                ('water_body_area', models.FloatField(null=True, blank=True)),
                ('barren_land_area', models.FloatField(null=True, blank=True)),
                ('built_up_area', models.FloatField(null=True, blank=True)),
                ('fruit_trees_area', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_area', models.FloatField(null=True, blank=True)),
                ('permanent_snow_area', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_area', models.FloatField(null=True, blank=True)),
                ('rangeland_area', models.FloatField(null=True, blank=True)),
                ('sandcover_area', models.FloatField(null=True, blank=True)),
                ('vineyards_area', models.FloatField(null=True, blank=True)),
                ('forest_area', models.FloatField(null=True, blank=True)),
                ('high_risk_population', models.FloatField(null=True, blank=True)),
                ('med_risk_population', models.FloatField(null=True, blank=True)),
                ('low_risk_population', models.FloatField(null=True, blank=True)),
                ('total_risk_population', models.FloatField(null=True, blank=True)),
                ('settlements_at_risk', models.FloatField(null=True, blank=True)),
                ('high_risk_area', models.FloatField(null=True, blank=True)),
                ('med_risk_area', models.FloatField(null=True, blank=True)),
                ('low_risk_area', models.FloatField(null=True, blank=True)),
                ('total_risk_area', models.FloatField(null=True, blank=True)),
                ('water_body_pop_risk', models.FloatField(null=True, blank=True)),
                ('barren_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('built_up_pop_risk', models.FloatField(null=True, blank=True)),
                ('fruit_trees_pop_risk', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('permanent_snow_pop_risk', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_pop_risk', models.FloatField(null=True, blank=True)),
                ('rangeland_pop_risk', models.FloatField(null=True, blank=True)),
                ('sandcover_pop_risk', models.FloatField(null=True, blank=True)),
                ('vineyards_pop_risk', models.FloatField(null=True, blank=True)),
                ('forest_pop_risk', models.FloatField(null=True, blank=True)),
                ('water_body_area_risk', models.FloatField(null=True, blank=True)),
                ('barren_land_area_risk', models.FloatField(null=True, blank=True)),
                ('built_up_area_risk', models.FloatField(null=True, blank=True)),
                ('fruit_trees_area_risk', models.FloatField(null=True, blank=True)),
                ('irrigated_agricultural_land_area_risk', models.FloatField(null=True, blank=True)),
                ('permanent_snow_area_risk', models.FloatField(null=True, blank=True)),
                ('rainfed_agricultural_land_area_risk', models.FloatField(null=True, blank=True)),
                ('rangeland_area_risk', models.FloatField(null=True, blank=True)),
                ('sandcover_area_risk', models.FloatField(null=True, blank=True)),
                ('vineyards_area_risk', models.FloatField(null=True, blank=True)),
                ('forest_area_risk', models.FloatField(null=True, blank=True)),
                ('high_ava_population', models.FloatField(null=True, blank=True)),
                ('med_ava_population', models.FloatField(null=True, blank=True)),
                ('low_ava_population', models.FloatField(null=True, blank=True)),
                ('total_ava_population', models.FloatField(null=True, blank=True)),
                ('high_ava_area', models.FloatField(null=True, blank=True)),
                ('med_ava_area', models.FloatField(null=True, blank=True)),
                ('low_ava_area', models.FloatField(null=True, blank=True)),
                ('total_ava_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_verylow_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_veryhigh_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_extreme_pop', models.FloatField(null=True, blank=True)),
                ('total_riverflood_forecast_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_verylow_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_low_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_med_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_high_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_veryhigh_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_extreme_area', models.FloatField(null=True, blank=True)),
                ('total_riverflood_forecast_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_verylow_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_veryhigh_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_extreme_pop', models.FloatField(null=True, blank=True)),
                ('total_flashflood_forecast_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_verylow_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_low_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_med_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_high_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_veryhigh_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_extreme_area', models.FloatField(null=True, blank=True)),
                ('total_flashflood_forecast_area', models.FloatField(null=True, blank=True)),
                ('ava_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('ava_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('ava_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('total_ava_forecast_pop', models.FloatField(null=True, blank=True)),
                ('sand_dunes_pop', models.FloatField(null=True, blank=True)),
                ('sand_dunes_pop_risk', models.FloatField(null=True, blank=True)),
                ('sand_dunes_area', models.FloatField(null=True, blank=True)),
                ('sand_dunes_area_risk', models.FloatField(null=True, blank=True)),
                ('total_buildings', models.FloatField(null=True, blank=True)),
                ('total_risk_buildings', models.FloatField(null=True, blank=True)),
                ('high_ava_buildings', models.FloatField(null=True, blank=True)),
                ('med_ava_buildings', models.FloatField(null=True, blank=True)),
                ('total_ava_buildings', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'provincesummary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RefSecurity',
            fields=[
                ('id', models.IntegerField(serialize=False, primary_key=True)),
                ('last_incidentdate', models.DateField(null=True, blank=True)),
                ('last_sync', models.DateField(null=True, blank=True)),
                ('last_entry', models.DateField(null=True, blank=True)),
            ],
            options={
                'db_table': 'ref_security',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SlopeHospLndcvrNofldNoavaNouxo4KmsqGonogo',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('dist_code', models.IntegerField(null=True, blank=True)),
                ('dist_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_na_en', models.CharField(max_length=255, blank=True)),
                ('prov_code', models.IntegerField(null=True, blank=True)),
                ('area', models.IntegerField(null=True, blank=True)),
                ('buff_dist', models.FloatField(null=True, blank=True)),
                ('orig_fid', models.IntegerField(null=True, blank=True)),
                ('gonogo', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'slope_hosp_lndcvr_nofld_noava_nouxo__4kmsq_gonogo',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='tempCurrentSC',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
            ],
            options={
                'db_table': 'temp_current_sc',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='villagesummary',
            fields=[
                ('id', models.IntegerField(serialize=False, primary_key=True)),
                ('vuid', models.CharField(max_length=255)),
                ('basin', models.CharField(max_length=255)),
                ('riverflood_forecast_verylow_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_veryhigh_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_extreme_pop', models.FloatField(null=True, blank=True)),
                ('total_riverflood_forecast_pop', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_verylow_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_low_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_med_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_high_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_veryhigh_area', models.FloatField(null=True, blank=True)),
                ('riverflood_forecast_extreme_area', models.FloatField(null=True, blank=True)),
                ('total_riverflood_forecast_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_verylow_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_veryhigh_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_extreme_pop', models.FloatField(null=True, blank=True)),
                ('total_flashflood_forecast_pop', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_verylow_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_low_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_med_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_high_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_veryhigh_area', models.FloatField(null=True, blank=True)),
                ('flashflood_forecast_extreme_area', models.FloatField(null=True, blank=True)),
                ('total_flashflood_forecast_area', models.FloatField(null=True, blank=True)),
                ('ava_forecast_low_pop', models.FloatField(null=True, blank=True)),
                ('ava_forecast_med_pop', models.FloatField(null=True, blank=True)),
                ('ava_forecast_high_pop', models.FloatField(null=True, blank=True)),
                ('total_ava_forecast_pop', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'villagesummary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='villagesummaryEQ',
            fields=[
                ('id', models.IntegerField(serialize=False, primary_key=True)),
                ('event_code', models.CharField(max_length=20)),
                ('village', models.CharField(max_length=255)),
                ('district', models.CharField(max_length=255)),
                ('pop_shake_weak', models.FloatField(null=True, blank=True)),
                ('pop_shake_light', models.FloatField(null=True, blank=True)),
                ('pop_shake_moderate', models.FloatField(null=True, blank=True)),
                ('pop_shake_strong', models.FloatField(null=True, blank=True)),
                ('pop_shake_verystrong', models.FloatField(null=True, blank=True)),
                ('pop_shake_severe', models.FloatField(null=True, blank=True)),
                ('pop_shake_violent', models.FloatField(null=True, blank=True)),
                ('pop_shake_extreme', models.FloatField(null=True, blank=True)),
                ('settlement_shake_weak', models.FloatField(null=True, blank=True)),
                ('settlement_shake_light', models.FloatField(null=True, blank=True)),
                ('settlement_shake_moderate', models.FloatField(null=True, blank=True)),
                ('settlement_shake_strong', models.FloatField(null=True, blank=True)),
                ('settlement_shake_verystrong', models.FloatField(null=True, blank=True)),
                ('settlement_shake_severe', models.FloatField(null=True, blank=True)),
                ('settlement_shake_violent', models.FloatField(null=True, blank=True)),
                ('settlement_shake_extreme', models.FloatField(null=True, blank=True)),
                ('buildings_shake_weak', models.FloatField(null=True, blank=True)),
                ('buildings_shake_light', models.FloatField(null=True, blank=True)),
                ('buildings_shake_moderate', models.FloatField(null=True, blank=True)),
                ('buildings_shake_strong', models.FloatField(null=True, blank=True)),
                ('buildings_shake_verystrong', models.FloatField(null=True, blank=True)),
                ('buildings_shake_severe', models.FloatField(null=True, blank=True)),
                ('buildings_shake_violent', models.FloatField(null=True, blank=True)),
                ('buildings_shake_extreme', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'villagesummary_eq',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WrlAdmbndaInt',
            fields=[
                ('ogc_fid', models.IntegerField(serialize=False, primary_key=True)),
                ('wkb_geometry', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326, null=True, blank=True)),
                ('name_en', models.CharField(max_length=255, blank=True)),
                ('continent', models.CharField(max_length=255, blank=True)),
                ('name_prs', models.CharField(max_length=255, blank=True)),
                ('name_ps', models.CharField(max_length=255, blank=True)),
                ('shape_length', models.FloatField(null=True, blank=True)),
                ('shape_area', models.FloatField(null=True, blank=True)),
            ],
            options={
                'db_table': 'wrl_admbnda_int',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='afgavsa',
            name='basinmember',
            field=models.ForeignKey(related_name='basinmembersava', to='geodb.AfgShedaLvl4'),
        ),
    ]
