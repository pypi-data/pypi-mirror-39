---
- name: "wait and update outputs using jobids"
  include: update_async_outputs.yml
  when: async

# NOTE: If there's async or not, lets just use topology_outputs_<resource> values
# and do the updating after all data collection is complete.
- name: "Updating topology_outputs"
  set_fact:
    topology_outputs:
      dummy_res: "{{ topology_outputs_dummy | default([]) }}"
      os_server_res: "{{ topology_outputs_os_server | default([]) }}"
      os_keypair_res: "{{ topology_outputs_os_keypair | default([]) }}"
      os_obj_res: "{{ topology_outputs_os_obj | default([]) }}"
      os_volume_res: "{{ topology_outputs_os_volume | default([]) }}"
      os_heat_res: "{{ topology_outputs_os_heat | default([]) }}"
      os_sg_res: "{{ topology_outputs_os_sg | default([]) }}"
      os_network: "{{ topology_outputs_os_network | default([]) }}"
      aws_ec2_res: "{{ topology_outputs_aws_ec2 | default([]) }}"
      aws_s3_res: "{{ topology_outputs_aws_s3 | default([]) }}"
      aws_ec2_key_res: "{{ topology_outputs_aws_ec2_key | default([]) }}"
      aws_cfn_res: "{{ topology_outputs_aws_cfn | default([]) }}"
      gcloud_gce_res: "{{ topology_outputs_gcloud_gce | default([]) }}"
      duffy_res: "{{ topology_outputs_duffy | default([]) }}"
      rax_server_res: "{{ topology_outputs_rax_server | default([]) }}"
      beaker_res: "{{ topology_outputs_beaker_server | default([]) }}"
      libvirt_res: "{{ topology_outputs_libvirt_nodes | default([]) }}"
      ovirt_vms_res: "{{ topology_outputs_ovirt_vms | default([]) }}"
      openshift_res: "{{ topology_outputs_openshift_resources | default([]) }}"

# this task only records the outputs necessary.
# No more will the outputter record a record for every
# possible provider. This is done with the with_dict/when item.value test

- name: "Add topology_outputs to the rundb"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: update
    table: "{{ target }}"
    key: "outputs"
    value: "[{{ {'resources': topology_outputs } }}]"
    run_id: "{{ rundb_id }}"

- name: "Create resources directory (v1.0.x compatibility)"
  file:
    state: directory
    path: "{{ default_resources_path + '/' }}"
  when: generate_resources
  ignore_errors: yes

- name: "set topology_name"
  set_fact:
    topology_name: "{{ topo_data['topology_name'] }}"

- name: "Generate resources file (v1.0.x compatibility)"
  template:
    src: "../templates/output_formatter.j2"
    dest: "{{ default_resources_path + '/' +
    topology_name.replace(' ', '_').lower() + '.output' }}"
  when: generate_resources and state == "present"

- name: "set topology_name"
  set_fact:
    topology_name: "{{ topo_data['topology_name'] }}"

- name: "Updating uhash-based inventory_path with the absolute path"
  set_fact:
    inventory_path: "{{ inventory_path | default( workspace +'/'+inventories_folder+'/'+
    topology_name.replace(' ', '_').lower() ) + '-' + uhash }}.inventory"
  when: enable_uhash

- name: "Updating inventory_path with the absolute path"
  set_fact:
    inventory_path: "{{ inventory_path | default( workspace +'/'+inventories_folder+'/'+
    topology_name.replace(' ', '_').lower() ) }}.inventory"
  when: not enable_uhash

- name: "Add inventory_path to outputs"
  rundb:
    conn_str: "{{ rundb_conn }}"
    operation: update
    table: "{{ target }}"
    key: "outputs"
    value: "[{{ {'inventory_path': [inventory_path]} }}]"
    run_id: "{{ rundb_id }}"
