# coding: utf-8

"""
    Cloudera Manager API

    <h1>Cloudera Manager API v31</h1>       <p>Introduced in Cloudera Manager 6.1.0</p>       <p><a href=\"http://www.cloudera.com/documentation.html\">Cloudera Product Documentation</a></p>

    OpenAPI spec version: 6.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ApiClustersPerfInspectorArgs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_cluster': 'str',
        'target_cluster': 'str',
        'ping_args': 'ApiPerfInspectorPingArgs'
    }

    attribute_map = {
        'source_cluster': 'sourceCluster',
        'target_cluster': 'targetCluster',
        'ping_args': 'pingArgs'
    }

    def __init__(self, source_cluster=None, target_cluster=None, ping_args=None):
        """
        ApiClustersPerfInspectorArgs - a model defined in Swagger
        """

        self._source_cluster = None
        self._target_cluster = None
        self._ping_args = None

        if source_cluster is not None:
          self.source_cluster = source_cluster
        if target_cluster is not None:
          self.target_cluster = target_cluster
        if ping_args is not None:
          self.ping_args = ping_args

    @property
    def source_cluster(self):
        """
        Gets the source_cluster of this ApiClustersPerfInspectorArgs.
        Required name of the source cluster to run network diagnostics test.

        :return: The source_cluster of this ApiClustersPerfInspectorArgs.
        :rtype: str
        """
        return self._source_cluster

    @source_cluster.setter
    def source_cluster(self, source_cluster):
        """
        Sets the source_cluster of this ApiClustersPerfInspectorArgs.
        Required name of the source cluster to run network diagnostics test.

        :param source_cluster: The source_cluster of this ApiClustersPerfInspectorArgs.
        :type: str
        """

        self._source_cluster = source_cluster

    @property
    def target_cluster(self):
        """
        Gets the target_cluster of this ApiClustersPerfInspectorArgs.
        Required name of the target cluster to run network diagnostics test.

        :return: The target_cluster of this ApiClustersPerfInspectorArgs.
        :rtype: str
        """
        return self._target_cluster

    @target_cluster.setter
    def target_cluster(self, target_cluster):
        """
        Sets the target_cluster of this ApiClustersPerfInspectorArgs.
        Required name of the target cluster to run network diagnostics test.

        :param target_cluster: The target_cluster of this ApiClustersPerfInspectorArgs.
        :type: str
        """

        self._target_cluster = target_cluster

    @property
    def ping_args(self):
        """
        Gets the ping_args of this ApiClustersPerfInspectorArgs.
        Optional ping request arguments. If not specified, default arguments will be used for ping test.

        :return: The ping_args of this ApiClustersPerfInspectorArgs.
        :rtype: ApiPerfInspectorPingArgs
        """
        return self._ping_args

    @ping_args.setter
    def ping_args(self, ping_args):
        """
        Sets the ping_args of this ApiClustersPerfInspectorArgs.
        Optional ping request arguments. If not specified, default arguments will be used for ping test.

        :param ping_args: The ping_args of this ApiClustersPerfInspectorArgs.
        :type: ApiPerfInspectorPingArgs
        """

        self._ping_args = ping_args

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ApiClustersPerfInspectorArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
