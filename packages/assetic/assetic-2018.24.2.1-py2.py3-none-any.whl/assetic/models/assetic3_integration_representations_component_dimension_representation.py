# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.web_api_hal_embedded_resource import WebApiHalEmbeddedResource  # noqa: F401,E501
##from assetic.models.web_api_hal_link import WebApiHalLink  # noqa: F401,E501


class Assetic3IntegrationRepresentationsComponentDimensionRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'dimension_id': 'int',
        'record_type': 'str',
        'network_measure': 'float',
        'unit': 'str',
        'multiplier': 'float',
        'network_measure_type': 'str',
        'comments': 'str',
        'network_measure_sub_total': 'float',
        'network_measure_sub_total_unit': 'str',
        'message': 'str',
        'component_id': 'str',
        'asset_id': 'str',
        'last_modified_on': 'str',
        'last_modified_by': 'str',
        'links': 'list[WebApiHalLink]',
        'embedded': 'list[WebApiHalEmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'dimension_id': 'DimensionId',
        'record_type': 'RecordType',
        'network_measure': 'NetworkMeasure',
        'unit': 'Unit',
        'multiplier': 'Multiplier',
        'network_measure_type': 'NetworkMeasureType',
        'comments': 'Comments',
        'network_measure_sub_total': 'NetworkMeasureSubTotal',
        'network_measure_sub_total_unit': 'NetworkMeasureSubTotalUnit',
        'message': 'Message',
        'component_id': 'ComponentId',
        'asset_id': 'AssetId',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, dimension_id=None, record_type=None, network_measure=None, unit=None, multiplier=None, network_measure_type=None, comments=None, network_measure_sub_total=None, network_measure_sub_total_unit=None, message=None, component_id=None, asset_id=None, last_modified_on=None, last_modified_by=None, links=None, embedded=None):  # noqa: E501
        """Assetic3IntegrationRepresentationsComponentDimensionRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._dimension_id = None
        self._record_type = None
        self._network_measure = None
        self._unit = None
        self._multiplier = None
        self._network_measure_type = None
        self._comments = None
        self._network_measure_sub_total = None
        self._network_measure_sub_total_unit = None
        self._message = None
        self._component_id = None
        self._asset_id = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if dimension_id is not None:
            self.dimension_id = dimension_id
        if record_type is not None:
            self.record_type = record_type
        if network_measure is not None:
            self.network_measure = network_measure
        if unit is not None:
            self.unit = unit
        if multiplier is not None:
            self.multiplier = multiplier
        if network_measure_type is not None:
            self.network_measure_type = network_measure_type
        if comments is not None:
            self.comments = comments
        if network_measure_sub_total is not None:
            self.network_measure_sub_total = network_measure_sub_total
        if network_measure_sub_total_unit is not None:
            self.network_measure_sub_total_unit = network_measure_sub_total_unit
        if message is not None:
            self.message = message
        if component_id is not None:
            self.component_id = component_id
        if asset_id is not None:
            self.asset_id = asset_id
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param id: The id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def dimension_id(self):
        """Gets the dimension_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The dimension_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._dimension_id

    @dimension_id.setter
    def dimension_id(self, dimension_id):
        """Sets the dimension_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param dimension_id: The dimension_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: int
        """

        self._dimension_id = dimension_id

    @property
    def record_type(self):
        """Gets the record_type of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The record_type of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param record_type: The record_type of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def network_measure(self):
        """Gets the network_measure of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The network_measure of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._network_measure

    @network_measure.setter
    def network_measure(self, network_measure):
        """Sets the network_measure of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param network_measure: The network_measure of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._network_measure = network_measure

    @property
    def unit(self):
        """Gets the unit of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The unit of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param unit: The unit of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def multiplier(self):
        """Gets the multiplier of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The multiplier of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param multiplier: The multiplier of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._multiplier = multiplier

    @property
    def network_measure_type(self):
        """Gets the network_measure_type of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The network_measure_type of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._network_measure_type

    @network_measure_type.setter
    def network_measure_type(self, network_measure_type):
        """Sets the network_measure_type of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param network_measure_type: The network_measure_type of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._network_measure_type = network_measure_type

    @property
    def comments(self):
        """Gets the comments of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The comments of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param comments: The comments of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def network_measure_sub_total(self):
        """Gets the network_measure_sub_total of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The network_measure_sub_total of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._network_measure_sub_total

    @network_measure_sub_total.setter
    def network_measure_sub_total(self, network_measure_sub_total):
        """Sets the network_measure_sub_total of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param network_measure_sub_total: The network_measure_sub_total of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._network_measure_sub_total = network_measure_sub_total

    @property
    def network_measure_sub_total_unit(self):
        """Gets the network_measure_sub_total_unit of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The network_measure_sub_total_unit of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._network_measure_sub_total_unit

    @network_measure_sub_total_unit.setter
    def network_measure_sub_total_unit(self, network_measure_sub_total_unit):
        """Sets the network_measure_sub_total_unit of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param network_measure_sub_total_unit: The network_measure_sub_total_unit of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._network_measure_sub_total_unit = network_measure_sub_total_unit

    @property
    def message(self):
        """Gets the message of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The message of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param message: The message of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def component_id(self):
        """Gets the component_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The component_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param component_id: The component_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def asset_id(self):
        """Gets the asset_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The asset_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param asset_id: The asset_id of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The last_modified_on of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param last_modified_on: The last_modified_on of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The last_modified_by of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param last_modified_by: The last_modified_by of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The links of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: list[WebApiHalLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param links: The links of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: list[WebApiHalLink]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501


        :return: The embedded of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :rtype: list[WebApiHalEmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.


        :param embedded: The embedded of this Assetic3IntegrationRepresentationsComponentDimensionRepresentation.  # noqa: E501
        :type: list[WebApiHalEmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assetic3IntegrationRepresentationsComponentDimensionRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
