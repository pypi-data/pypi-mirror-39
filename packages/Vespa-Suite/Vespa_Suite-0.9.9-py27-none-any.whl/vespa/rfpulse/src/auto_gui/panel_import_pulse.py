#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.5 on Tue Feb 17 19:06:17 2015

import wx

# begin wxGlade: extracode
# end wxGlade


class PanelImportPulse(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PanelImportPulse.__init__
        kwds["style"] = wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.button_1 = wx.Button(self, -1, "Browse...")
        self.StaticFilename = wx.StaticText(self, -1, "default")
        self.LabelInstructions = wx.StaticText(self, -1, "Please refer to the RFPulse user manual for pulse import file format details.", style=wx.ST_NO_AUTORESIZE)
        self.static_line_1 = wx.StaticLine(self, -1)
        self.TextComment = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE | wx.TE_WORDWRAP)
        self.TextDwellTime = wx.TextCtrl(self, -1, "")
        self.radio_btn_max_intensity = wx.RadioButton(self, -1, "Max Intensity")
        self.TextMaxIntensity = wx.TextCtrl(self, -1, "")
        self.label_microtesla = wx.StaticText(self, -1, " microTesla")
        self.radio_btn_scale_factor = wx.RadioButton(self, -1, "Scale Factor")
        self.TextScaleFactor = wx.TextCtrl(self, -1, "")
        self.sizer_5_staticbox = wx.StaticBox(self, -1, "Amplitude Settings")
        self.RadioPhaseValueUnits = wx.RadioBox(self, -1, "Phase Value Units", choices=["Degrees", "Radians"], majorDimension=0, style=wx.RA_SPECIFY_COLS)
        self.sizer_2_staticbox = wx.StaticBox(self, -1, "Imported Pulse Parameters")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.on_browse_button, self.button_1)
        self.Bind(wx.EVT_RADIOBUTTON, self.on_radio_max_intensity, self.radio_btn_max_intensity)
        self.Bind(wx.EVT_RADIOBUTTON, self.on_radio_scale_factor, self.radio_btn_scale_factor)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PanelImportPulse.__set_properties
        self.TextDwellTime.SetMinSize((130, -1))
        self.TextMaxIntensity.SetMinSize((130, -1))
        self.TextScaleFactor.SetMinSize((130, -1))
        self.RadioPhaseValueUnits.SetSelection(0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PanelImportPulse.__do_layout
        self.sizer_2_staticbox.Lower()
        sizer_2 = wx.StaticBoxSizer(self.sizer_2_staticbox, wx.VERTICAL)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(2, 3, 0, 0)
        grid_sizer_1 = wx.FlexGridSizer(2, 3, 4, 4)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.button_1, 0, 0, 0)
        sizer_3.Add(self.StaticFilename, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_2.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 4)
        sizer_2.Add(self.LabelInstructions, 0, wx.TOP | wx.BOTTOM | wx.EXPAND, 10)
        sizer_2.Add(self.static_line_1, 0, wx.EXPAND, 0)
        label_8 = wx.StaticText(self, -1, "Comment:")
        sizer_4.Add(label_8, 0, wx.TOP | wx.BOTTOM | wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_4.Add(self.TextComment, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(sizer_4, 0, wx.ALL | wx.EXPAND, 4)
        label_4 = wx.StaticText(self, -1, " Dwell Time:")
        grid_sizer_1.Add(label_4, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.TextDwellTime, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        label_6 = wx.StaticText(self, -1, " microseconds")
        grid_sizer_1.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2.Add(grid_sizer_1, 0, wx.ALL | wx.EXPAND, 4)
        grid_sizer_2.Add(self.radio_btn_max_intensity, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.TextMaxIntensity, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.label_microtesla, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.radio_btn_scale_factor, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.TextScaleFactor, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add((20, 20), 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(grid_sizer_2, 0, wx.LEFT | wx.EXPAND, 4)
        sizer_2.Add(sizer_5, 0, wx.TOP | wx.BOTTOM | wx.EXPAND, 4)
        sizer_2.Add(self.RadioPhaseValueUnits, 0, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        # end wxGlade

    def on_browse_button(self, event):  # wxGlade: PanelImportPulse.<event_handler>
        print "Event handler `on_browse_button' not implemented!"
        event.Skip()

    def on_radio_max_intensity(self, event):  # wxGlade: PanelImportPulse.<event_handler>
        print "Event handler `on_radio_max_intensity' not implemented!"
        event.Skip()

    def on_radio_scale_factor(self, event):  # wxGlade: PanelImportPulse.<event_handler>
        print "Event handler `on_radio_scale_factor' not implemented!"
        event.Skip()

# end of class PanelImportPulse

class CreateImportPulse(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CreateImportPulse.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = PanelImportPulse(self, -1)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CreateImportPulse.__set_properties
        self.SetTitle("frame_create_pulse")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CreateImportPulse.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class CreateImportPulse
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = CreateImportPulse(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
