# Benchmarking Suite
# Copyright 2014-2017 Engineering Ingegneria Informatica S.p.A.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Developed in the ARTIST EU project (www.artist-project.eu) and in the
# CloudPerfect EU project (https://cloudperfect.eu/)

[DEFAULT]
tool_name = YCSB MongoDB
class = benchsuite.stdlib.benchmark.vm_benchmark.BashCommandBenchmark
parser = benchsuite.stdlib.benchmark.parsers.YCSBResultParser


install_centos =
    echo -e "[mongodb]\nbaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/\ngpgcheck=0" | sudo tee /etc/yum.repos.d/mongo.repo
    sudo yum -y install mongodb-org-server mongodb-org-shell java-1.7.0-openjdk python
    sudo /etc/init.d/mongod restart
    %(install_all)s


install_ubuntu_16 =
    sudo apt-get update
    sudo DEBIAN_FRONTEND=noninteractive apt-get -y install mongodb openjdk-8-jre python
    sudo /etc/init.d/mongodb restart
    %(install_all)s


install_ubuntu_14 =
    sudo apt-get update
    sudo DEBIAN_FRONTEND=noninteractive apt-get -y install mongodb openjdk-7-jre python
    sudo /etc/init.d/mongodb restart
    %(install_all)s

install_all =
    wget https://github.com/brianfrankcooper/YCSB/releases/download/0.11.0/ycsb-mongodb-binding-0.11.0.tar.gz
    tar xzvf ycsb-mongodb-binding-0.11.0.tar.gz
    mv ycsb-mongodb-binding-0.11.0 ycsb
    cd ycsb
    echo "%(workload)s" > workload.txt
    # wait to let mongo server come online
    mongo --eval "db.stats()" || sleep 60
    mongo ycsb --eval "db.dropDatabase()"
    bin/ycsb load mongodb-async -s -P workload.txt | tee output
    # since the ycsb commands do not exit with an exit status !=0 if the load or run contain errors, we search for the FAILED word in the output
    ! grep FAILED output

execute =
    cd ycsb
    bin/ycsb run mongodb-async -s -P workload.txt
    # since the ycsb commands do not exit with an exit status !=0 if the load or run contain errors, we search for the FAILED word in the output
    ! grep FAILED output

workload =


default_ops_count= 100000
long_ops_count = 1000000

categories_common = Disk Intensive, Database, Relational Database, MySQL Database

[workloada]
categories = %(categories_common)s, Read/Update ratio 50/50
description = The application has read/update operations ratio of 50/50. Example: session store recording recent actions
workload =
    recordcount=%(default_ops_count)s
    operationcount=%(default_ops_count)s
    workload=com.yahoo.ycsb.workloads.CoreWorkload
    readallfields=true
    readproportion=0.5
    updateproportion=0.5
    scanproportion=0
    insertproportion=0
    requestdistribution=zipfian


[workloadb]
categories = %(categories_common)s, Read/Update ratio 95/5
description = The application has read/update operations ratio of 95/5. Example: photo tagging; add a tag is an update, but most operations are to read tags
workload =
    recordcount=%(default_ops_count)s
    operationcount=%(default_ops_count)s
    workload=com.yahoo.ycsb.workloads.CoreWorkload
    readallfields=true
    readproportion=0.95
    updateproportion=0.05
    scanproportion=0
    insertproportion=0
    requestdistribution=zipfian


[workloadc]
categories = %(categories_common)s, Only Reads
description = The application has 100%% of read operations. Example: user profile cache, where profiles are constructed elsewhere (e.g., Hadoop)
workload =
    recordcount=%(default_ops_count)s
    operationcount=%(default_ops_count)s
    workload=com.yahoo.ycsb.workloads.CoreWorkload
    readallfields=true
    readproportion=1
    updateproportion=0
    scanproportion=0
    insertproportion=0
    requestdistribution=zipfian


[workloadd]
categories = %(categories_common)s, Read/Insert ratio 95/5
description = The application has read/insert operations ratio of 95/5. Example: user status updates; people want to read the latest
workload =
    recordcount=%(default_ops_count)s
    operationcount=%(default_ops_count)s
    workload=com.yahoo.ycsb.workloads.CoreWorkload
    readallfields=true
    readproportion=0.95
    updateproportion=0
    scanproportion=0
    insertproportion=0.05
    requestdistribution=latest


[workloade]
categories = %(categories_common)s, Scan/Insert ratio 95/5
description = The application has scan/insert operations ratio of 95/5. Example: threaded conversations, where each scan is for the posts in a given thread (assumed to be clustered by thread id)
workload =
    recordcount=%(default_ops_count)s
    operationcount=%(default_ops_count)s
    workload=com.yahoo.ycsb.workloads.CoreWorkload
    readallfields=true
    readproportion=0
    updateproportion=0
    scanproportion=0.95
    insertproportion=0.05
    requestdistribution=zipfian
    maxscanlength=100
    scanlengthdistribution=uniform

[workloadf]
categories = %(categories_common)s, Read/read-modify-write ratio 50/50
description = The application has a Read/read-modify-write operations ratio of 50/50. Example: user database, where user records are read and modified by the user or to record user activity
workload =
    recordcount=%(default_ops_count)s
    operationcount=%(default_ops_count)s
    workload=com.yahoo.ycsb.workloads.CoreWorkload
    readallfields=true
    readproportion=0.5
    updateproportion=0
    scanproportion=0
    insertproportion=0
    readmodifywriteproportion=0.5
    requestdistribution=zipfian

#[workloada_long]
#categories = %(categories_common)s, Read/Update ration 50/50
#description = The application has read/update operations ratio of 50/50. Example: session store recording recent actions
#workload =
#    recordcount=%(long_ops_count)s
#    operationcount=%(long_ops_count)s
#    workload=com.yahoo.ycsb.workloads.CoreWorkload
#    readallfields=true
#    readproportion=0.5
#    updateproportion=0.5
#    scanproportion=0
#    insertproportion=0
#    requestdistribution=zipfian

