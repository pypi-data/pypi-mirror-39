# coding: utf-8

"""
    teralytic

    The Teralytic API allows clients to manage their organization, view their fields and and probes, and query sensor readings and analytics.  For sandbox testing you may use the api key: `swagger.teralytic.io`   # noqa: E501

    OpenAPI spec version: 1.0.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from teralytic.api_client import ApiClient


class ProbeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def probe_get(self, organization_id, probe_id, **kwargs):  # noqa: E501
        """List single Probe details, including Reading data, associated with Probe id provided (from set of Fields associated with the account key)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.probe_get(organization_id, probe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: id of Organization to retrieve (required)
        :param str probe_id: id of Probe to retrieve (required)
        :return: Probe
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.probe_get_with_http_info(organization_id, probe_id, **kwargs)  # noqa: E501
        else:
            (data) = self.probe_get_with_http_info(organization_id, probe_id, **kwargs)  # noqa: E501
            return data

    def probe_get_with_http_info(self, organization_id, probe_id, **kwargs):  # noqa: E501
        """List single Probe details, including Reading data, associated with Probe id provided (from set of Fields associated with the account key)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.probe_get_with_http_info(organization_id, probe_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: id of Organization to retrieve (required)
        :param str probe_id: id of Probe to retrieve (required)
        :return: Probe
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'probe_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method probe_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `probe_get`")  # noqa: E501
        # verify the required parameter 'probe_id' is set
        if ('probe_id' not in params or
                params['probe_id'] is None):
            raise ValueError("Missing the required parameter `probe_id` when calling `probe_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501
        if 'probe_id' in params:
            path_params['probe_id'] = params['probe_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/probes/{probe_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Probe',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def probe_list(self, organization_id, **kwargs):  # noqa: E501
        """List all Probes associated with account key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.probe_list(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: id of Organization to retrieve (required)
        :param list[str] fields: Fields to filter search on
        :return: list[Probe]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.probe_list_with_http_info(organization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.probe_list_with_http_info(organization_id, **kwargs)  # noqa: E501
            return data

    def probe_list_with_http_info(self, organization_id, **kwargs):  # noqa: E501
        """List all Probes associated with account key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.probe_list_with_http_info(organization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str organization_id: id of Organization to retrieve (required)
        :param list[str] fields: Fields to filter search on
        :return: list[Probe]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organization_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method probe_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organization_id' is set
        if ('organization_id' not in params or
                params['organization_id'] is None):
            raise ValueError("Missing the required parameter `organization_id` when calling `probe_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organization_id' in params:
            path_params['organization_id'] = params['organization_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/organizations/{organization_id}/probes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Probe]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
