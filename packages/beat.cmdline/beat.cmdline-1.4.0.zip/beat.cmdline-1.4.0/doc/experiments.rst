.. vim: set fileencoding=utf-8 :

.. Copyright (c) 2016 Idiap Research Institute, http://www.idiap.ch/          ..
.. Contact: beat.support@idiap.ch                                             ..
..                                                                            ..
.. This file is part of the beat.cmdline module of the BEAT platform.         ..
..                                                                            ..
.. Commercial License Usage                                                   ..
.. Licensees holding valid commercial BEAT licenses may use this file in      ..
.. accordance with the terms contained in a written agreement between you     ..
.. and Idiap. For further information contact tto@idiap.ch                    ..
..                                                                            ..
.. Alternatively, this file may be used under the terms of the GNU Affero     ..
.. Public License version 3 as published by the Free Software and appearing   ..
.. in the file LICENSE.AGPL included in the packaging of this file.           ..
.. The BEAT platform is distributed in the hope that it will be useful, but   ..
.. WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY ..
.. or FITNESS FOR A PARTICULAR PURPOSE.                                       ..
..                                                                            ..
.. You should have received a copy of the GNU Affero Public License along     ..
.. with the BEAT platform. If not, see http://www.gnu.org/licenses/.          ..


.. _beat-cmdline-experiments:

Experiments
-----------

The BEAT command-line utility called ``beat`` can perform a variety of actions
concerning experiments. These actions are grouped in two sets:

  * local: Local actions allow the user to act on locally installed objects.
  * remote: Actions on the remote web server.

Once you have setup your prefix directory as explained in
:ref:`beat-cmdline-configuration`, you're ready to start configuring new
experiments.

The commands available for the experiments are:

.. command-output:: beat experiments --help

For instance, a list of the experiments available locally can
be obtained as follows:

.. command-output:: beat experiments list
   :cwd: ..

A list of the experiments available on the remote platform can
be obtained by running the following command:

.. code-block:: sh

  $ beat experiments list --remote

.. _beat-cmdline-experiments-running:

How to run an experiment?
.........................

The command ``beat experiments run <name>`` can be used to run the experiment
defined in an experiment definition file. It is the ideal way to debug an
experiment, since by default ``beat`` will use the local executor, which provides
a simple environment with PDB support without advanced features
(multi-processing, optimizations, sandboxing, multiple environments, etc.).

Here, the ``--prefix`` option is used to tell the scripts where all our data
formats, toolchains and algorithms are located. This option can be set
in your configuration file (see :ref:`beat-cmdline-configuration`).

This command displays for each block the files containing the data to use as
input, and the files generated by the outputs of the block.

The default behavior is to not regenerate data files already present in the
cache. You can force the script to not take the content of the cache into
account with the ``--force`` flag.

Executors
=========

"Executors" are modules that execute each block in an experiment. On the BEAT
platform, there is only the one executor, which executes the experiment using
Docker containers with advanced scheduling and security features. When using ``beat.cmdline`` locally, however, you have the option of using either
the BEAT platform's executor, behind the ``--docker`` flag (for more information about using docker executors (see `here <https://www.idiap.ch/software/beat/docs/beat/docs/master/beat.core/doc/develop.html>`_), or the "local"
executor (refer to `BEAT installation`_ for information about local environment). The local executor, is
much simpler, aimed at providing a smooth development experience. However,
there are two important tradeoffs:

- Lower performance for non-trivial experiments, as it runs everything
  synchronously in one process on the CPU.
- No multiple environments, as the Python environment that built
  ``beat.cmdline`` is used. This means that many BEAT experiments that
  rely on different/multiple environments will not work.


.. _beat-cmdline-experiments-displaydata:

How to examine the content of a data file?
..........................................

The ``beat cache`` collection of commands interact with the cache:

.. command-output:: beat cache --help

How to plot output images from experiments?
...........................................

The command ``beat experiments plot <experiment name>`` can be used to plot output images
for the various experiments.

There a two ways to plot data:

* using remote data results:

.. code-block:: sh

  $ beat experiments plot --remote <experiment name>

* using data from the cache of locally ran experiments

.. code-block:: sh

  $ beat experiments plot <experiment name>

In both cases the 'output folder' option can be specified to save all the plots to a specific directory. By default, if nothing was specified, the plots will be saved under the experiment path.

Take into account that some extra options are available such as '--show' which will pop out the generated plots on your screen.

.. include:: links.rst
