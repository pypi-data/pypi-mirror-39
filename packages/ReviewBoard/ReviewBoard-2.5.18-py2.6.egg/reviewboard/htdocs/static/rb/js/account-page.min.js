(function(){(function(){var APITokenItem,APITokenItemCollection,APITokenItemView,PolicyEditorView,SiteAPITokensView,POLICY_READ_WRITE="rw",POLICY_READ_ONLY="ro",POLICY_CUSTOM="custom",POLICY_LABELS={};POLICY_LABELS[POLICY_READ_WRITE]=gettext("Full access");POLICY_LABELS[POLICY_READ_ONLY]=gettext("Read-only");POLICY_LABELS[POLICY_CUSTOM]=gettext("Custom");APITokenItem=RB.Config.ResourceListItem.extend({defaults:_.defaults({policyType:POLICY_READ_WRITE,localSiteName:null,showRemove:true},RB.Config.ResourceListItem.prototype.defaults),syncAttrs:["id","note","policy","tokenValue"],initialize:function(options){var policy,policyType;_super(this).initialize.call(this,options);this.on("change:policyType",this._onPolicyTypeChanged,this);policy=this.get("policy")||{};policyType=this._guessPolicyType(policy);this._policyMenuAction={id:"policy",label:POLICY_LABELS[policyType],children:[this._makePolicyAction(POLICY_READ_WRITE),this._makePolicyAction(POLICY_READ_ONLY),this._makePolicyAction(POLICY_CUSTOM,{id:"policy-custom",dispatchOnClick:true})]};this.actions.unshift(this._policyMenuAction);this.set("policyType",policyType)},createResource:function(attrs){return new RB.APIToken(_.defaults({userName:RB.UserSession.instance.get("username"),localSitePrefix:this.collection.localSitePrefix},attrs))},saveNote:function(note,options,context){this._saveAttribute("note",note,options,context)},savePolicy:function(policy,options,context){this._saveAttribute("policy",policy,options,context)},_saveAttribute:function(attr,value,options,context){this.resource.ready({ready:function(){this.resource.set(attr,value);this.resource.save(options,context)}},this)},_guessPolicyType:function(policy){if(_.isEqual(policy,RB.APIToken.defaultPolicies.readOnly)){return POLICY_READ_ONLY}else if(_.isEqual(policy,RB.APIToken.defaultPolicies.readWrite)){return POLICY_READ_WRITE}else{return POLICY_CUSTOM}},_makePolicyAction:function(policyType,options){return _.defaults({label:POLICY_LABELS[policyType],type:"radio",name:"policy-type",propName:"policyType",radioValue:policyType},options)},_onPolicyTypeChanged:function(){var policyType=this.get("policyType"),newPolicy;this._policyMenuAction.label=POLICY_LABELS[policyType];this.trigger("actionsChanged");if(policyType===POLICY_READ_ONLY){newPolicy=RB.APIToken.defaultPolicies.readOnly}else if(policyType===POLICY_READ_WRITE){newPolicy=RB.APIToken.defaultPolicies.readWrite}else{return}if(!_.isEqual(newPolicy,this.get("policy"))){this.savePolicy(newPolicy)}}});APITokenItemCollection=Backbone.Collection.extend({model:APITokenItem,initialize:function(models,options){this.localSitePrefix=options.localSitePrefix}});APITokenItemView=Djblets.Config.ListItemView.extend({EMPTY_NOTE_PLACEHOLDER:gettext("Click to describe this token"),template:_.template(['<div class="config-api-token-value"><%- tokenValue %></div>','<span class="config-api-token-note"></span>'].join("")),actionHandlers:{"delete":"_onRemoveClicked","policy-custom":"_onCustomPolicyClicked"},initialize:function(options){_super(this).initialize.call(this,options);this._$note=null;this.listenTo(this.model.resource,"change:note",this._updateNote)},render:function(){_super(this).render.call(this);this._$note=this.$(".config-api-token-note").inlineEditor({editIconClass:"rb-icon rb-icon-edit"}).on({beginEdit:_.bind(function(){this._$note.inlineEditor("setValue",this.model.get("note"))},this),complete:_.bind(function(e,value){this.model.saveNote(value)},this)});this._updateNote();return this},_updateNote:function(){var note=this.model.resource.get("note");if(note){this._$note.removeClass("empty").text(note)}else{this._$note.addClass("empty").text(this.EMPTY_NOTE_PLACEHOLDER)}},_onCustomPolicyClicked:function(){var view=new PolicyEditorView({model:this.model,prevPolicyType:this.model.previous("policyType")});view.render();return false},_onRemoveClicked:function(){$("<p/>").html(gettext("This will prevent clients using this token when authenticating.")).modalBox({title:gettext("Are you sure you want to remove this token?"),buttons:[$('<input type="button"/>').val(gettext("Cancel")),$('<input type="button" class="danger" />').val(gettext("Remove")).click(_.bind(function(){this.model.resource.destroy()},this))]})}});PolicyEditorView=Backbone.View.extend({id:"custom_policy_editor",template:_.template(["<p><%= instructions %></p>","<textarea/>"].join("")),initialize:function(options){this.prevPolicyType=options.prevPolicyType;this._codeMirror=null;this._$policy=null;this._$saveButtons=null},render:function(){var policy=this.model.get("policy");if(_.isEmpty(this.model.get("policy"))){policy=RB.APIToken.defaultPolicies.custom}this.$el.html(this.template({instructions:interpolate(gettext('You can limit access to the API through a custom policy. See the <a href="%s" target="_blank">documentation</a> on how to write policies.'),[MANUAL_URL+"webapi/2.0/api-token-policy/"])}));this._$policy=this.$("textarea").val(JSON.stringify(policy,null,"  "));this.$el.modalBox({title:gettext("Custom Token Access Policy"),buttons:[$('<input type="button"/>').val(gettext("Cancel")).click(_.bind(this.cancel,this)),$('<input type="button" class="save-button"/>').val(gettext("Save and continue editing")).click(_.bind(function(){this.save();return false},this)),$('<input type="button" class="btn primary save-button"/>').val(gettext("Save")).click(_.bind(function(){this.save(true);return false},this))]});this._$saveButtons=this.$el.modalBox("buttons").find(".save-button");this._codeMirror=CodeMirror.fromTextArea(this._$policy[0],{mode:"application/json",lineNumbers:true,lineWrapping:true,matchBrackets:true,lint:{onUpdateLinting:_.bind(this._onUpdateLinting,this)},gutters:["CodeMirror-lint-markers"]});this._codeMirror.focus()},remove:function(){this.$el.modalBox("destroy")},cancel:function(){this.model.set("policyType",this.prevPolicyType)},save:function(closeOnSave){var policyStr=this._codeMirror.getValue().strip(),policy;try{policy=JSON.parse(policyStr)}catch(e){alert(interpolate(gettext("There is a syntax error in your policy: %s"),[e]));return false}this.model.savePolicy(policy,{success:function(){if(closeOnSave){this.remove()}},error:function(model,xhr){if(xhr.errorPayload.err.code===105&&xhr.errorPayload.fields.policy){alert(xhr.errorPayload.fields.policy)}else{alert(xhr.errorPayload.err.msg)}}},this);return false},_onUpdateLinting:function(annotationsNotSorted){this._$saveButtons.prop("disabled",annotationsNotSorted.length>0)}});SiteAPITokensView=Backbone.View.extend({className:"config-site-api-tokens",template:_.template(["<% if (name) { %>"," <h3><%- name %></h3>","<% } %>",'<div class="api-tokens box-recessed">',' <div class="generate-api-token config-forms-list-item">','  <a href="#"><%- generateText %></a>'," </div>","</div>"].join("")),events:{"click .generate-api-token":"_onGenerateClicked"},initialize:function(options){this.localSiteName=options.localSiteName;this.localSitePrefix=options.localSitePrefix;this.collection=new APITokenItemCollection(options.apiTokens,{localSitePrefix:this.localSitePrefix});this.apiTokensList=new Djblets.Config.List({},{collection:this.collection});this._listView=null},render:function(){this._listView=new Djblets.Config.ListView({ItemView:APITokenItemView,animateItems:true,model:this.apiTokensList});this.$el.html(this.template({name:this.localSiteName,generateText:gettext("Generate a new API token")}));this._listView.render().$el.prependTo(this.$(".api-tokens"));return this},_onGenerateClicked:function(){var apiToken=new RB.APIToken({localSitePrefix:this.localSitePrefix,userName:RB.UserSession.instance.get("username")});apiToken.save({success:function(){this.collection.add({resource:apiToken})}},this);return false}});RB.APITokensView=Backbone.View.extend({template:_.template(['<div class="api-tokens-list" />'].join("")),initialize:function(options){this.apiTokens=options.apiTokens;this._$listsContainer=null;this._apiTokenViews=[]},render:function(){this.$el.html(this.template());this._$listsContainer=this.$(".api-tokens-list");_.each(this.apiTokens,function(info,localSiteName){var view=new SiteAPITokensView({localSiteName:localSiteName,localSitePrefix:info.localSitePrefix,apiTokens:info.tokens});view.$el.appendTo(this._$listsContainer);view.render();this._apiTokenViews.push(view)},this);return this}})})();(function(){var GroupMembershipItem,GroupMembershipItemView,SiteGroupsView;GroupMembershipItem=Djblets.Config.ListItem.extend({defaults:_.defaults({localSiteName:null,displayName:null,groupName:null,joined:false,showRemove:false,url:null},Djblets.Config.ListItem.prototype.defaults),initialize:function(){var name=this.get("name"),localSiteName=this.get("localSiteName");Djblets.Config.ListItem.prototype.initialize.call(this);this.set({text:name,editURL:this.get("url")});this.group=new RB.ReviewGroup({id:this.get("reviewGroupID"),name:name,localSitePrefix:localSiteName?"s/"+localSiteName+"/":""});this.on("change:joined",this._updateActions,this);this._updateActions()},joinGroup:function(){this.group.addUser(RB.UserSession.instance.get("username"),{success:function(){this.set("joined",true)}},this)},leaveGroup:function(){this.group.removeUser(RB.UserSession.instance.get("username"),{success:function(){this.set("joined",false)}},this)},_updateActions:function(){if(this.get("joined")){this.actions=[{id:"leave",label:gettext("Leave")}]}else{this.actions=[{id:"join",label:gettext("Join")}]}this.trigger("actionsChanged")}});GroupMembershipItemView=Djblets.Config.ListItemView.extend({actionHandlers:{join:"_onJoinClicked",leave:"_onLeaveClicked"},template:_.template(['<span class="config-group-name">',' <a href="<%- editURL %>"><%- text %></a>',"</span>",'<span class="config-group-display-name"><%- displayName %></span>'].join("")),_onJoinClicked:function(){this.model.joinGroup()},_onLeaveClicked:function(){this.model.leaveGroup()}});SiteGroupsView=Backbone.View.extend({template:_.template(["<% if (name) { %>"," <h3><%- name %></h3>","<% } %>",'<div class="groups" />'].join("")),initialize:function(options){this.name=options.name;this.collection=new RB.FilteredCollection(null,{collection:new Backbone.Collection(options.groups,{model:GroupMembershipItem})});this.groupList=new Djblets.Config.List({},{collection:this.collection})},render:function(){this._listView=new Djblets.Config.ListView({ItemView:GroupMembershipItemView,model:this.groupList});this.$el.html(this.template({name:this.name}));this._listView.render();this._listView.$el.addClass("box-recessed").appendTo(this.$(".groups"));return this},filterBy:function(name){this.collection.setFilters({name:name});this.$el.setVisible(this.collection.length>0)}});RB.JoinedGroupsView=Backbone.View.extend({template:_.template(['<div class="search">',' <span class="rb-icon rb-icon-search-dark"></span>',' <input type="text" />',"</div>",'<div class="group-lists" />'].join("")),events:{submit:"_onSubmit","keyup .search input":"_onGroupSearchChanged","change .search input":"_onGroupSearchChanged"},initialize:function(options){this.groups=options.groups;this._$listsContainer=null;this._$search=null;this._searchText=null;this._groupViews=[]},render:function(){this.$el.html(this.template());this._$listsContainer=this.$(".group-lists");this._$search=this.$(".search input");_.each(this.groups,function(groups,localSiteName){var view;if(groups.length>0){view=new SiteGroupsView({name:localSiteName,groups:groups});view.$el.appendTo(this._$listsContainer);view.render();this._groupViews.push(view)}},this);return this},_onGroupSearchChanged:function(){var text=this._$search.val();if(text!==this._searchText){this._searchText=text;_.each(this._groupViews,function(groupView){groupView.filterBy(this._searchText)},this)}},_onSubmit:function(e){e.preventDefault()}})})()}).call(this);