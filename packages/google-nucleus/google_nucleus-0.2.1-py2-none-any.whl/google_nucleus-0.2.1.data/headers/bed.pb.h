// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nucleus/protos/bed.proto

#ifndef PROTOBUF_INCLUDED_nucleus_2fprotos_2fbed_2eproto
#define PROTOBUF_INCLUDED_nucleus_2fprotos_2fbed_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nucleus_2fprotos_2fbed_2eproto 

namespace protobuf_nucleus_2fprotos_2fbed_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nucleus_2fprotos_2fbed_2eproto
namespace nucleus {
namespace genomics {
namespace v1 {
class BedHeader;
class BedHeaderDefaultTypeInternal;
extern BedHeaderDefaultTypeInternal _BedHeader_default_instance_;
class BedReaderOptions;
class BedReaderOptionsDefaultTypeInternal;
extern BedReaderOptionsDefaultTypeInternal _BedReaderOptions_default_instance_;
class BedRecord;
class BedRecordDefaultTypeInternal;
extern BedRecordDefaultTypeInternal _BedRecord_default_instance_;
class BedWriterOptions;
class BedWriterOptionsDefaultTypeInternal;
extern BedWriterOptionsDefaultTypeInternal _BedWriterOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
namespace google {
namespace protobuf {
template<> ::nucleus::genomics::v1::BedHeader* Arena::CreateMaybeMessage<::nucleus::genomics::v1::BedHeader>(Arena*);
template<> ::nucleus::genomics::v1::BedReaderOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::BedReaderOptions>(Arena*);
template<> ::nucleus::genomics::v1::BedRecord* Arena::CreateMaybeMessage<::nucleus::genomics::v1::BedRecord>(Arena*);
template<> ::nucleus::genomics::v1::BedWriterOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::BedWriterOptions>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nucleus {
namespace genomics {
namespace v1 {

enum BedRecord_Strand {
  BedRecord_Strand_NO_STRAND = 0,
  BedRecord_Strand_FORWARD_STRAND = 1,
  BedRecord_Strand_REVERSE_STRAND = 2,
  BedRecord_Strand_BedRecord_Strand_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BedRecord_Strand_BedRecord_Strand_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BedRecord_Strand_IsValid(int value);
const BedRecord_Strand BedRecord_Strand_Strand_MIN = BedRecord_Strand_NO_STRAND;
const BedRecord_Strand BedRecord_Strand_Strand_MAX = BedRecord_Strand_REVERSE_STRAND;
const int BedRecord_Strand_Strand_ARRAYSIZE = BedRecord_Strand_Strand_MAX + 1;

const ::google::protobuf::EnumDescriptor* BedRecord_Strand_descriptor();
inline const ::std::string& BedRecord_Strand_Name(BedRecord_Strand value) {
  return ::google::protobuf::internal::NameOfEnum(
    BedRecord_Strand_descriptor(), value);
}
inline bool BedRecord_Strand_Parse(
    const ::std::string& name, BedRecord_Strand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BedRecord_Strand>(
    BedRecord_Strand_descriptor(), name, value);
}
// ===================================================================

class BedRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.BedRecord) */ {
 public:
  BedRecord();
  virtual ~BedRecord();

  BedRecord(const BedRecord& from);

  inline BedRecord& operator=(const BedRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BedRecord(BedRecord&& from) noexcept
    : BedRecord() {
    *this = ::std::move(from);
  }

  inline BedRecord& operator=(BedRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BedRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedRecord* internal_default_instance() {
    return reinterpret_cast<const BedRecord*>(
               &_BedRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BedRecord* other);
  friend void swap(BedRecord& a, BedRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BedRecord* New() const final {
    return CreateMaybeMessage<BedRecord>(NULL);
  }

  BedRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BedRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BedRecord& from);
  void MergeFrom(const BedRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BedRecord_Strand Strand;
  static const Strand NO_STRAND =
    BedRecord_Strand_NO_STRAND;
  static const Strand FORWARD_STRAND =
    BedRecord_Strand_FORWARD_STRAND;
  static const Strand REVERSE_STRAND =
    BedRecord_Strand_REVERSE_STRAND;
  static inline bool Strand_IsValid(int value) {
    return BedRecord_Strand_IsValid(value);
  }
  static const Strand Strand_MIN =
    BedRecord_Strand_Strand_MIN;
  static const Strand Strand_MAX =
    BedRecord_Strand_Strand_MAX;
  static const int Strand_ARRAYSIZE =
    BedRecord_Strand_Strand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Strand_descriptor() {
    return BedRecord_Strand_descriptor();
  }
  static inline const ::std::string& Strand_Name(Strand value) {
    return BedRecord_Strand_Name(value);
  }
  static inline bool Strand_Parse(const ::std::string& name,
      Strand* value) {
    return BedRecord_Strand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string reference_name = 1;
  void clear_reference_name();
  static const int kReferenceNameFieldNumber = 1;
  const ::std::string& reference_name() const;
  void set_reference_name(const ::std::string& value);
  #if LANG_CXX11
  void set_reference_name(::std::string&& value);
  #endif
  void set_reference_name(const char* value);
  void set_reference_name(const char* value, size_t size);
  ::std::string* mutable_reference_name();
  ::std::string* release_reference_name();
  void set_allocated_reference_name(::std::string* reference_name);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string item_rgb = 9;
  void clear_item_rgb();
  static const int kItemRgbFieldNumber = 9;
  const ::std::string& item_rgb() const;
  void set_item_rgb(const ::std::string& value);
  #if LANG_CXX11
  void set_item_rgb(::std::string&& value);
  #endif
  void set_item_rgb(const char* value);
  void set_item_rgb(const char* value, size_t size);
  ::std::string* mutable_item_rgb();
  ::std::string* release_item_rgb();
  void set_allocated_item_rgb(::std::string* item_rgb);

  // string block_sizes = 11;
  void clear_block_sizes();
  static const int kBlockSizesFieldNumber = 11;
  const ::std::string& block_sizes() const;
  void set_block_sizes(const ::std::string& value);
  #if LANG_CXX11
  void set_block_sizes(::std::string&& value);
  #endif
  void set_block_sizes(const char* value);
  void set_block_sizes(const char* value, size_t size);
  ::std::string* mutable_block_sizes();
  ::std::string* release_block_sizes();
  void set_allocated_block_sizes(::std::string* block_sizes);

  // string block_starts = 12;
  void clear_block_starts();
  static const int kBlockStartsFieldNumber = 12;
  const ::std::string& block_starts() const;
  void set_block_starts(const ::std::string& value);
  #if LANG_CXX11
  void set_block_starts(::std::string&& value);
  #endif
  void set_block_starts(const char* value);
  void set_block_starts(const char* value, size_t size);
  ::std::string* mutable_block_starts();
  ::std::string* release_block_starts();
  void set_allocated_block_starts(::std::string* block_starts);

  // int64 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // double score = 5;
  void clear_score();
  static const int kScoreFieldNumber = 5;
  double score() const;
  void set_score(double value);

  // int64 thick_start = 7;
  void clear_thick_start();
  static const int kThickStartFieldNumber = 7;
  ::google::protobuf::int64 thick_start() const;
  void set_thick_start(::google::protobuf::int64 value);

  // int64 thick_end = 8;
  void clear_thick_end();
  static const int kThickEndFieldNumber = 8;
  ::google::protobuf::int64 thick_end() const;
  void set_thick_end(::google::protobuf::int64 value);

  // .nucleus.genomics.v1.BedRecord.Strand strand = 6;
  void clear_strand();
  static const int kStrandFieldNumber = 6;
  ::nucleus::genomics::v1::BedRecord_Strand strand() const;
  void set_strand(::nucleus::genomics::v1::BedRecord_Strand value);

  // int32 block_count = 10;
  void clear_block_count();
  static const int kBlockCountFieldNumber = 10;
  ::google::protobuf::int32 block_count() const;
  void set_block_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.BedRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reference_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr item_rgb_;
  ::google::protobuf::internal::ArenaStringPtr block_sizes_;
  ::google::protobuf::internal::ArenaStringPtr block_starts_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  double score_;
  ::google::protobuf::int64 thick_start_;
  ::google::protobuf::int64 thick_end_;
  int strand_;
  ::google::protobuf::int32 block_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nucleus_2fprotos_2fbed_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BedHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.BedHeader) */ {
 public:
  BedHeader();
  virtual ~BedHeader();

  BedHeader(const BedHeader& from);

  inline BedHeader& operator=(const BedHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BedHeader(BedHeader&& from) noexcept
    : BedHeader() {
    *this = ::std::move(from);
  }

  inline BedHeader& operator=(BedHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BedHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedHeader* internal_default_instance() {
    return reinterpret_cast<const BedHeader*>(
               &_BedHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BedHeader* other);
  friend void swap(BedHeader& a, BedHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BedHeader* New() const final {
    return CreateMaybeMessage<BedHeader>(NULL);
  }

  BedHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BedHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BedHeader& from);
  void MergeFrom(const BedHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 num_fields = 1;
  void clear_num_fields();
  static const int kNumFieldsFieldNumber = 1;
  ::google::protobuf::int32 num_fields() const;
  void set_num_fields(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.BedHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 num_fields_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nucleus_2fprotos_2fbed_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BedReaderOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.BedReaderOptions) */ {
 public:
  BedReaderOptions();
  virtual ~BedReaderOptions();

  BedReaderOptions(const BedReaderOptions& from);

  inline BedReaderOptions& operator=(const BedReaderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BedReaderOptions(BedReaderOptions&& from) noexcept
    : BedReaderOptions() {
    *this = ::std::move(from);
  }

  inline BedReaderOptions& operator=(BedReaderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BedReaderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedReaderOptions* internal_default_instance() {
    return reinterpret_cast<const BedReaderOptions*>(
               &_BedReaderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(BedReaderOptions* other);
  friend void swap(BedReaderOptions& a, BedReaderOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BedReaderOptions* New() const final {
    return CreateMaybeMessage<BedReaderOptions>(NULL);
  }

  BedReaderOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BedReaderOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BedReaderOptions& from);
  void MergeFrom(const BedReaderOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedReaderOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 num_fields = 2;
  void clear_num_fields();
  static const int kNumFieldsFieldNumber = 2;
  ::google::protobuf::int32 num_fields() const;
  void set_num_fields(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.BedReaderOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 num_fields_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nucleus_2fprotos_2fbed_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BedWriterOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.BedWriterOptions) */ {
 public:
  BedWriterOptions();
  virtual ~BedWriterOptions();

  BedWriterOptions(const BedWriterOptions& from);

  inline BedWriterOptions& operator=(const BedWriterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BedWriterOptions(BedWriterOptions&& from) noexcept
    : BedWriterOptions() {
    *this = ::std::move(from);
  }

  inline BedWriterOptions& operator=(BedWriterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BedWriterOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedWriterOptions* internal_default_instance() {
    return reinterpret_cast<const BedWriterOptions*>(
               &_BedWriterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BedWriterOptions* other);
  friend void swap(BedWriterOptions& a, BedWriterOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BedWriterOptions* New() const final {
    return CreateMaybeMessage<BedWriterOptions>(NULL);
  }

  BedWriterOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BedWriterOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BedWriterOptions& from);
  void MergeFrom(const BedWriterOptions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedWriterOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.BedWriterOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nucleus_2fprotos_2fbed_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BedRecord

// string reference_name = 1;
inline void BedRecord::clear_reference_name() {
  reference_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BedRecord::reference_name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.reference_name)
  return reference_name_.GetNoArena();
}
inline void BedRecord::set_reference_name(const ::std::string& value) {
  
  reference_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.reference_name)
}
#if LANG_CXX11
inline void BedRecord::set_reference_name(::std::string&& value) {
  
  reference_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.BedRecord.reference_name)
}
#endif
inline void BedRecord::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.BedRecord.reference_name)
}
inline void BedRecord::set_reference_name(const char* value, size_t size) {
  
  reference_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.BedRecord.reference_name)
}
inline ::std::string* BedRecord::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.BedRecord.reference_name)
  return reference_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BedRecord::release_reference_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.BedRecord.reference_name)
  
  return reference_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BedRecord::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.BedRecord.reference_name)
}

// int64 start = 2;
inline void BedRecord::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BedRecord::start() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.start)
  return start_;
}
inline void BedRecord::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.start)
}

// int64 end = 3;
inline void BedRecord::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BedRecord::end() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.end)
  return end_;
}
inline void BedRecord::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.end)
}

// string name = 4;
inline void BedRecord::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BedRecord::name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.name)
  return name_.GetNoArena();
}
inline void BedRecord::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.name)
}
#if LANG_CXX11
inline void BedRecord::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.BedRecord.name)
}
#endif
inline void BedRecord::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.BedRecord.name)
}
inline void BedRecord::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.BedRecord.name)
}
inline ::std::string* BedRecord::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.BedRecord.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BedRecord::release_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.BedRecord.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BedRecord::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.BedRecord.name)
}

// double score = 5;
inline void BedRecord::clear_score() {
  score_ = 0;
}
inline double BedRecord::score() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.score)
  return score_;
}
inline void BedRecord::set_score(double value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.score)
}

// .nucleus.genomics.v1.BedRecord.Strand strand = 6;
inline void BedRecord::clear_strand() {
  strand_ = 0;
}
inline ::nucleus::genomics::v1::BedRecord_Strand BedRecord::strand() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.strand)
  return static_cast< ::nucleus::genomics::v1::BedRecord_Strand >(strand_);
}
inline void BedRecord::set_strand(::nucleus::genomics::v1::BedRecord_Strand value) {
  
  strand_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.strand)
}

// int64 thick_start = 7;
inline void BedRecord::clear_thick_start() {
  thick_start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BedRecord::thick_start() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.thick_start)
  return thick_start_;
}
inline void BedRecord::set_thick_start(::google::protobuf::int64 value) {
  
  thick_start_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.thick_start)
}

// int64 thick_end = 8;
inline void BedRecord::clear_thick_end() {
  thick_end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BedRecord::thick_end() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.thick_end)
  return thick_end_;
}
inline void BedRecord::set_thick_end(::google::protobuf::int64 value) {
  
  thick_end_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.thick_end)
}

// string item_rgb = 9;
inline void BedRecord::clear_item_rgb() {
  item_rgb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BedRecord::item_rgb() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.item_rgb)
  return item_rgb_.GetNoArena();
}
inline void BedRecord::set_item_rgb(const ::std::string& value) {
  
  item_rgb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.item_rgb)
}
#if LANG_CXX11
inline void BedRecord::set_item_rgb(::std::string&& value) {
  
  item_rgb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.BedRecord.item_rgb)
}
#endif
inline void BedRecord::set_item_rgb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  item_rgb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.BedRecord.item_rgb)
}
inline void BedRecord::set_item_rgb(const char* value, size_t size) {
  
  item_rgb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.BedRecord.item_rgb)
}
inline ::std::string* BedRecord::mutable_item_rgb() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.BedRecord.item_rgb)
  return item_rgb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BedRecord::release_item_rgb() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.BedRecord.item_rgb)
  
  return item_rgb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BedRecord::set_allocated_item_rgb(::std::string* item_rgb) {
  if (item_rgb != NULL) {
    
  } else {
    
  }
  item_rgb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_rgb);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.BedRecord.item_rgb)
}

// int32 block_count = 10;
inline void BedRecord::clear_block_count() {
  block_count_ = 0;
}
inline ::google::protobuf::int32 BedRecord::block_count() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.block_count)
  return block_count_;
}
inline void BedRecord::set_block_count(::google::protobuf::int32 value) {
  
  block_count_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.block_count)
}

// string block_sizes = 11;
inline void BedRecord::clear_block_sizes() {
  block_sizes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BedRecord::block_sizes() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.block_sizes)
  return block_sizes_.GetNoArena();
}
inline void BedRecord::set_block_sizes(const ::std::string& value) {
  
  block_sizes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.block_sizes)
}
#if LANG_CXX11
inline void BedRecord::set_block_sizes(::std::string&& value) {
  
  block_sizes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.BedRecord.block_sizes)
}
#endif
inline void BedRecord::set_block_sizes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_sizes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.BedRecord.block_sizes)
}
inline void BedRecord::set_block_sizes(const char* value, size_t size) {
  
  block_sizes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.BedRecord.block_sizes)
}
inline ::std::string* BedRecord::mutable_block_sizes() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.BedRecord.block_sizes)
  return block_sizes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BedRecord::release_block_sizes() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.BedRecord.block_sizes)
  
  return block_sizes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BedRecord::set_allocated_block_sizes(::std::string* block_sizes) {
  if (block_sizes != NULL) {
    
  } else {
    
  }
  block_sizes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_sizes);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.BedRecord.block_sizes)
}

// string block_starts = 12;
inline void BedRecord::clear_block_starts() {
  block_starts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BedRecord::block_starts() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedRecord.block_starts)
  return block_starts_.GetNoArena();
}
inline void BedRecord::set_block_starts(const ::std::string& value) {
  
  block_starts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedRecord.block_starts)
}
#if LANG_CXX11
inline void BedRecord::set_block_starts(::std::string&& value) {
  
  block_starts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.BedRecord.block_starts)
}
#endif
inline void BedRecord::set_block_starts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_starts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.BedRecord.block_starts)
}
inline void BedRecord::set_block_starts(const char* value, size_t size) {
  
  block_starts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.BedRecord.block_starts)
}
inline ::std::string* BedRecord::mutable_block_starts() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.BedRecord.block_starts)
  return block_starts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BedRecord::release_block_starts() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.BedRecord.block_starts)
  
  return block_starts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BedRecord::set_allocated_block_starts(::std::string* block_starts) {
  if (block_starts != NULL) {
    
  } else {
    
  }
  block_starts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_starts);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.BedRecord.block_starts)
}

// -------------------------------------------------------------------

// BedHeader

// int32 num_fields = 1;
inline void BedHeader::clear_num_fields() {
  num_fields_ = 0;
}
inline ::google::protobuf::int32 BedHeader::num_fields() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedHeader.num_fields)
  return num_fields_;
}
inline void BedHeader::set_num_fields(::google::protobuf::int32 value) {
  
  num_fields_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedHeader.num_fields)
}

// -------------------------------------------------------------------

// BedReaderOptions

// int32 num_fields = 2;
inline void BedReaderOptions::clear_num_fields() {
  num_fields_ = 0;
}
inline ::google::protobuf::int32 BedReaderOptions::num_fields() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedReaderOptions.num_fields)
  return num_fields_;
}
inline void BedReaderOptions::set_num_fields(::google::protobuf::int32 value) {
  
  num_fields_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedReaderOptions.num_fields)
}

// -------------------------------------------------------------------

// BedWriterOptions

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nucleus::genomics::v1::BedRecord_Strand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nucleus::genomics::v1::BedRecord_Strand>() {
  return ::nucleus::genomics::v1::BedRecord_Strand_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nucleus_2fprotos_2fbed_2eproto
