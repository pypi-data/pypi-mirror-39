// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nucleus/protos/bedgraph.proto

#ifndef PROTOBUF_INCLUDED_nucleus_2fprotos_2fbedgraph_2eproto
#define PROTOBUF_INCLUDED_nucleus_2fprotos_2fbedgraph_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_nucleus_2fprotos_2fbedgraph_2eproto 

namespace protobuf_nucleus_2fprotos_2fbedgraph_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_nucleus_2fprotos_2fbedgraph_2eproto
namespace nucleus {
namespace genomics {
namespace v1 {
class BedGraphRecord;
class BedGraphRecordDefaultTypeInternal;
extern BedGraphRecordDefaultTypeInternal _BedGraphRecord_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
namespace google {
namespace protobuf {
template<> ::nucleus::genomics::v1::BedGraphRecord* Arena::CreateMaybeMessage<::nucleus::genomics::v1::BedGraphRecord>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace nucleus {
namespace genomics {
namespace v1 {

// ===================================================================

class BedGraphRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.BedGraphRecord) */ {
 public:
  BedGraphRecord();
  virtual ~BedGraphRecord();

  BedGraphRecord(const BedGraphRecord& from);

  inline BedGraphRecord& operator=(const BedGraphRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BedGraphRecord(BedGraphRecord&& from) noexcept
    : BedGraphRecord() {
    *this = ::std::move(from);
  }

  inline BedGraphRecord& operator=(BedGraphRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BedGraphRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedGraphRecord* internal_default_instance() {
    return reinterpret_cast<const BedGraphRecord*>(
               &_BedGraphRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BedGraphRecord* other);
  friend void swap(BedGraphRecord& a, BedGraphRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BedGraphRecord* New() const final {
    return CreateMaybeMessage<BedGraphRecord>(NULL);
  }

  BedGraphRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BedGraphRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BedGraphRecord& from);
  void MergeFrom(const BedGraphRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedGraphRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reference_name = 1;
  void clear_reference_name();
  static const int kReferenceNameFieldNumber = 1;
  const ::std::string& reference_name() const;
  void set_reference_name(const ::std::string& value);
  #if LANG_CXX11
  void set_reference_name(::std::string&& value);
  #endif
  void set_reference_name(const char* value);
  void set_reference_name(const char* value, size_t size);
  ::std::string* mutable_reference_name();
  ::std::string* release_reference_name();
  void set_allocated_reference_name(::std::string* reference_name);

  // int64 start = 2;
  void clear_start();
  static const int kStartFieldNumber = 2;
  ::google::protobuf::int64 start() const;
  void set_start(::google::protobuf::int64 value);

  // int64 end = 3;
  void clear_end();
  static const int kEndFieldNumber = 3;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // double data_value = 4;
  void clear_data_value();
  static const int kDataValueFieldNumber = 4;
  double data_value() const;
  void set_data_value(double value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.BedGraphRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reference_name_;
  ::google::protobuf::int64 start_;
  ::google::protobuf::int64 end_;
  double data_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_nucleus_2fprotos_2fbedgraph_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BedGraphRecord

// string reference_name = 1;
inline void BedGraphRecord::clear_reference_name() {
  reference_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BedGraphRecord::reference_name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedGraphRecord.reference_name)
  return reference_name_.GetNoArena();
}
inline void BedGraphRecord::set_reference_name(const ::std::string& value) {
  
  reference_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedGraphRecord.reference_name)
}
#if LANG_CXX11
inline void BedGraphRecord::set_reference_name(::std::string&& value) {
  
  reference_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.BedGraphRecord.reference_name)
}
#endif
inline void BedGraphRecord::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reference_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.BedGraphRecord.reference_name)
}
inline void BedGraphRecord::set_reference_name(const char* value, size_t size) {
  
  reference_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.BedGraphRecord.reference_name)
}
inline ::std::string* BedGraphRecord::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.BedGraphRecord.reference_name)
  return reference_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BedGraphRecord::release_reference_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.BedGraphRecord.reference_name)
  
  return reference_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BedGraphRecord::set_allocated_reference_name(::std::string* reference_name) {
  if (reference_name != NULL) {
    
  } else {
    
  }
  reference_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reference_name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.BedGraphRecord.reference_name)
}

// int64 start = 2;
inline void BedGraphRecord::clear_start() {
  start_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BedGraphRecord::start() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedGraphRecord.start)
  return start_;
}
inline void BedGraphRecord::set_start(::google::protobuf::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedGraphRecord.start)
}

// int64 end = 3;
inline void BedGraphRecord::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BedGraphRecord::end() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedGraphRecord.end)
  return end_;
}
inline void BedGraphRecord::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedGraphRecord.end)
}

// double data_value = 4;
inline void BedGraphRecord::clear_data_value() {
  data_value_ = 0;
}
inline double BedGraphRecord::data_value() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedGraphRecord.data_value)
  return data_value_;
}
inline void BedGraphRecord::set_data_value(double value) {
  
  data_value_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedGraphRecord.data_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_nucleus_2fprotos_2fbedgraph_2eproto
