{"version":3,"sources":["webpack:///./js/components/widgets/popup/controllers/PopupController.js","webpack:///./js/components/widgets/treevisualiser/treevisualiserdat/controllers/TreeVisualiserControllerDAT.js","webpack:///./js/components/widgets/variablevisualiser/controllers/VariableVisualiserController.js","webpack:///./js/components/widgets/connectivity/controllers/ConnectivityController.js","webpack:///./js/components/widgets/stackViewer/controllers/StackViewerController.js"],"names":["define","require","AWidgetController","View","extend","initialize","config","widgets","Array","history","undefined","buttonBarConfig","buttonBarConfiguration","addWidget","isStateless","that","Promise","Popup","id","getAvailableWidgetId","name","p","window","visible","controller","widgetType","GEPPETTO","Widgets","POPUP","stateless","setController","setSize","help","CommandController","getObjectCommands","push","WidgetsListener","subscribe","updateHelpCommand","getFileComments","updateTags","getId","resolve","update","event","WIDGET_EVENT_TYPE","DELETE","removeWidgets","TreeVisualiserDAT","tvdat","width","height","TREEVISUALISERDAT","parameters","treeVisualisersDAT","getWidgets","Events","Select","i","length","treeVisualiserDAT","_","find","registeredEvents","el","selected","SceneController","getSelection","reset","setData","Experiment_update","updateData","step","ModelTree_populated","SimulationTree_populated","ev","callback","refresh","getCommands","node","group1","label","action","getPath","availableWidgets","WidgetFactory","getController","group1Add","position","subgroups1Add","availableWidgetIndex","availableWidget","concat","groups","getMetaType","Resources","COMPOSITE_TYPE_NODE","getWrappedObj","getVisualType","entity","VISUAL_GROUP_NODE","visualGroup","capabilities","indexOf","visualGroupIndex","getVisualGroups","getName","VarVis","vv","VARIABLEVISUALISER","updateVariable","configureConnectivityWidget","Connectivity","prototype","configViaGUI","cnt","CONNECTIVITY","UPDATE","Stack","STACKVIEWER","RESET_DATA"],"mappings":"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","file":"11.bundle.js","sourcesContent":["\n/**\n * Controller class for popup widget. Use to make calls to widget from inside Geppetto.\n *\n * @author Jesus R Martinez (jesus@metacell.us)\n */\ndefine(function (require) {\n\n    var AWidgetController = require('../../AWidgetController');\n\n    /**\n     * @exports Widgets/Popup/PopupsController\n     */\n    return AWidgetController.View.extend({\n\n        initialize: function (config) {\n            this.widgets = Array();\n            this.history = [];\n            if(config!=null || undefined){\n            \tthis.buttonBarConfig = config.buttonBarConfiguration;\n            }\n        },\n\n        /**\n         * Creates popup widget\n         */\n        addWidget: function (isStateless) {\n            if (isStateless == undefined) {\n                isStateless = false;\n            }\n            var that=this;\n\n            return new Promise(resolve => {\n                    require.ensure([], function (require) {\n\n                    var Popup = require('../Popup');\n                    //look for a name and id for the new widget\n                    var id = that.getAvailableWidgetId(\"Popup\", that.widgets);\n                    var name = id;\n\n                    //create popup widget\n                    var p = window[name] = new Popup({\n                        id: id, name: name, visible: true, controller: that,\n                        widgetType: GEPPETTO.Widgets.POPUP, stateless: isStateless\n                    });\n                    p.setController(that);\n                    p.setSize(394, 490);\n                    //create help command for plot\n                    p.help = function () {\n                        return GEPPETTO.CommandController.getObjectCommands(id);\n                    };\n\n                    //store in local stack\n                    that.widgets.push(p);\n\n\n                    GEPPETTO.WidgetsListener.subscribe(that, id);\n\n                    //add commands to console autocomplete and help option\n                    GEPPETTO.CommandController.updateHelpCommand(p, id, that.getFileComments(\"geppetto/js/components/widgets/popup/Popup.js\"));\n\n                    //update tags for autocompletion\n                    GEPPETTO.CommandController.updateTags(p.getId(), p);\n\n                    resolve(p);\n                });\n\n\n        })\n            ;\n        },\n        /**\n         * Receives updates from widget listener class to update popup widget(s)\n         *\n         * @param {WIDGET_EVENT_TYPE} event - Event that tells widgets what to do\n         */\n        update: function (event) {\n            //delete popup widget(s)\n            if (event == GEPPETTO.WidgetsListener.WIDGET_EVENT_TYPE.DELETE) {\n                this.removeWidgets();\n            }\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./js/components/widgets/popup/controllers/PopupController.js","\n/**\n * Controller class for treevisualiser widget. Use to make calls to widget from\n * inside Geppetto.\n *\n * @module Widgets/TreeVisualizerControllerDAT\n *\n * @author Adrian Quintana (adrian.perez@ucl.ac.uk)\n */\ndefine(function (require) {\n    var AWidgetController = require('../../../AWidgetController');\n\n\n    /**\n     * @exports Widgets/Connectivity/TreeVisualiserControllerDATController\n     */\n    return AWidgetController.View.extend({\n\n        initialize: function () {\n            this.widgets = [];\n        },\n\n        /**\n         * Adds a new TreeVisualizerDAT Widget to Geppetto\n         */\n        addWidget: function (isStateless) {\n            if (isStateless == undefined) {\n                // stateless by default\n                isStateless = true;\n            }\n\n            var that=this;\n\n            return new Promise(resolve => {\n                    require.ensure([], function (require) {\n\n\n                    var TreeVisualiserDAT = require('../TreeVisualiserDAT');\n                    //look for a name and id for the new widget\n                    var id = that.getAvailableWidgetId(\"TreeVisualiserDAT\", that.widgets);\n                    var name = id;\n\n                    // create tree visualiser widget\n                    var tvdat = window[name] = new TreeVisualiserDAT({\n                        id: id, name: name, visible: true, width: 260, height: 350,\n                        widgetType: GEPPETTO.Widgets.TREEVISUALISERDAT, stateless: isStateless\n                    });\n                    // create help command for plot\n                    tvdat.help = function () {\n                        return GEPPETTO.CommandController.getObjectCommands(id);\n                    };\n                    // store in local stack\n                    that.widgets.push(tvdat);\n\n                    GEPPETTO.WidgetsListener.subscribe(that, id);\n\n                    // updates helpc command output\n                    GEPPETTO.CommandController.updateHelpCommand(tvdat, id, that.getFileComments(\"geppetto/js/components/widgets/treevisualiser/treevisualiserdat/TreeVisualiserDAT.js\"));\n                    //update tags for autocompletion\n                    GEPPETTO.CommandController.updateTags(tvdat.getId(), tvdat);\n\n                    resolve(tvdat);\n                });\n        });\n        },\n\n        /**\n         * Receives updates from widget listener class to update TreeVisualizerDAT widget(s)\n         *\n         * @param {WIDGET_EVENT_TYPE} event - Event that tells widgets what to do\n         */\n        update: function (event, parameters) {\n            var treeVisualisersDAT = this.getWidgets();\n            // delete treevisualiser widget(s)\n            if (event == GEPPETTO.WidgetsListener.WIDGET_EVENT_TYPE.DELETE) {\n                this.removeWidgets();\n            }\n            else if (event == GEPPETTO.Events.Select) {\n                //loop through all existing widgets\n                for (var i = 0; i < this.widgets.length; i++) {\n                    var treeVisualiserDAT = this.widgets[i];\n\n                    if (_.find(treeVisualiserDAT.registeredEvents, function (el) {\n                            return el.id === event;\n                        })) {\n                        var selected = GEPPETTO.SceneController.getSelection();\n                        treeVisualiserDAT.reset();\n                        //update treevisualiser with new data set\n                        treeVisualiserDAT.setData(selected[0]);\n                    }\n                }\n            }\n            // update treevisualiser widgets\n            else if (event == GEPPETTO.Events.Experiment_update) {\n                // loop through all existing widgets\n                for (var i = 0; i < treeVisualisersDAT.length; i++) {\n                    var treeVisualiserDAT = treeVisualisersDAT[i];\n\n                    // update treevisualiser with new data set\n                    treeVisualiserDAT.updateData(parameters.step);\n                }\n            }\n            // update treevisualiser widgets\n            else if (event == GEPPETTO.Events.ModelTree_populated || event == GEPPETTO.Events.SimulationTree_populated) {\n                // loop through all existing widgets\n                for (var i = 0; i < treeVisualisersDAT.length; i++) {\n                    var treeVisualiserDAT = treeVisualisersDAT[i];\n\n                    var ev = _.find(treeVisualiserDAT.registeredEvents, function (el) {\n                        return el.id === event;\n                    });\n                    if (typeof ev !== 'undefined') {\n                        if (typeof ev.callback === 'undefined') {\n                            //TODO: We need the event data here so we can decide if we would like to refresh or not\n                            treeVisualiserDAT.refresh();\n                        }\n                        else {\n                            ev.callback();\n                        }\n\n                    }\n\n                }\n            }\n        },\n\n        /**\n         * Retrieve commands for a specific variable node\n         *\n         * @param {Node} node - Geppetto Node used for extracting commands\n         * @returns {Array} Set of commands associated with this node\n         */\n        getCommands: function (node) {\n            var group1 = [{\n                label: \"Open with DAT Widget\",\n                action: [\"G.addWidget(Widgets.TREEVISUALISERDAT).setData(\" + node.getPath() + \")\"],\n            }];\n\n\n            var availableWidgets = GEPPETTO.WidgetFactory.getController(GEPPETTO.Widgets.TREEVISUALISERDAT).getWidgets();\n            if (availableWidgets.length > 0) {\n                var group1Add = {\n                    label: \"Add to DAT Widget\",\n                    position: 0\n                };\n\n                var subgroups1Add = [];\n                for (var availableWidgetIndex in availableWidgets) {\n                    var availableWidget = availableWidgets[availableWidgetIndex];\n                    subgroups1Add = subgroups1Add.concat([{\n                        label: \"Add to \" + availableWidget.name,\n                        action: [availableWidget.id + \".setData(\" + node.getPath() + \")\"],\n                        position: availableWidgetIndex\n                    }]);\n                }\n                group1Add[\"groups\"] = [subgroups1Add];\n\n                group1.push(group1Add);\n            }\n\n            var groups = [group1];\n\n           if (node.getMetaType() == GEPPETTO.Resources.COMPOSITE_TYPE_NODE && node.getWrappedObj().getVisualType() != undefined) {\n                var entity = [{\n                    label: \"Select Visual Component\",\n                    action: [\"GEPPETTO.SceneController.deselectAll();\", node.getPath() + \".select()\"],\n                }];\n\n                groups.push(entity);\n            }\n           \n           if (node.getMetaType() == GEPPETTO.Resources.VISUAL_GROUP_NODE){\n        \t   var visualGroup = [{\n                   label: \"Show Visual Groups\",\n                   action: [\"GEPPETTO.SceneController.deselectAll();\", node.getPath() + \".show(true)\"]\n               }];\n        \t   \n        \t   groups.push(visualGroup);\n           }\n           \n           if (node.getWrappedObj().capabilities != null && node.getWrappedObj().capabilities.length > 0 && node.getWrappedObj().capabilities.indexOf('VisualGroupCapability') != -1){\n        \t   var visualGroup = [{\n                   label: \"Show Visual Groups\"\n               }];\n\n        \t   var subgroups1Add = [];\n               for (var visualGroupIndex in node.getWrappedObj().getVisualGroups()) {\n                   subgroups1Add = subgroups1Add.concat([{\n                       label: \"Show \" + node.getWrappedObj().getVisualGroups()[visualGroupIndex].getName(),\n                       action: [\"GEPPETTO.SceneController.deselectAll();\", node.getPath() + \".applyVisualGroup(\" + node.getPath() + \".getVisualGroups()[\" + visualGroupIndex + \"], true)\"],\n                       position: visualGroupIndex\n                   }]);\n               }\n               visualGroup[0][\"groups\"] = [subgroups1Add];\n\n               groups.push(visualGroup);\n           }\n\n            return groups;\n        },\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./js/components/widgets/treevisualiser/treevisualiserdat/controllers/TreeVisualiserControllerDAT.js","/**\n * Controller class for variables visualiser widget.\n *\n * @author Dan Kruchinin (dkruchinin@acm.org)\n */\ndefine(function (require) {\n\n    var AWidgetController = require('../../AWidgetController');\n\n    /**\n     * @exports Widgets/VariableVisualiser/VariableVisualiserController\n     */\n    return AWidgetController.View.extend({\n\n        initialize: function () {\n            this.widgets = [];\n        },\n\n        /**\n         * Creates new variable visualiser widget\n         */\n        addWidget: function (isStateless) {\n            if(isStateless == undefined){\n                isStateless = false;\n            }\n\n            var that = this;\n\n            return new Promise(resolve => {\n                require.ensure([], function(require) {\n                    var VarVis = require('../VariableVisualiser');\n\n                    //look for a name and id for the new widget\n                    var id = that.getAvailableWidgetId(\"VarVis\", that.widgets);\n                    var name = id;\n                    var vv = window[name] = new VarVis({\n                        id: id, name: name, visible: true,\n                        widgetType: GEPPETTO.Widgets.VARIABLEVISUALISER, stateless: isStateless\n                    });\n\n                    vv.help = function () {\n                        return GEPPETTO.CommandController.getObjectCommands(id);\n                    };\n\n                    // store in local stack\n                    that.widgets.push(vv);\n\n                    GEPPETTO.WidgetsListener.subscribe(that, id);\n\n                    //updates help command options\n                    GEPPETTO.CommandController.updateHelpCommand(vv, id, that.getFileComments(\"geppetto/js/components/widgets/variablevisualiser/VariableVisualiser.js\"));\n                    //update tags for autocompletion\n                    GEPPETTO.CommandController.updateTags(vv.getId(), vv);\n                    resolve(vv);\n                });\n            });\n        },\n\n        /**\n         * Receives updates from widget listener class to update variable visualiser widget(s)\n         *\n         * @param {WIDGET_EVENT_TYPE} event - Event that tells widgets what to do\n         */\n        update: function (event, parameters) {\n            //delete a widget(s)\n            if (event == GEPPETTO.WidgetsListener.WIDGET_EVENT_TYPE.DELETE) {\n                this.removeWidgets();\n            }\n            //update widgets\n            else if (event == GEPPETTO.Events.Experiment_update) {\n                var step = parameters.step;\n                for (var i = 0; i < this.widgets.length; i++) {\n                    this.widgets[i].updateVariable(step);\n                }\n            }\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./js/components/widgets/variablevisualiser/controllers/VariableVisualiserController.js","/**\n * Controller class for connectivity widget. Use to make calls to widget from inside Geppetto.\n *\n * @constructor\n *\n * @module Widgets/Connectivity\n * @author Adrian Quintana (adrian.perez@ucl.ac.uk)\n * @author Boris Marin\n */\ndefine(function (require) {\n    var AWidgetController = require('../../AWidgetController');\n\n\n    /**\n     * @exports Widgets/Connectivity/ConnectivityController\n     */\n    return AWidgetController.View.extend({\n\n        initialize: function () {\n            this.widgets = Array();\n            this.history = [];\n        },\n\n\n        configureConnectivityWidget: function () {\n            Connectivity.prototype.configViaGUI();\n        },\n\n        /**\n         * Adds a new Connectivity Widget to Geppetto\n         */\n        addWidget: function (isStateless) {\n            if (isStateless == undefined) {\n                isStateless = false;\n            }\n            var that=this;\n\n            return new Promise(resolve => {\n                    require.ensure([], function (require) {\n                    var Connectivity = require('../Connectivity');\n                    //look for a name and id for the new widget\n                    var id = that.getAvailableWidgetId(\"Connectivity\", that.widgets);\n                    var name = id;\n\n                    //create tree visualiser widget\n                    var cnt = window[name] = new Connectivity({\n                        id: id, name: name, visible: false, width: 500, height: 500, controller: that,\n                        widgetType: GEPPETTO.Widgets.CONNECTIVITY, stateless: isStateless\n                    });\n\n                    //create help command for connw\n                    cnt.help = function () {\n                        return GEPPETTO.CommandController.getObjectCommands(id);\n                    };\n\n                    //store in local stack\n                    that.widgets.push(cnt);\n\n                    GEPPETTO.WidgetsListener.subscribe(that, id);\n\n                    //add commands help option\n                    GEPPETTO.CommandController.updateHelpCommand(cnt, id, that.getFileComments(\"geppetto/js/components/widgets/connectivity/Connectivity.js\"));\n\n                    //update tags for autocompletion\n                    GEPPETTO.CommandController.updateTags(cnt.getId(), cnt);\n\n                    resolve(cnt);\n                });\n\n        });\n        },\n\n        /**\n         * Receives updates from widget listener class to update TreeVisualizer3D widget(s)\n         *\n         * @param {WIDGET_EVENT_TYPE} event - Event that tells widgets what to do\n         */\n        update: function (event) {\n            //delete connectivity widget(s)\n            if (event == GEPPETTO.WidgetsListener.WIDGET_EVENT_TYPE.DELETE) {\n                this.removeWidgets();\n            }\n            //update connectivity widgets\n            else if (event == GEPPETTO.WidgetsListener.WIDGET_EVENT_TYPE.UPDATE) {\n                //loop through all existing widgets\n                for (var i = 0; i < this.widgets.length; i++) {\n                    var cnt = this.widgets[i];\n                    //update connectivity with new data set\n                    cnt.updateData();\n                }\n            }\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./js/components/widgets/connectivity/controllers/ConnectivityController.js","/**\n * Controller class for the stackViewer widget.\n *\n * @author Robbie1977\n */\ndefine(function (require) {\n\n    var AWidgetController = require('../../AWidgetController');\n\n\n    /**\n     * @exports Widgets/stackViewer/stackViewerController\n     */\n    return AWidgetController.View.extend({\n\n        initialize: function () {\n            this.widgets = Array();\n            this.history = [];\n        },\n\n        /**\n         * Creates new stack viewer widget\n         */\n        addWidget: function (isStateless) {\n            if (isStateless == undefined) {\n                // stateless by default\n                isStateless = true;\n            }\n\n            var that=this;\n\n            return new Promise(resolve => {\n                    require.ensure([], function (require) {\n                    var Stack = require('../StackViewer');\n                    //look for a name and id for the new widget\n                    var id = that.getAvailableWidgetId(\"StackViewer\", that.widgets);\n                    var name = id;\n                    var vv = window[name] = new Stack({\n                        id: id, name: name, visible: true,\n                        widgetType: GEPPETTO.Widgets.STACKVIEWER, stateless: isStateless\n                    });\n                    vv.help = function () {\n                        return GEPPETTO.CommandController.getObjectCommands(id);\n                    };\n                    that.widgets.push(vv);\n\n                    GEPPETTO.WidgetsListener.subscribe(that, id);\n\n                    //updates help command options\n                    GEPPETTO.CommandController.updateHelpCommand(vv, id, that.getFileComments(\"geppetto/js/components/widgets/stackViewer/StackViewer.js\"));\n\n                    //update tags for autocompletion\n                    GEPPETTO.CommandController.updateTags(vv.getId(), vv);\n                    resolve(vv);\n                });\n\n\n        })\n            ;\n        },\n\n        /**\n         * Receives updates from widget listener class to update Button Bar widget(s)\n         *\n         * @param {WIDGET_EVENT_TYPE} event - Event that tells widgets what to do\n         */\n        update: function (event) {\n            //delete a widget(s)\n            if (event == GEPPETTO.WidgetsListener.WIDGET_EVENT_TYPE.DELETE) {\n                this.removeWidgets();\n            }\n\n            //reset widget's datasets\n            else if (event == GEPPETTO.WidgetsListener.WIDGET_EVENT_TYPE.RESET_DATA) {\n                //pass\n            }\n\n            //update widgets\n            else if (event == GEPPETTO.WidgetsListener.WIDGET_EVENT_TYPE.UPDATE) {\n                //pass\n            }\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./js/components/widgets/stackViewer/controllers/StackViewerController.js"],"sourceRoot":""}