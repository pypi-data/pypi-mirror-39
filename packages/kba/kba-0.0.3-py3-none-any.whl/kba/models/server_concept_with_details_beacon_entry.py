# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself.   # noqa: E501

    OpenAPI spec version: 1.1.3
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kba.models.server_concept_detail import ServerConceptDetail  # noqa: F401,E501


class ServerConceptWithDetailsBeaconEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beacon': 'int',
        'id': 'str',
        'synonyms': 'list[str]',
        'definition': 'str',
        'details': 'list[ServerConceptDetail]'
    }

    attribute_map = {
        'beacon': 'beacon',
        'id': 'id',
        'synonyms': 'synonyms',
        'definition': 'definition',
        'details': 'details'
    }

    def __init__(self, beacon=None, id=None, synonyms=None, definition=None, details=None):  # noqa: E501
        """ServerConceptWithDetailsBeaconEntry - a model defined in Swagger"""  # noqa: E501

        self._beacon = None
        self._id = None
        self._synonyms = None
        self._definition = None
        self._details = None
        self.discriminator = None

        if beacon is not None:
            self.beacon = beacon
        if id is not None:
            self.id = id
        if synonyms is not None:
            self.synonyms = synonyms
        if definition is not None:
            self.definition = definition
        if details is not None:
            self.details = details

    @property
    def beacon(self):
        """Gets the beacon of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501

        Index number of beacon providing these concept details   # noqa: E501

        :return: The beacon of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :rtype: int
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """Sets the beacon of this ServerConceptWithDetailsBeaconEntry.

        Index number of beacon providing these concept details   # noqa: E501

        :param beacon: The beacon of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :type: int
        """

        self._beacon = beacon

    @property
    def id(self):
        """Gets the id of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501

        CURIE identifying the specific beacon source concept being described.   # noqa: E501

        :return: The id of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerConceptWithDetailsBeaconEntry.

        CURIE identifying the specific beacon source concept being described.   # noqa: E501

        :param id: The id of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def synonyms(self):
        """Gets the synonyms of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501

        List of synonymous names or identifiers for the concept   # noqa: E501

        :return: The synonyms of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this ServerConceptWithDetailsBeaconEntry.

        List of synonymous names or identifiers for the concept   # noqa: E501

        :param synonyms: The synonyms of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :type: list[str]
        """

        self._synonyms = synonyms

    @property
    def definition(self):
        """Gets the definition of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501

        Concept definition provided by a given beacon   # noqa: E501

        :return: The definition of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this ServerConceptWithDetailsBeaconEntry.

        Concept definition provided by a given beacon   # noqa: E501

        :param definition: The definition of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :type: str
        """

        self._definition = definition

    @property
    def details(self):
        """Gets the details of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501


        :return: The details of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :rtype: list[ServerConceptDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ServerConceptWithDetailsBeaconEntry.


        :param details: The details of this ServerConceptWithDetailsBeaconEntry.  # noqa: E501
        :type: list[ServerConceptDetail]
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerConceptWithDetailsBeaconEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
