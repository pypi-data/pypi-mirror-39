# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself.   # noqa: E501

    OpenAPI spec version: 1.1.3
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kba.models.server_concept_categories_by_beacon import ServerConceptCategoriesByBeacon  # noqa: F401,E501


class ServerConceptCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uri': 'str',
        'category': 'str',
        'description': 'str',
        'beacons': 'list[ServerConceptCategoriesByBeacon]'
    }

    attribute_map = {
        'id': 'id',
        'uri': 'uri',
        'category': 'category',
        'description': 'description',
        'beacons': 'beacons'
    }

    def __init__(self, id=None, uri=None, category=None, description=None, beacons=None):  # noqa: E501
        """ServerConceptCategory - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._uri = None
        self._category = None
        self._description = None
        self._beacons = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uri is not None:
            self.uri = uri
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if beacons is not None:
            self.beacons = beacons

    @property
    def id(self):
        """Gets the id of this ServerConceptCategory.  # noqa: E501

        the CURIE of the concept category (see [Biolink Model Classes](https://biolink.github.io/biolink-model)  # noqa: E501

        :return: The id of this ServerConceptCategory.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerConceptCategory.

        the CURIE of the concept category (see [Biolink Model Classes](https://biolink.github.io/biolink-model)  # noqa: E501

        :param id: The id of this ServerConceptCategory.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this ServerConceptCategory.  # noqa: E501

        the URI of the concept category (see [Biolink Model Classes](https://biolink.github.io/biolink-model)  for the full list of URI)  # noqa: E501

        :return: The uri of this ServerConceptCategory.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ServerConceptCategory.

        the URI of the concept category (see [Biolink Model Classes](https://biolink.github.io/biolink-model)  for the full list of URI)  # noqa: E501

        :param uri: The uri of this ServerConceptCategory.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def category(self):
        """Gets the category of this ServerConceptCategory.  # noqa: E501

        the human readable label of the concept category (see [Biolink Model Classes](https://biolink.github.io/biolink-model) for  the full list of concept categories)   # noqa: E501

        :return: The category of this ServerConceptCategory.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ServerConceptCategory.

        the human readable label of the concept category (see [Biolink Model Classes](https://biolink.github.io/biolink-model) for  the full list of concept categories)   # noqa: E501

        :param category: The category of this ServerConceptCategory.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this ServerConceptCategory.  # noqa: E501

        human readable definition assigned by the beacon for the specified concept category   # noqa: E501

        :return: The description of this ServerConceptCategory.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServerConceptCategory.

        human readable definition assigned by the beacon for the specified concept category   # noqa: E501

        :param description: The description of this ServerConceptCategory.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def beacons(self):
        """Gets the beacons of this ServerConceptCategory.  # noqa: E501

        list of metadata for beacons that support the use of this concept category   # noqa: E501

        :return: The beacons of this ServerConceptCategory.  # noqa: E501
        :rtype: list[ServerConceptCategoriesByBeacon]
        """
        return self._beacons

    @beacons.setter
    def beacons(self, beacons):
        """Sets the beacons of this ServerConceptCategory.

        list of metadata for beacons that support the use of this concept category   # noqa: E501

        :param beacons: The beacons of this ServerConceptCategory.  # noqa: E501
        :type: list[ServerConceptCategoriesByBeacon]
        """

        self._beacons = beacons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerConceptCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
