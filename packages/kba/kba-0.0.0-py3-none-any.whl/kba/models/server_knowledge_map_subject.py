# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself.   # noqa: E501

    OpenAPI spec version: 1.1.3
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ServerKnowledgeMapSubject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'prefixes': 'list[str]'
    }

    attribute_map = {
        'category': 'category',
        'prefixes': 'prefixes'
    }

    def __init__(self, category=None, prefixes=None):  # noqa: E501
        """ServerKnowledgeMapSubject - a model defined in Swagger"""  # noqa: E501

        self._category = None
        self._prefixes = None
        self.discriminator = None

        if category is not None:
            self.category = category
        if prefixes is not None:
            self.prefixes = prefixes

    @property
    def category(self):
        """Gets the category of this ServerKnowledgeMapSubject.  # noqa: E501

        the human readable label of the concept category of a statement subject   # noqa: E501

        :return: The category of this ServerKnowledgeMapSubject.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ServerKnowledgeMapSubject.

        the human readable label of the concept category of a statement subject   # noqa: E501

        :param category: The category of this ServerKnowledgeMapSubject.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def prefixes(self):
        """Gets the prefixes of this ServerKnowledgeMapSubject.  # noqa: E501


        :return: The prefixes of this ServerKnowledgeMapSubject.  # noqa: E501
        :rtype: list[str]
        """
        return self._prefixes

    @prefixes.setter
    def prefixes(self, prefixes):
        """Sets the prefixes of this ServerKnowledgeMapSubject.


        :param prefixes: The prefixes of this ServerKnowledgeMapSubject.  # noqa: E501
        :type: list[str]
        """

        self._prefixes = prefixes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerKnowledgeMapSubject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
