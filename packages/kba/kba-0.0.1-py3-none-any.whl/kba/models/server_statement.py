# coding: utf-8

"""
    Translator Knowledge Beacon Aggregator API

    This is the Translator Knowledge Beacon Aggregator web service application programming interface (API) that provides integrated access to a pool of knowledge sources publishing concepts and relations through the Translator Knowledge Beacon API. This API is similar to that of the latter mentioned API with the addition of some extra informative endpoints plus session identifier and beacon indices. These latter identifiers are locally assigned numeric indices provided to track the use of specific registered beacons within the aggregator API itself.   # noqa: E501

    OpenAPI spec version: 1.1.3
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kba.models.server_statement_object import ServerStatementObject  # noqa: F401,E501
from kba.models.server_statement_predicate import ServerStatementPredicate  # noqa: F401,E501
from kba.models.server_statement_subject import ServerStatementSubject  # noqa: F401,E501


class ServerStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'subject': 'ServerStatementSubject',
        'predicate': 'ServerStatementPredicate',
        'object': 'ServerStatementObject',
        'beacon': 'int'
    }

    attribute_map = {
        'id': 'id',
        'subject': 'subject',
        'predicate': 'predicate',
        'object': 'object',
        'beacon': 'beacon'
    }

    def __init__(self, id=None, subject=None, predicate=None, object=None, beacon=None):  # noqa: E501
        """ServerStatement - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._subject = None
        self._predicate = None
        self._object = None
        self._beacon = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subject is not None:
            self.subject = subject
        if predicate is not None:
            self.predicate = predicate
        if object is not None:
            self.object = object
        if beacon is not None:
            self.beacon = beacon

    @property
    def id(self):
        """Gets the id of this ServerStatement.  # noqa: E501

        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)  # noqa: E501

        :return: The id of this ServerStatement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServerStatement.

        CURIE-encoded identifier for statement (can be used to retrieve associated evidence)  # noqa: E501

        :param id: The id of this ServerStatement.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this ServerStatement.  # noqa: E501


        :return: The subject of this ServerStatement.  # noqa: E501
        :rtype: ServerStatementSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ServerStatement.


        :param subject: The subject of this ServerStatement.  # noqa: E501
        :type: ServerStatementSubject
        """

        self._subject = subject

    @property
    def predicate(self):
        """Gets the predicate of this ServerStatement.  # noqa: E501


        :return: The predicate of this ServerStatement.  # noqa: E501
        :rtype: ServerStatementPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this ServerStatement.


        :param predicate: The predicate of this ServerStatement.  # noqa: E501
        :type: ServerStatementPredicate
        """

        self._predicate = predicate

    @property
    def object(self):
        """Gets the object of this ServerStatement.  # noqa: E501


        :return: The object of this ServerStatement.  # noqa: E501
        :rtype: ServerStatementObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this ServerStatement.


        :param object: The object of this ServerStatement.  # noqa: E501
        :type: ServerStatementObject
        """

        self._object = object

    @property
    def beacon(self):
        """Gets the beacon of this ServerStatement.  # noqa: E501

        aggregator assigned beacon index number   # noqa: E501

        :return: The beacon of this ServerStatement.  # noqa: E501
        :rtype: int
        """
        return self._beacon

    @beacon.setter
    def beacon(self, beacon):
        """Sets the beacon of this ServerStatement.

        aggregator assigned beacon index number   # noqa: E501

        :param beacon: The beacon of this ServerStatement.  # noqa: E501
        :type: int
        """

        self._beacon = beacon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
