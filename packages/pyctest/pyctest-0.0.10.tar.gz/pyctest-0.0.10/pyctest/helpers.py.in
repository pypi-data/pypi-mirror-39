#!@PYTHON_EXECUTABLE@
# MIT License
#
# Copyright (c) 2018, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from __future__ import absolute_import

__author__ = "Jonathan Madsen"
__copyright__ = "Copyright 2018, The Regents of the University of California"
__credits__ = ["Jonathan Madsen"]
__license__ = "MIT"
__version__ = "@PROJECT_VERSION@"
__maintainer__ = "Jonathan Madsen"
__email__ = "jonrobm.programming@gmail.com"
__status__ = "Development"
__all__ = ['pyctest', 'pycmake', 'helpers']


import os
import sys
import shutil
import platform
import warnings
import argparse

from . import pyctest
from . import pycmake


#------------------------------------------------------------------------------#
#
class Conda(object):
    """
    Utility class for getting relevant conda environment variables
    """
    def __init__(self):
        self.prefix = os.environ.get("CONDA_PREFIX")
        self.environ = os.environ.get("CONDA_ENVIRONMENT")
        self.python = os.environ.get("CONDA_PYTHON_EXE")
        self.default_env = os.environ.get("CONDA_DEFAULT_ENV")
        self.shlvl = os.environ.get("CONDA_SHLVL")

    def __str__(self):
        return "{}={};{}={};{}={};{}={};{}={}".format(
            "CONDA_PREFIX", self.prefix,
            "CONDA_ENVIRONMENT", self.environ,
            "CONDA_PYTHON_EXE", self.python,
            "CONDA_DEFAULT_ENV", self.default_env,
            "CONDA_SHLVL", self.shlvl)



#------------------------------------------------------------------------------#
#
def FindExePath(name, path=None):
    try:
        from shutil import which
        exepath = which(name, path=path)
        if exepath is not None:
            return exepath
    except:
        pass

    try:
        from distutils.spawn import find_executable
        return find_executable(name, path=path)
    except:
        pass

    return None


#------------------------------------------------------------------------------#
#
def RemovePath(path):
    """
    function for safely removing a folder
    """
    try:
        import shutil
        if path is not None and os.path.exists(path):
            if os.path.isdir(path) and path != os.getcwd():
                shutil.rmtree(path)
            else:
                os.remove(path)
    except Exception as e:
        print("non-fatal exception on '{}': {}".format(path, e))


#------------------------------------------------------------------------------#
#
def Cleanup(path=None, extra=[], exclude=[]):
    """
    This function removes PyCTest files/folders that are copied into or
    generated in the given path during running PyCTest

    args:
        - path    [str]  : alternative path (default=pyctest.SOURCE_DIRECTORY)
        - extra   [list] : any additional files/folders to remove
        - exclude [list] : use this to exclude deleting files/folders
    """
    filelist = ["Build.cmake", "CTestConfig.cmake", "CTestCustom.cmake",
                "CTestTestfile.cmake", "Coverage.cmake", "DartConfiguration.tcl",
                "Glob.cmake", "Init.cmake", "Makefile", "MemCheck.cmake",
                "Stages.cmake", "Submit.cmake",
                "Test.cmake", "Testing", "Utilities.cmake",
                "cmake_install.cmake", "__pycache__",
                "CMakeFiles", "CMakeCache.txt"]

    if len(extra) > 0:
        filelist.extend(extra)

    for f in exclude:
        if f in filelist:
            filelist.remove(f)

    if path is None:
        path = pyctest.SOURCE_DIRECTORY

    for f in filelist:
        RemovePath(os.path.join(path, f))


#------------------------------------------------------------------------------#
#
def GetHomePath():
    home = os.environ.get("HOME")
    if home is None:
        home_d = os.environ.get("HomeDrive")
        home_p = os.environ.get("HomePath")
        if home_d is not None and home_p is not None:
            home = os.path.join(home_d, home_p)
    return home


#------------------------------------------------------------------------------#
#
def GetSystemVersionInfo():
    # version info for build name
    version_info = "{}".format(platform.system())
    if platform.system() == "Windows":
        version_info = "Windows {}".format(platform.version())
    if platform.system() == 'Darwin':
        version_info = "macOS {}".format(platform.mac_ver()[0])
    elif platform.system() == 'Linux':
        version_info = "{} {}".format(platform.linux_distribution()[0],
                                    platform.linux_distribution()[1])
    return version_info


#------------------------------------------------------------------------------#
#
class ArgumentParser(argparse.ArgumentParser):

    """
    - Adds common options for PyCTest
    """

    #-------------------------------------------------------------------------#
    #
    def __init__(self,
                project_name,
                source_dir,
                binary_dir,
                python_exe=sys.executable,
                mode="Stages",
                stages=["Start", "Update", "Configure", "Build", "Test", "Coverage", "MemCheck"],
                trigger="None",
                model="Continuous",
                site=platform.node(),
                jobs=1,
                submit=False,
                ctest_args=["-V"],
                vcs_type=None,
                checkout_command=None,
                update_command=None,
                configure_command=None,
                build_command=None,
                coverage_command=None,
                memcheck_command=None,
                build_type=None,
                build_choices = [ "Release", "RelWithDebInfo", "Debug", "MinSizeRel" ],
                # standard argparse.ArgumentParser arguments
                prog=None,
                usage=None,
                description="PyCTest argparse. Arguments after first '--' are passed directly " \
"to CTest, arguments after second '--' are passed directly to CMake",
                epilog=None,
                parents=[],
                formatter_class=argparse.HelpFormatter,
                prefix_chars='-',
                fromfile_prefix_chars=None,
                argument_default=None,
                conflict_handler='error',
                add_help=True):

        # init parent
        super(ArgumentParser, self).__init__(prog=prog,
                                             usage=usage,
                                             description=description,
                                             epilog=epilog, parents=parents,
                                             formatter_class=formatter_class,
                                             prefix_chars=prefix_chars,
                                             fromfile_prefix_chars=fromfile_prefix_chars,
                                             argument_default=argument_default,
                                             conflict_handler=conflict_handler,
                                             add_help=add_help)

        if checkout_command is not None:
            pyctest.CHECKOUT_COMMAND = "{}".format(checkout_command)

        if update_command is not None:
            pyctest.UPDATE_COMMAND = "{}".format(update_command)

        if configure_command is not None:
            pyctest.CONFIGURE_COMMAND = "{}".format(configure_command)

        if build_command is not None:
            pyctest.BUILD_COMMAND = "{}".format(build_command)

        if coverage_command is not None:
            pyctest.COVERAGE_COMMAND = "{}".format(coverage_command)

        if memcheck_command is not None:
            pyctest.MEMORYCHECK_COMMAND = "{}".format(memcheck_command)

        # limit the mode choices
        mode_choices = ["Start", "Update", "Configure", "Build",
                        "Test", "Coverage", "MemCheck", "Submit", "Stages"]
        # stage choices
        stage_choices = ["Start", "Update", "Configure", "Build",
                         "Test", "Coverage", "MemCheck", "Submit"]
        # choices for submission model
        model_choices = ["Nightly", "Continuous", "Experimental"]
        # choices for submit trigger
        trigger_choices = ["Build", "Test", "Coverage", "MemCheck", "None"]

        # version control options
        vcs_options = ["bzr", "cvs", "git", "hg", "p4", "svn"]

        # just a help message
        default_pyexe_help = "{}. {}.".format(
            "Python executable to use",
            "This can be absolue, relative, or CMake path")

        self.add_argument("--pyctest-ctest-args",
                          help="CTest arguments",
                          type=str,
                          default=ctest_args,
                          nargs='*')
        self.add_argument("--pyctest-project-name",
                          help="Name of project using PyCTest",
                          type=str,
                          default=project_name)
        self.add_argument("--pyctest-python-exe",
                          help=default_pyexe_help,
                          type=str,
                          default=python_exe)
        self.add_argument("--pyctest-source-dir",
                          help="Source directory",
                          type=str,
                          default=source_dir)
        self.add_argument("--pyctest-binary-dir",
                          help="Working directory",
                          type=str,
                          default=binary_dir)
        self.add_argument("--pyctest-mode",
                          help="Testing mode (how to run the setup)",
                          type=str,
                          choices=mode_choices,
                          default=mode)
        self.add_argument("--pyctest-stages",
                          help="Run modes separately in stages",
                          choices=stage_choices,
                          default=stages,
                          nargs='*')
        self.add_argument("--pyctest-trigger",
                          help="Submit to dashboard after this mode was run",
                          choices=trigger_choices,
                          default=trigger)
        self.add_argument("--pyctest-model",
                          help="CTest submission model (CDash)",
                          type=str,
                          choices=model_choices,
                          default=model)
        self.add_argument("--pyctest-jobs",
                          help="number of concurrent jobs",
                          type=int,
                          default=jobs)
        self.add_argument("--pyctest-site",
                          help="CTest submission site",
                          type=str,
                          default=site)
        self.add_argument("--pyctest-clean-first",
                          help=("Remove standard PyCTest files and binary directory"
                                + " (if not source directory)"),
                          action="store_true")
        self.add_argument("--pyctest-token",
                          help="CTest site token for submission",
                          type=str)
        self.add_argument("--pyctest-token-file",
                          help="Path to file for CTest site token for submission",
                          type=str)
        self.add_argument("--pyctest-submit",
                          help="Enable submission to dashboard",
                          action='store_true',
                          default=submit)
        self.add_argument("--pyctest-clean-update",
                          help=("Specify that you want the version control update"
                            + " and eliminate any local modifications. Without"
                            + " specifying this option, the update"
                            + " command will only discover the current version that"
                            + " is checked out, and not to update to a different"
                            + " version"),
                          default=False, action='store_true')
        self.add_argument("--pyctest-vcs-type",
                          help=("Set to enable revision ID discovery using"
                                + " default settings for retriving the revision ID"
                                + " during the Update stage"),
                          default=vcs_type, type=str, choices=vcs_options)
        self.add_argument("--pyctest-build-type",
                          help=("Specify CMAKE_BUILD_TYPE (if using CMake) --"
                                + " setting is accessible via pyctest.BUILD_TYPE"),
                          default=build_type, type=str, choices=build_choices)
        self.add_argument("--pyctest-c-compiler",
                          help="Specify the C compiler (if needed)",
                            default=os.environ.get("CC"), type=str)
        self.add_argument("--pyctest-cxx-compiler",
                          help="Specify C++ compiler (if needed)",
                          default=os.environ.get("CXX"), type=str)
        self.add_argument("--pyctest-fortran-compiler",
                          help="Specify Fortan compiler (if needed)",
                          default=os.environ.get("FC"), type=str)

    #-------------------------------------------------------------------------#
    #
    def process_args(self, args):
        """
        Process PyCTest args
        """
        binary_dir = os.path.realpath(args.pyctest_binary_dir)
        source_dir = os.path.realpath(args.pyctest_source_dir)

        if args.pyctest_c_compiler is not None:
            os.environ["CC"] = "{}".format(args.pyctest_c_compiler)

        if args.pyctest_cxx_compiler is not None:
            os.environ["CXX"] = "{}".format(args.pyctest_cxx_compiler)

        if args.pyctest_fortran_compiler is not None:
            os.environ["FC"] = "{}".format(args.pyctest_fortran_compiler)

        # clean
        if args.pyctest_clean_first:
            Cleanup(binary_dir)
            if source_dir != binary_dir:
                RemovePath(binary_dir)

        # make binary directory
        if not os.path.exists(binary_dir):
            os.makedirs(binary_dir)

        if args.pyctest_mode != "Stages":
            args.pyctest_stages = [args.pyctest_mode]

        # if submit enabled but was not included in stages
        if args.pyctest_submit and not "Submit" in args.pyctest_stages:
            args.pyctest_stages.append("Submit")

        # the name of the project
        pyctest.PROJECT_NAME = args.pyctest_project_name

        # source directory
        pyctest.SOURCE_DIRECTORY = source_dir

        # binary directory
        pyctest.BINARY_DIRECTORY = binary_dir

        # site of CDash submission
        pyctest.SITE = args.pyctest_site

        # build type
        if args.pyctest_build_type is not None:
            pyctest.set("BUILD_TYPE", "{}".format(args.pyctest_build_type))

        # build name for CDash
        pyctest.BUILD_NAME = "[{} {} {}] [Python {}]".format(
            platform.uname()[0],
            GetSystemVersionInfo(),
            platform.uname()[4],
            platform.python_version())

        # the Python to use with scripts
        pyctest.PYTHON_EXECUTABLE = args.pyctest_python_exe

        # submit after "Test" has been called
        pyctest.TRIGGER = args.pyctest_trigger

        # how to checkout the code
        pyctest.CHECKOUT_COMMAND = ""

        # the submission model in CDash (default = Nightly)
        pyctest.MODEL = args.pyctest_model

        # if specified to not remove an revision
        if not args.pyctest_clean_update:
            pyctest.set("CTEST_UPDATE_VERSION_ONLY", "ON")

        if args.pyctest_vcs_type is not None:
            pyctest.set("CTEST_UPDATE_TYPE", "{}".format(args.pyctest_vcs_type))

        # custom variables
        pyctest.CUSTOM_COVERAGE_EXCLUDE = "NONE"
        pyctest.CUSTOM_MAXIMUM_NUMBER_OF_ERRORS = "200"
        pyctest.CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS = "300"
        pyctest.CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE = "104857600"

        if args.pyctest_token:
            pyctest.set("CTEST_TOKEN", args.pyctest_token)
        elif args.pyctest_token_file:
            pyctest.set("CTEST_TOKEN_FILE", args.pyctest_token_file)
        else:
            home = GetHomePath()
            if home is not None:
                relpath = os.path.join(".tokens", pyctest.PROJECT_NAME)
                token_path = os.path.join(home, relpath)
                if os.path.exists(token_path):
                    print("Setting CTEST_TOKEN_FILE to '{}'...".format(token_path))
                    pyctest.set("CTEST_TOKEN_FILE", token_path)
            if os.environ.get("CTEST_TOKEN") is not None:
                pyctest.set("CTEST_TOKEN", os.environ.get("CTEST_TOKEN"))

        # append the stages to the CTest args
        args.pyctest_ctest_args.append(
            "-DSTAGES={}".format(";".join(args.pyctest_stages)))

        # instruct to execute Stages.cmake
        args.pyctest_ctest_args.extend(["-S", "Stages.cmake"])

        # add the number of jobs
        if args.pyctest_jobs > 0:
            args.pyctest_ctest_args.append("-j{}".format(args.pyctest_jobs))

        # if the arguments were provided
        if len(args.pyctest_ctest_args) > 0:
            for _arg in args.pyctest_ctest_args:
                pyctest.ARGUMENTS.extend(_arg.split(" "))

        print("CTest arguments (default): '{}'".format(" ".join(pyctest.ARGUMENTS)))


    #-------------------------------------------------------------------------#
    def parse_args(self, *args, **kwargs):
        _argv = []
        _ctest = []
        _cmake = []
        _argsets = [_argv, _ctest, _cmake]
        _i = 0
        _separator = '--'

        for _arg in sys.argv[1:]:
            if _arg == _separator:
                _i += 1
                if _i >= len(_argsets):
                    sys.exit(
                        "ERROR: Too many \"{}\" separators provided "
                        "(expected at most {}).".format(_separator,
                                                        len(_argsets) - 1))
            else:
                _argsets[_i].append(_arg)

        try:
            sys.argv[1:] = _argv
            pyctest.ARGUMENTS.extend(_ctest)
            pycmake.ARGUMENTS.extend(_cmake)
            print("PyCTest args: {}".format(_argv))
            print("  CTest args: {}".format(pyctest.ARGUMENTS + _ctest))
            print("  CMake args: {}".format(pycmake.ARGUMENTS + _cmake))
        except Exception as e:
            msg = "\nCommand line argument error:\n\t{}\n".format(e)
            warnings.warn(msg)

        # read arguments (fail if unknown option)
        pargs = super(ArgumentParser, self).parse_args(*args, **kwargs)

        # process PyCTest args
        self.process_args(pargs)

        # return all args
        return pargs
