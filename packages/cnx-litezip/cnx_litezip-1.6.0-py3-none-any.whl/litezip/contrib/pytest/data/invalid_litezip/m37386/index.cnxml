<?xml version="1.0"?>
<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml" xmlns:bib="http://bibtexml.sf.net/" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:q="http://cnx.rice.edu/qml/1.0" id="new" cnxml-version="0.7" module-id="new">

<title>C Language Programming through the ADC and the MSP430</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml"
          mdml-version="0.5">
  <!-- WARNING! The 'metadata' section is read only. Do not edit below.
       Changes to the metadata section in the source will not be saved. -->
  <md:repository>http://cnx.org/content</md:repository>
  <md:content-url>http://cnx.org/content/m37386/latest</md:content-url>
  <md:content-id>m37386</md:content-id>
  <md:title>C Language Programming through the ADC and the MSP430</md:title>
  <md:version>1.3</md:version>
  <md:created>2011/01/17 21:22:35 -0600</md:created>
  <md:revised>2011/08/16 14:05:55 -0500</md:revised>
  <md:actors>
    <md:person userid="mwjhnsn">
      <md:firstname>Matthew</md:firstname>
      <md:surname>Johnson</md:surname>
      <md:fullname>Matthew Johnson</md:fullname>
      <md:email>mwj1@rice.edu</md:email>
    </md:person>
  </md:actors>
  <md:roles>
    <md:role type="author">mwjhnsn</md:role>
    <md:role type="maintainer">mwjhnsn</md:role>
    <md:role type="licensor">mwjhnsn</md:role>
  </md:roles>
  <md:license url="http://creativecommons.org/licenses/by/3.0/" />
  <!-- For information on license requirements for use or modification, see license url in the
       above <md:license> element.
       For information on formatting required attribution, see the URL:
         CONTENT_URL/content_info#cnx_cite_header
       where CONTENT_URL is the value provided above in the <md:content-url> element.
  -->
  <md:keywordlist>
    <md:keyword>ADC</md:keyword>
    <md:keyword>C</md:keyword>
    <md:keyword>Elec 220</md:keyword>
    <md:keyword>filtering</md:keyword>
    <md:keyword>MSP430</md:keyword>
    <md:keyword>Rice</md:keyword>
    <md:keyword>Voltmeter</md:keyword>
  </md:keywordlist>
  <md:subjectlist>
    <md:subject>Science and Technology</md:subject>
  </md:subjectlist>
  <md:abstract></md:abstract>
  <md:language>en</md:language>
  <!-- WARNING! The 'metadata' section is read only. Do not edit above.
       Changes to the metadata section in the source will not be saved. -->
</metadata>

<content>
  <section id="eip-714"><title>The C Language and Analog Interfacing: Your Task</title><para id="eip-297">This lab covers the basic principals behind Analog to Digital Conversion, as well as the basics of programming in C.  You are expected to have some background in C from class, but if you are confused, see this <link document="col10788" window="new">basic reference</link>.  </para><list id="eip-id1171680401890" type="enumerated" list-type="enumerated" number-style="arabic"><item>
Using Code Composer Studio 4, write a C language program turning your MSP430 LaunchPad into a simple 10 level voltmeter.  Your program should divide the 0-3.3V input range of the ADC into 10 zones, and then output from a 0 to a 9 on the LED display depending on the input voltage.  <emphasis>DO NOT EXCEED AN INPUT VOLTAGE OF 3.3V</emphasis>.  You will damage your circuits and destroy your MSP430.  <link target-id="eip-262">Assignment Details</link>
</item>
</list>


</section><section id="eip-427"><title>The ADC and "C" Through a Practical Example</title><section id="eip-156"><title>Interfacing with the Analog World: The ADC</title><para id="eip-545">ADC's play an incredibly important role in digital electronics and DSP.  ADC stands for <emphasis>A</emphasis>nalog to <emphasis>D</emphasis>igital <emphasis>C</emphasis>onverter, and it does exactly what you would expect it to.  It samples an external voltage, and then converts that voltage to a binary number compared to the reference voltage range from Vdd to Vss.  (In plain English terms, the ADC samples what fraction the input is of some maximum allowed reference voltage.)  The ADC's result gets written to a memory mapped register, where the programmer can access it and use it in his or her code.
</para><para id="eip-518">An ADC has a <emphasis>finite voltage range it can safely convert</emphasis> (usually related to its power supply range, but not always).  The precision of the converted sample is related to the number of bits used by the ADC.  <emphasis>More bits means more precision</emphasis> (more finite "slots" into which the infinitely variable analog single can be quantized) and a lower "quantization error."  To learn more about error and ADC, see this except from the <link document="m0051">Introduction to Electrical Engineering course notes</link>.  ADC's also have a <emphasis>maximum sampling rate specification</emphasis> (how frequently the ADC can make a conversion), but in this course we will be sampling very low frequency signals, so we won't need to worry about it.</para></section><section id="eip-678"><title>The MSP430 ADC</title><para id="eip-981">The MSP430 G2231 has one 12 channel 10 bit 200Khz ADC.  ADC channels allow the single ADC to select between several different signals (such as two different analog inputs on different GPIO pins) like an analog multiplexer.  In the G2231, channels 1-8 are connected to the 8 P1 GPIO pins, and channel 10 is connected to the chip's internal temperature sensor.  You can select which channel to convert by setting the <code display="inline"> ADC10CTL1</code> register's (<emphasis>10</emphasis> bit <emphasis>ADC</emphasis> <emphasis>C</emphasis>on<emphasis>t</emphasis>ro<emphasis>l</emphasis> <emphasis>1</emphasis>) <code display="inline">INCH</code> property (<emphasis>In</emphasis>put <emphasis>Ch</emphasis>annel).
</para><para id="eip-53">For this lab, we will configure the ADC to use the internal 3.3 Vdd as the reference voltage.  
<list id="eip-id1165369379639"><item>A voltage of 3.3V would result in the ADC register holding 11 1111 1111 (0x03FF)</item>
<item>A voltage of 0.0V would result in the ADC register reading 00 0000 0000 (0x0000)</item>
<item>A voltage of 1.65V would result in the ADC register reading 01 1111 1111 (0x01FF)
</item>
<item>The ADC will have a sample resolution of 3.3V/1024  [Voltage Range/2<sup>#Bits</sup>], or .0032 Volts.</item>
</list></para>
<para id="eip-id1170142707219">The ADC is a peripheral device, so it operates independently from the CPU.  It has several operation modes (configured by writing to its control registers).
<definition id="eip-id1170135964060"><term>Peripheral</term>
<meaning id="eip-id1170132148623">A device that can operate independently from direct CPU support and control.  Peripherals often rely on interrupts to notify the CPU when they have completed some given task or need attention, and use independent control registers for configuration.  The ADC 10 is a peripheral, as well as the MSP430's UART (serial controller) and timers.
</meaning>
</definition>
<list id="eip-id7364016"><title>ADC10 Operation Modes</title><item>Single Sample and Hold-- the ADC10 will start a conversion when triggered by the CPU.  After that conversion, it will hold the converted value in the ADC10MEM register and automatically go into sleep mode until signaled to begin another conversion.  We will mostly use this mode.</item>
<item>Sequence of Channels Sample and Hold-- the ADC10 will convert a series of different channels once, and store the result to ADC10MEM.</item>
<item>Repeat Single Channel Mode-- it will continuously sample on channel, continuously updating the ADC10MEM register.</item>
<item>Repeat Sequence of Channels Mode-- the ADC will continuously sample through a series of channels.</item>
</list>
The MSP430's ADC 10 also has a built in memory controller.  We won't be using it, but it becomes important when using the repeat modes.  The memory controller can automatically write the ADC data into main memory as conversions finish, bypassing the CPU.  
</para><para id="eip-539">The G2231's ADC can run off of one of several available clock signals of varying speeds. The ADC10 also has a clock divider that can further slow the conversion speed by up to a factor of 8.  Once a sample has been captured, it is held ready in the ADC10MEM register for a defined number of clock cycles.  Since we are concerned with a low frequency signal, we will want to slow down the ADC10 as much as possible.  (Students who have had Elec241 will notice some fundamental flaws in the assumptions made regarding high-frequency noise, but in practice this has very little effect on the final results).  Even in its slowest mode, the ADC10 will still sample too quickly, so the use of some kind of moving average will help stabilize its DC readings.</para></section><section id="eip-725"><title>Controlling the ADC10 in C</title><section id="eip-id1167078535992">
<title>C Basics</title>

<para id="eip-id1165699118731">
Your C program will be structured similarly to its assembly language counterparts, but with a much different syntax.  Like before, the register names are all pre-defined in the <code display="inline">"msp430x20x2.h"</code> header file.  To set a register, now just use an equals sign and set it like any other variable.  For example, you will want to disable the watchdog timer in the first line of your program. <code display="inline">WDTCTL=WDTPW+WDTHOLD;</code>  The compiler will execute the <code display="inline">void main(void)</code> function first.  From that function, you can call any other functions or run any loops that you would like.  
</para>
<para id="eip-id1165712981865">
<title>C Skeleton Program</title>
<code id="eip-id8409575" display="block">
#include  "msp430x20x2.h"

//Global Variable Declarations

//Global Function Declarations

void main(void)
{
   WDTCTL = WDTPW + WDTHOLD; // Stop WDT
   //Other Setup

   //Your Program Here
   //Can call other helper functions, loops, etc.
}

</code>
</para>


</section><section id="eip-743"><title>Configuring the ADC10</title><para id="eip-693">The ADC10 has two main control registers <code display="inline">ADC10CTL0</code> and <code display="inline"> ADC10CTL1</code>, and two analog input enable registers <code display="inline">ADC10AE0</code> and <code display="inline">ADC10AE1</code> (<emphasis>10</emphasis>bit <emphasis>ADC</emphasis> <emphasis>A</emphasis>nalog <emphasis>E</emphasis>nable <emphasis>0/1</emphasis>).  These registers control all the timing and conversion aspects of the ADC.
</para>

<figure id="ADC10CTL0"><title>ADC10CTL0</title><media id="eip-id1170497323386" alt="Register diagram of the ADC10CTL0 register.">
<image mime-type="image/png" src="MSP430 ADC10CTL0.png"/>
</media>
</figure>

<para id="eip-id1171698068930">In the first control register (<code display="inline">ADC10CTL0</code>), we only need to change two parameters,
<list id="eip-id1171672622306"><item>
ADC10SHTx--<emphasis>10</emphasis>bit <emphasis>ADC</emphasis> <emphasis>S</emphasis>ample <emphasis>H</emphasis>old <emphasis>T</emphasis>ime-- a higher value means each sample will be held for a longer period of time.  We want to set this at the max value of <code display="inline">ADC10SHT_3</code> . 
</item>
<item>
ADC10ON--<emphasis>10</emphasis>bit <emphasis>ADC</emphasis> <emphasis>ON</emphasis>/OFF--setting this bit to "1" (denoted by the label <code display="inline">ADC10ON</code>) turns on the ADC, a vital step to performing any conversion!
</item>
</list>

To actually do this in C, just use addition and an equals sign:
<code id="eip-id6703722" display="block">
ADC10CTL0 = ADC10SHT_3 + ADC10ON ; 
</code></para>

<figure id="ADC10CTL1"><title>ADC10CTL1</title><media id="eip-id1170497353481" alt="Register diagram of the ADC10CTL1 register.">
<image mime-type="image/png" src="MSP430 ADC10CTL1.png"/>
</media>
</figure>

<para id="eip-268">In the second control register (<code display="inline">ADC10CTL1</code>), we want to again set two parameters, but we will need to use 4 alias labels instead of just two.
<list id="eip-id1165702901540"><item>ADC10DIVx--<emphasis>10</emphasis>bit <emphasis>ADC</emphasis> clock <emphasis>Div</emphasis>ider bit <emphasis>x</emphasis>-- for "more flexibility", you set each bit individually in the three bit ADC10DIVx section of the register.  Since we want the maximum divider, we will set all the bits.
<note id="eip-id1167921165676" type="aside">Since some of the bit labeling is inconsistent (ADC10DIV is bit-wise while ADC10SHT is not), it is always good to examine the header file for a controller to see how its aliases are defined before using them in your code.
</note> 
</item>
<item>INCHx--<emphasis>In</emphasis>put <emphasis>Ch</emphasis>annel <emphasis>#</emphasis>-- this 4 bit section determines which of the possible input channels the ADC will actually convert in single convert mode.  In series mode, this determines the highest channel to be converted in the series (all channels below this number will also be converted).
</item>
</list>
<code id="eip-id2513529" display="block">ADC10CTL1 = ADC10DIV0 + ADC10DIV1 + ADC10DIV2 + INCH_X; 
</code>

</para><para id="eip-642">Lastly, the ADC10 has the ADC10AE0/1 registers that enable analog input on the different pins.  These act as gates to prevent leakage current from flowing from a pin set as an output through the ADC to ground-- a substantial waste of power.  To enable the ADC for your desired GPIO pin, just set the corresponding bit in <code display="inline"> ADC10AE0 </code> to "1".
<code id="eip-id1168495733386" display="block">ADC10AE0 |= BIT#;
</code>
</para><para id="eip-277">For more info about the ADC10's configuration options, see the MSP430 manual starting on page 609.</para></section><section id="eip-891"><title>Using the ADC</title><para id="eip-205">To read a sample from the ADC, just read from the ADC10MEM register after the sample has completed.
<code id="eip-id1167644744878" display="block">
my_var= ADC10MEM;
</code>
Remember that we have setup the ADC for single conversion and hold, so if you want another value, you will have to tell it to sample and convert again.  You do so by modifying two values in ADC10CTL0:
<list id="eip-id1167659757751"><item> ENC--<emphasis>En</emphasis>able <emphasis>C</emphasis>onversion-- locks in the ADC settings and stabilizes it for conversion.
</item>
<item>
ADC10SC--<emphasis>10</emphasis>bit <emphasis>ADC</emphasis> <emphasis>S</emphasis>tart <emphasis>C</emphasis>onversion-- setting this bit to one actually triggers the ADC's conversion cycle.  
</item>
</list>
<code id="eip-id1167651460432" display="block">
ADC10CTL0 |= ENC + ADC10SC;
</code>
<note id="eip-id1167664272350">
Be sure to use OR equal (|=) so that the configuration bits you set before don't get overridden.
</note>
<note id="eip-id1167420598884">Also, don't forget to configure P1 as usual.  You will need to set the pins you wish to use as ADC inputs to input mode at the <code display="inline"> P1DIR</code> register as well as the <code display="inline">ADC10AE0</code> register.  You can configure the P1 registers using aliases and variable assignments just like with the ADC registers.
</note></para></section></section></section><section id="eip-262"><title>Assignment Details</title><para id="eip-650">Using Code Composer Studio 4, write a C language program turning your MSP430 LaunchPad into a simple 10 level voltmeter.  Your program should divide the 0-3.3V input range of the ADC into 10 zones, and then output from a 0 to a 9 on the LED display depending on the input voltage.  Don't worry about a value landing on the boundary between two zones, just deal with it consistently.  Test your volt meter by attaching it to some of the variable power supplies around the room.  <emphasis>DO NOT EXCEED AN INPUT VOLTAGE OF 3.3V</emphasis>.  You will damage your circuits and destroy your MSP430.
</para><para id="eip-920">Your Program should consist of:
<list id="eip-id1167393983939">
<item>A "void main(void)" function that drives your program</item>
<item>A successful setup routine that properly configures the ADC10</item>
<item>An output routine that successfully re-scales the 1024 ADC possibilities to 10 zones</item>

</list></para></section>
</content>

</document>
