function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import { ERRORS } from './messages';

var BreakpointsProvider = function (_React$Component) {
  _inherits(BreakpointsProvider, _React$Component);

  function BreakpointsProvider(props, context) {
    _classCallCheck(this, BreakpointsProvider);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

    _this.readWidth = function (event) {
      var width = event.target.innerWidth ? event.target.innerWidth : window.innerWidth;
      _this.calculateBreakpoint(width);
    };

    _this.calculateBreakpoint = function (width) {
      if (_this.state.breakpoints.length > 2) {
        _this.state.breakpoints.map(function (breakpoint, i) {
          if (i == 0 && width < _this.state.breakpoints[i + 1]) {
            _this.state.currentBreakpoint != i && _this.setState({ currentBreakpoint: i });
          }
          if (i >= 1 && i < _this.state.breakpoints.length) {
            if (width >= _this.state.breakpoints[i - 1] && width < _this.state.breakpoints[i]) {
              _this.state.currentBreakpoint != i - 1 && _this.setState({ currentBreakpoint: i - 1 });
            }
          }
          if (i == _this.state.breakpoints.length - 1) {
            if (width >= _this.state.breakpoints[i]) {
              _this.state.currentBreakpoint != i && _this.setState({ currentBreakpoint: i });
            }
          }
        });
      }
    };

    _this.state = {
      breakpoints: _this.props.breakpoints || [],
      currentBreakpoint: _this.props.guessedBreakpoint || 2
    };
    return _this;
  }

  BreakpointsProvider.prototype.getChildContext = function getChildContext() {
    return {
      currentBreakpoint: this.state.currentBreakpoint
    };
  };

  BreakpointsProvider.prototype.componentWillMount = function componentWillMount() {
    if (!this.props.breakpoints || this.props.breakpoints.length <= 2) throw new Error(ERRORS.NO_BREAKPOINTS);
    this.props.breakpoints !== this.state.breakpoints && this.setState({ breakpoints: this.props.breakpoints });
    window.addEventListener('resize', this.readWidth);
    window.addEventListener('load', this.readWidth);
  };

  BreakpointsProvider.prototype.componentWillUnmount = function componentWillUnmount() {
    window.removeEventListener('resize', this.readWidth);
    window.removeEventListener('load', this.readWidth);
  };

  BreakpointsProvider.prototype.render = function render() {
    return this.props.children;
  };

  return BreakpointsProvider;
}(React.Component);

BreakpointsProvider.contextTypes = {
  currentBreakpoint: PropTypes.number
};
BreakpointsProvider.childContextTypes = {
  currentBreakpoint: PropTypes.number
};
BreakpointsProvider.propTypes = {
  breakpoints: PropTypes.arrayOf(PropTypes.number),
  guessedBreakpoint: PropTypes.number
};


export default BreakpointsProvider;