'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash.debounce');

var _lodash2 = _interopRequireDefault(_lodash);

var _BreakpointsContext = require('./BreakpointsContext');

var _messages = require('./messages');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactBreakpoints = function (_React$Component) {
  _inherits(ReactBreakpoints, _React$Component);

  function ReactBreakpoints() {
    var _temp, _this, _ret;

    _classCallCheck(this, ReactBreakpoints);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      breakpoints: _this.props.breakpoints || {},
      screenWidth: _this.props.guessedBreakpoint || _this.props.defaultBreakpoint,
      currentBreakpoint: null
    }, _this.readWidth = function (event) {
      var width = event ? event.target.innerWidth ? event.target.innerWidth : window.innerWidth : window.innerWidth;
      var current = _this.calculateCurrentBreakpoint(width);

      var snapMode = _this.props.snapMode;

      _this.setState(function (state) {
        if (state.currentBreakpoint === current) return null;
        return {
          currentBreakpoint: snapMode ? current : null,
          screenWidth: snapMode ? null : width
        };
      });
    }, _this.getContextValues = function () {
      return _extends({
        breakpoints: _extends({}, _this.state.breakpoints)
      }, _this.props.snapMode && {
        currentBreakpoint: _this.state.currentBreakpoint
      }, !_this.props.snapMode && {
        screenWidth: _this.state.screenWidth
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  ReactBreakpoints.prototype.componentDidMount = function componentDidMount() {
    // throw Error if no breakpoints were passed
    if (!this.props.breakpoints) throw new Error(_messages.ERRORS.NO_BREAKPOINTS);
    // throw Error if breakpoints is not an object
    if (_typeof(this.props.breakpoints) !== 'object') throw new Error(_messages.ERRORS.NOT_OBJECT);

    this.props.breakpoints !== this.state.breakpoints && this.setState({ breakpoints: this.props.breakpoints });

    if (typeof window !== 'undefined') {

      this.readWidth(); // initial width calculation

      if (this.props.debounceResize) {
        window.addEventListener('resize', (0, _lodash2.default)(this.readWidth, this.props.debounceDelay));
      } else {
        window.addEventListener('resize', this.readWidth);
      }
      window.addEventListener('orientationchange', this.readWidth);
    }
  };

  ReactBreakpoints.prototype.componentWillUnmount = function componentWillUnmount() {
    if (typeof window !== 'undefined') {
      if (this.props.debounceResize) {
        window.addEventListener('resize', (0, _lodash2.default)(this.readWidth, this.props.debounceDelay));
      } else {
        window.addEventListener('resize', this.readWidth);
      }
      window.removeEventListener('orientationchange', this.readWidth);
    }
  };

  ReactBreakpoints.prototype.calculateCurrentBreakpoint = function calculateCurrentBreakpoint(screenWidth) {
    var _this2 = this;

    var currentBreakpoint = null;
    var breakpointKeys = Object.keys(this.state.breakpoints);
    new (Function.prototype.bind.apply(Array, [null].concat(breakpointKeys)))().reverse() // reverse array to put largest breakpoint first
    .map(function (breakpoint) {
      var breakpointPixelValue = _this2.state.breakpoints[breakpoint];
      if (!currentBreakpoint && screenWidth >= breakpointPixelValue) {
        currentBreakpoint = breakpoint;
      }
    });
    // If currentBreakpoint is null here, screenWidth is below lowest breakpoint,
    // so it will still be set to equal lowest breakpoint instead of null
    if (currentBreakpoint === null) {
      currentBreakpoint = breakpointKeys[0];
    }

    return currentBreakpoint;
  };

  ReactBreakpoints.prototype.render = function render() {
    var children = this.props.children;

    return _react2.default.createElement(
      _BreakpointsContext.Provider,
      { value: this.getContextValues() },
      children && children
    );
  };

  return ReactBreakpoints;
}(_react2.default.Component);

ReactBreakpoints.defaultProps = {
  debounceResize: false,
  debounceDelay: 50,
  snapMode: true
};
ReactBreakpoints.propTypes = {
  /*
    @breakpoints
    Your breakpoints object.
   */
  breakpoints: _propTypes2.default.objectOf(_propTypes2.default.number),
  /*
    @guessedBreakpoint
    When rendering on the server, you can do your own magic with for example UA
    to guess which viewport width a user probably has.
   */
  guessedBreakpoint: _propTypes2.default.number, // from server
  /*
    @defaultBreakpoint
    In case you don't want to default to mobile on SSR and no guessedBreakpoint
    is passed, use defaultBreakpoint to set your own value.
   */
  defaultBreakpoint: _propTypes2.default.number,
  /*
    @debounceResize
    If you don't want the resize listener to be debounced, set to false. Defaults to false 
    when snapMode is true.
   */
  debounceResize: _propTypes2.default.bool,
  /*
    @debounceDelay: number
    Set a custom delay for how long the debounce timeout should be.
   */
  debounceDelay: _propTypes2.default.number,
  /*
    @snapMode
    Replaces breakpoints.current with screenWidth, disabling re-render only
    when breakpoint changes, instead potentially re-rendering when 
    calculateCurrentBreakpoint returns a new value. 
   */
  snapMode: _propTypes2.default.bool
};
exports.default = ReactBreakpoints;