(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
	(factory((global.ReactPowerPlug = {}),global.React));
}(this, (function (exports,React) { 'use strict';

var React__default = 'default' in React ? React['default'] : React;

/* eslint-disable no-console */

var warn = function warn(condition, message) {
  var trace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  if (condition) {
    console.warn('[react-powerplug]: ' + message);
    console.trace && trace && console.trace('Trace');
  }
};

var isFn = function isFn(prop) {
  return typeof prop === 'function';
};

/**
 * renderProps
 * is a render/children props interop.
 * will pick up the prop that was used,
 * or children if both are used
 */

var renderProps = function renderProps(_ref, props) {
  var children = _ref.children,
      render = _ref.render;

  {
    warn(isFn(children) && isFn(render), 'You are using the children and render props together.\n' + 'This is impossible, therefore, only the children will be used.');
  }

  var fn = isFn(children) ? children : render;

  return fn ? fn(props) : null;
};

var noop = function noop() {};

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var State = function (_Component) {
  inherits(State, _Component);

  function State() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, State);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = State.__proto__ || Object.getPrototypeOf(State)).call.apply(_ref, [this].concat(args))), _this), _this.state = _extends({}, _this.props.initial), _this._setState = function (updater) {
      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

      _this.setState(updater, function () {
        _this.props.onChange(_this.state);
        cb();
      });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(State, [{
    key: 'render',
    value: function render() {
      return renderProps(this.props, {
        state: this.state,
        setState: this._setState
      });
    }
  }]);
  return State;
}(React.Component);

State.defaultProps = {
  initial: {},
  onChange: noop
};

var Active = function Active(_ref) {
  var onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['onChange']);
  return React__default.createElement(
    State,
    { initial: { isActive: false }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        isActive: state.isActive,
        bindActive: {
          onMouseDown: function onMouseDown() {
            return setState({ isActive: true });
          },
          onMouseUp: function onMouseUp() {
            return setState({ isActive: false });
          }
        }
      });
    }
  );
};

var Bind = function Bind(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? '' : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: { value: initial }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        bind: {
          onChange: function onChange(event) {
            return setState({ value: event.target.value });
          },
          value: state.value
        },
        setValue: function setValue(value) {
          return setState({ value: value });
        },
        value: state.value
      });
    }
  );
};

var isElement = function isElement(element) {
  return typeof element.type === 'function';
};

var compose = function compose() {
  for (var _len = arguments.length, elements = Array(_len), _key = 0; _key < _len; _key++) {
    elements[_key] = arguments[_key];
  }

  return function (composedProps) {

    // Stack children arguments recursively and pass
    // it down until the last component that render children
    // with these stacked arguments
    function stackProps(i, elements) {
      var stacked = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var element = elements[i];
      var isTheLast = i === 0;

      // Check if is latest component.
      // If is latest then render children,
      // Otherwise continue stacking arguments
      var renderFn = function renderFn(props) {
        return isTheLast ? renderProps(composedProps, _extends({}, props, stacked)) : stackProps(i - 1, elements, _extends({}, props, stacked));
      };

      // Clone a element if it's passed created as <Element initial={} />
      // Or create it if passed as just Element
      var elementFn = isElement(element) ? React__default.cloneElement : React__default.createElement;

      return elementFn(element, {}, renderFn);
    }

    return stackProps(elements.length - 1, elements);
  };
};

var Compose = function Compose(_ref) {
  var states = _ref.states,
      props = objectWithoutProperties(_ref, ['states']);
  return compose.apply(undefined, toConsumableArray(states))(props);
};

var Counter = function Counter(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? 0 : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: { count: initial }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        count: state.count,
        inc: function inc() {
          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
          return setState(function (_ref3) {
            var count = _ref3.count;
            return { count: count + value };
          });
        },
        dec: function dec() {
          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
          return setState(function (_ref4) {
            var count = _ref4.count;
            return { count: count - value };
          });
        }
      });
    }
  );
};

var Focus = function Focus(_ref) {
  var onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['onChange']);
  return React__default.createElement(
    State,
    { initial: { isFocus: false }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        isFocus: state.isFocus,
        bindFocus: {
          onFocus: function onFocus() {
            return setState({ isFocus: true });
          },
          onBlur: function onBlur() {
            return setState({ isFocus: false });
          }
        }
      });
    }
  );
};

var Form = function Form(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? {} : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: _extends({}, initial), onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        input: function input(id) {
          var value = state[id] || '';
          var setValue = function setValue(value) {
            return setState(defineProperty({}, id, value));
          };

          return {
            bind: {
              onChange: function onChange(event) {
                return setValue(event.target.value);
              },
              value: value
            },
            setValue: setValue,
            value: value
          };
        }
      });
    }
  );
};

var Hover = function Hover(_ref) {
  var onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['onChange']);
  return React__default.createElement(
    State,
    { initial: { isHover: false }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        isHover: state.isHover,
        bindHover: {
          onMouseEnter: function onMouseEnter() {
            return setState({ isHover: true });
          },
          onMouseLeave: function onMouseLeave() {
            return setState({ isHover: false });
          }
        }
      });
    }
  );
};

var Index = function Index(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? 0 : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: { index: initial }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        index: state.index,
        setIndex: function setIndex(index) {
          return setState({ index: index });
        }
      });
    }
  );
};

var complement = function complement(fn) {
  return function () {
    return !fn.apply(undefined, arguments);
  };
};

var List = function List(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? [] : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: { list: initial }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        list: state.list,
        setList: function setList(list) {
          return setState({ list: list });
        },
        push: function push(value) {
          return setState(function (_ref3) {
            var list = _ref3.list;
            return { list: [].concat(toConsumableArray(list), [value]) };
          });
        },
        pull: function pull(predicate) {
          return setState(function (_ref4) {
            var list = _ref4.list;
            return { list: list.filter(complement(predicate)) };
          });
        },
        sort: function sort(compareFn) {
          return setState(function (_ref5) {
            var list = _ref5.list;
            return { list: [].concat(toConsumableArray(list)).sort(compareFn) };
          });
        }
      });
    }
  );
};

var Loading = function Loading(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? false : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: { isLoading: initial }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        isLoading: state.isLoading,
        toggleLoading: function toggleLoading() {
          return setState(function (s) {
            return { isLoading: !s.isLoading };
          });
        },
        setLoading: function setLoading(isLoading) {
          return setState({ isLoading: isLoading });
        }
      });
    }
  );
};

var Set = function Set(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? {} : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: _extends({}, initial), onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        values: state,
        set: function set$$1(key, value) {
          return setState(defineProperty({}, key, value));
        },
        over: function over(key, fn) {
          return setState(function (s) {
            return defineProperty({}, key, fn(s[key]));
          });
        },
        get: function get$$1(key) {
          return state[key];
        }
      });
    }
  );
};

var Toggle = function Toggle(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? false : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: { on: initial }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        on: state.on,
        off: !state.on,
        toggle: function toggle() {
          return setState(function (s) {
            return { on: !s.on };
          });
        },
        setOn: function setOn(on) {
          return setState({ on: on });
        }
      });
    }
  );
};

var Value = function Value(_ref) {
  var _ref$initial = _ref.initial,
      initial = _ref$initial === undefined ? '' : _ref$initial,
      onChange = _ref.onChange,
      props = objectWithoutProperties(_ref, ['initial', 'onChange']);
  return React__default.createElement(
    State,
    { initial: { value: initial }, onChange: onChange },
    function (_ref2) {
      var state = _ref2.state,
          setState = _ref2.setState;
      return renderProps(props, {
        value: state.value,
        setValue: function setValue(value) {
          return setState({ value: value });
        }
      });
    }
  );
};

var index = {
  Active: Active,
  Bind: Bind,
  Compose: Compose,
  Counter: Counter,
  Focus: Focus,
  Form: Form,
  Hover: Hover,
  Index: Index,
  List: List,
  Loading: Loading,
  Set: Set,
  State: State,
  Toggle: Toggle,
  Value: Value,
  compose: compose,
  renderProps: renderProps
};

exports.Active = Active;
exports.Bind = Bind;
exports.Compose = Compose;
exports.Counter = Counter;
exports.Focus = Focus;
exports.Form = Form;
exports.Hover = Hover;
exports.Index = Index;
exports.List = List;
exports.Loading = Loading;
exports.Set = Set;
exports.State = State;
exports.Toggle = Toggle;
exports.Value = Value;
exports.compose = compose;
exports.renderProps = renderProps;
exports['default'] = index;

Object.defineProperty(exports, '__esModule', { value: true });

})));
