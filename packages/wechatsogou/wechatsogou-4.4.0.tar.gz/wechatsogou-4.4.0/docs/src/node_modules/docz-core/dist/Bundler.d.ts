import { Config as Args } from './commands/args';
export interface Server {
    close: () => void;
    on: (event: string, cb: (server: any) => void) => void;
}
export interface BundlerServer {
    start(): Promise<Server>;
}
export declare type ServerFn<C> = (config: C) => BundlerServer | Promise<BundlerServer>;
export declare type BuildFn<C> = (config: C) => void;
export interface BundlerConstructor<Config> {
    args: Args;
    config: Config;
    server: ServerFn<Config>;
    build: BuildFn<Config>;
}
export declare class Bundler<C = any> {
    private readonly args;
    private config;
    private server;
    private builder;
    constructor(params: BundlerConstructor<C>);
    getConfig(): C;
    createServer(config: C): Promise<BundlerServer>;
    build(config: C): Promise<void>;
    private mountConfig;
    private isProd;
}
