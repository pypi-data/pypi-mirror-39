import { Config } from './commands/args';
import { BabelRC } from './utils/babelrc';
export declare type SetConfig = (config: Config) => Config;
export declare type ModifyBundlerConfig<C = any> = (config: C, dev: boolean) => C;
export declare type ModifyBabelRC = (babelrc: BabelRC) => BabelRC;
export declare type OnServerListening = <S>(server: S) => void;
export declare type OnPreBuild = () => void;
export declare type OnPostBuild = () => void;
export declare type OnPreRender = () => void;
export declare type OnPostRender = () => void;
export interface PluginFactory {
    setConfig?: SetConfig;
    modifyBundlerConfig?: ModifyBundlerConfig;
    modifyBabelRc?: ModifyBabelRC;
    onServerListening?: OnServerListening;
    onPreBuild?: OnPreBuild;
    onPostBuild?: OnPostBuild;
    onPreRender?: OnPreRender;
    onPostRender?: OnPostRender;
}
export declare class Plugin<C = any> implements PluginFactory {
    static runPluginsMethod(plugins: Plugin[] | undefined): (method: keyof Plugin, ...args: any[]) => void;
    static propsOfPlugins(plugins: Plugin[] | undefined): (prop: keyof Plugin) => any;
    static reduceFromPlugins<C>(plugins: Plugin[] | undefined): (method: keyof Plugin, initial: C, ...args: any[]) => C;
    readonly setConfig?: SetConfig;
    readonly modifyBundlerConfig?: ModifyBundlerConfig<C>;
    readonly modifyBabelRc?: ModifyBabelRC;
    readonly onServerListening?: OnServerListening;
    readonly onPreBuild?: OnPreBuild;
    readonly onPostBuild?: OnPostBuild;
    readonly onPreRender?: OnPreRender;
    readonly onPostRender?: OnPostRender;
    constructor(p: PluginFactory);
}
export declare function createPlugin<C = any>(factory: PluginFactory): Plugin<C>;
