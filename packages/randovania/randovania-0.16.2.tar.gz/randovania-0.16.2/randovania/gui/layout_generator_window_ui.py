# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/travis/build/randovania/randovania/randovania/gui/layout_generator_window.ui'
#
# Created by: PyQt5 UI code generator 5.11.3
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_LayoutGeneratorWindow(object):
    def setupUi(self, LayoutGeneratorWindow):
        LayoutGeneratorWindow.setObjectName("LayoutGeneratorWindow")
        LayoutGeneratorWindow.resize(802, 488)
        self.centralWidget = QtWidgets.QWidget(LayoutGeneratorWindow)
        self.centralWidget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.centralWidget.setObjectName("centralWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralWidget)
        self.gridLayout.setContentsMargins(11, 11, 11, 11)
        self.gridLayout.setSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.seed_number_label = QtWidgets.QLabel(self.centralWidget)
        self.seed_number_label.setObjectName("seed_number_label")
        self.gridLayout.addWidget(self.seed_number_label, 2, 0, 1, 1)
        self.display_help_box = QtWidgets.QCheckBox(self.centralWidget)
        self.display_help_box.setMinimumSize(QtCore.QSize(130, 0))
        self.display_help_box.setChecked(True)
        self.display_help_box.setObjectName("display_help_box")
        self.gridLayout.addWidget(self.display_help_box, 2, 3, 1, 1)
        self.scroll_area = QtWidgets.QScrollArea(self.centralWidget)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setObjectName("scroll_area")
        self.scroll_area_widget_contents = QtWidgets.QWidget()
        self.scroll_area_widget_contents.setGeometry(QtCore.QRect(0, -906, 765, 1298))
        self.scroll_area_widget_contents.setObjectName("scroll_area_widget_contents")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.scroll_area_widget_contents)
        self.verticalLayout_2.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_2.setSpacing(6)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.logic_group = QtWidgets.QGroupBox(self.scroll_area_widget_contents)
        self.logic_group.setFlat(False)
        self.logic_group.setCheckable(False)
        self.logic_group.setChecked(False)
        self.logic_group.setObjectName("logic_group")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.logic_group)
        self.verticalLayout.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.logic_description_label = QtWidgets.QLabel(self.logic_group)
        self.logic_description_label.setWordWrap(True)
        self.logic_description_label.setObjectName("logic_description_label")
        self.verticalLayout.addWidget(self.logic_description_label)
        self.logic_noglitches_radio = QtWidgets.QRadioButton(self.logic_group)
        self.logic_noglitches_radio.setObjectName("logic_noglitches_radio")
        self.verticalLayout.addWidget(self.logic_noglitches_radio)
        self.logic_noglitches_label = QtWidgets.QLabel(self.logic_group)
        self.logic_noglitches_label.setWordWrap(True)
        self.logic_noglitches_label.setObjectName("logic_noglitches_label")
        self.verticalLayout.addWidget(self.logic_noglitches_label)
        self.logic_trivial_radio = QtWidgets.QRadioButton(self.logic_group)
        self.logic_trivial_radio.setObjectName("logic_trivial_radio")
        self.verticalLayout.addWidget(self.logic_trivial_radio)
        self.logic_trivial_label = QtWidgets.QLabel(self.logic_group)
        self.logic_trivial_label.setWordWrap(True)
        self.logic_trivial_label.setObjectName("logic_trivial_label")
        self.verticalLayout.addWidget(self.logic_trivial_label)
        self.logic_easy_radio = QtWidgets.QRadioButton(self.logic_group)
        self.logic_easy_radio.setObjectName("logic_easy_radio")
        self.verticalLayout.addWidget(self.logic_easy_radio)
        self.logic_easy_label = QtWidgets.QLabel(self.logic_group)
        self.logic_easy_label.setWordWrap(True)
        self.logic_easy_label.setObjectName("logic_easy_label")
        self.verticalLayout.addWidget(self.logic_easy_label)
        self.logic_normal_radio = QtWidgets.QRadioButton(self.logic_group)
        self.logic_normal_radio.setObjectName("logic_normal_radio")
        self.verticalLayout.addWidget(self.logic_normal_radio)
        self.logic_normal_label = QtWidgets.QLabel(self.logic_group)
        self.logic_normal_label.setWordWrap(True)
        self.logic_normal_label.setObjectName("logic_normal_label")
        self.verticalLayout.addWidget(self.logic_normal_label)
        self.logic_hard_radio = QtWidgets.QRadioButton(self.logic_group)
        self.logic_hard_radio.setObjectName("logic_hard_radio")
        self.verticalLayout.addWidget(self.logic_hard_radio)
        self.logic_hard_label = QtWidgets.QLabel(self.logic_group)
        self.logic_hard_label.setWordWrap(True)
        self.logic_hard_label.setObjectName("logic_hard_label")
        self.verticalLayout.addWidget(self.logic_hard_label)
        self.logic_hypermode_radio = QtWidgets.QRadioButton(self.logic_group)
        self.logic_hypermode_radio.setObjectName("logic_hypermode_radio")
        self.verticalLayout.addWidget(self.logic_hypermode_radio)
        self.logic_hypermode_label = QtWidgets.QLabel(self.logic_group)
        self.logic_hypermode_label.setWordWrap(True)
        self.logic_hypermode_label.setObjectName("logic_hypermode_label")
        self.verticalLayout.addWidget(self.logic_hypermode_label)
        self.logic_minimalrestrictions_radio = QtWidgets.QRadioButton(self.logic_group)
        self.logic_minimalrestrictions_radio.setObjectName("logic_minimalrestrictions_radio")
        self.verticalLayout.addWidget(self.logic_minimalrestrictions_radio)
        self.logic_minimalrestrictions_label = QtWidgets.QLabel(self.logic_group)
        self.logic_minimalrestrictions_label.setWordWrap(True)
        self.logic_minimalrestrictions_label.setObjectName("logic_minimalrestrictions_label")
        self.verticalLayout.addWidget(self.logic_minimalrestrictions_label)
        self.verticalLayout_2.addWidget(self.logic_group)
        self.mode_group = QtWidgets.QGroupBox(self.scroll_area_widget_contents)
        self.mode_group.setObjectName("mode_group")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.mode_group)
        self.verticalLayout_3.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_3.setSpacing(6)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.mode_standard_radio = QtWidgets.QRadioButton(self.mode_group)
        self.mode_standard_radio.setObjectName("mode_standard_radio")
        self.verticalLayout_3.addWidget(self.mode_standard_radio)
        self.mode_standard_label = QtWidgets.QLabel(self.mode_group)
        self.mode_standard_label.setWordWrap(True)
        self.mode_standard_label.setObjectName("mode_standard_label")
        self.verticalLayout_3.addWidget(self.mode_standard_label)
        self.mode_major_items_radio = QtWidgets.QRadioButton(self.mode_group)
        self.mode_major_items_radio.setObjectName("mode_major_items_radio")
        self.verticalLayout_3.addWidget(self.mode_major_items_radio)
        self.mode_major_items_label = QtWidgets.QLabel(self.mode_group)
        self.mode_major_items_label.setWordWrap(True)
        self.mode_major_items_label.setObjectName("mode_major_items_label")
        self.verticalLayout_3.addWidget(self.mode_major_items_label)
        self.verticalLayout_2.addWidget(self.mode_group)
        self.elevators_group = QtWidgets.QGroupBox(self.scroll_area_widget_contents)
        self.elevators_group.setObjectName("elevators_group")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.elevators_group)
        self.verticalLayout_7.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_7.setSpacing(6)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.elevators_description_label = QtWidgets.QLabel(self.elevators_group)
        self.elevators_description_label.setWordWrap(True)
        self.elevators_description_label.setObjectName("elevators_description_label")
        self.verticalLayout_7.addWidget(self.elevators_description_label)
        self.elevators_vanilla_radio = QtWidgets.QRadioButton(self.elevators_group)
        self.elevators_vanilla_radio.setObjectName("elevators_vanilla_radio")
        self.verticalLayout_7.addWidget(self.elevators_vanilla_radio)
        self.elevators_vanilla_label = QtWidgets.QLabel(self.elevators_group)
        self.elevators_vanilla_label.setWordWrap(True)
        self.elevators_vanilla_label.setObjectName("elevators_vanilla_label")
        self.verticalLayout_7.addWidget(self.elevators_vanilla_label)
        self.elevators_randomized_radio = QtWidgets.QRadioButton(self.elevators_group)
        self.elevators_randomized_radio.setObjectName("elevators_randomized_radio")
        self.verticalLayout_7.addWidget(self.elevators_randomized_radio)
        self.elevators_randomized_label = QtWidgets.QLabel(self.elevators_group)
        self.elevators_randomized_label.setWordWrap(True)
        self.elevators_randomized_label.setObjectName("elevators_randomized_label")
        self.verticalLayout_7.addWidget(self.elevators_randomized_label)
        self.verticalLayout_2.addWidget(self.elevators_group)
        self.itemloss_group = QtWidgets.QGroupBox(self.scroll_area_widget_contents)
        self.itemloss_group.setObjectName("itemloss_group")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.itemloss_group)
        self.verticalLayout_6.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_6.setSpacing(6)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.itemloss_description_label = QtWidgets.QLabel(self.itemloss_group)
        self.itemloss_description_label.setWordWrap(True)
        self.itemloss_description_label.setObjectName("itemloss_description_label")
        self.verticalLayout_6.addWidget(self.itemloss_description_label)
        self.itemloss_enabled_radio = QtWidgets.QRadioButton(self.itemloss_group)
        self.itemloss_enabled_radio.setObjectName("itemloss_enabled_radio")
        self.verticalLayout_6.addWidget(self.itemloss_enabled_radio)
        self.itemloss_enabled_label = QtWidgets.QLabel(self.itemloss_group)
        self.itemloss_enabled_label.setWordWrap(True)
        self.itemloss_enabled_label.setObjectName("itemloss_enabled_label")
        self.verticalLayout_6.addWidget(self.itemloss_enabled_label)
        self.itemloss_disabled_radio = QtWidgets.QRadioButton(self.itemloss_group)
        self.itemloss_disabled_radio.setObjectName("itemloss_disabled_radio")
        self.verticalLayout_6.addWidget(self.itemloss_disabled_radio)
        self.itemloss_disabled_label = QtWidgets.QLabel(self.itemloss_group)
        self.itemloss_disabled_label.setWordWrap(True)
        self.itemloss_disabled_label.setObjectName("itemloss_disabled_label")
        self.verticalLayout_6.addWidget(self.itemloss_disabled_label)
        self.verticalLayout_2.addWidget(self.itemloss_group)
        self.skytemple_group = QtWidgets.QGroupBox(self.scroll_area_widget_contents)
        self.skytemple_group.setObjectName("skytemple_group")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.skytemple_group)
        self.verticalLayout_5.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_5.setSpacing(6)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.skytemple_description = QtWidgets.QLabel(self.skytemple_group)
        self.skytemple_description.setWordWrap(True)
        self.skytemple_description.setObjectName("skytemple_description")
        self.verticalLayout_5.addWidget(self.skytemple_description)
        self.skytemple_vanilla_radio = QtWidgets.QRadioButton(self.skytemple_group)
        self.skytemple_vanilla_radio.setObjectName("skytemple_vanilla_radio")
        self.verticalLayout_5.addWidget(self.skytemple_vanilla_radio)
        self.skytemple_vanilla_label = QtWidgets.QLabel(self.skytemple_group)
        self.skytemple_vanilla_label.setWordWrap(True)
        self.skytemple_vanilla_label.setObjectName("skytemple_vanilla_label")
        self.verticalLayout_5.addWidget(self.skytemple_vanilla_label)
        self.skytemple_randomized_radio = QtWidgets.QRadioButton(self.skytemple_group)
        self.skytemple_randomized_radio.setObjectName("skytemple_randomized_radio")
        self.verticalLayout_5.addWidget(self.skytemple_randomized_radio)
        self.skytemple_randomized_label = QtWidgets.QLabel(self.skytemple_group)
        self.skytemple_randomized_label.setWordWrap(True)
        self.skytemple_randomized_label.setObjectName("skytemple_randomized_label")
        self.verticalLayout_5.addWidget(self.skytemple_randomized_label)
        self.verticalLayout_2.addWidget(self.skytemple_group)
        self.itemquantity_group = QtWidgets.QGroupBox(self.scroll_area_widget_contents)
        self.itemquantity_group.setObjectName("itemquantity_group")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.itemquantity_group)
        self.gridLayout_2.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_2.setSpacing(6)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_2 = QtWidgets.QLabel(self.itemquantity_group)
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 2, 2, 1, 2)
        self.itemquantity_total_label = QtWidgets.QLabel(self.itemquantity_group)
        self.itemquantity_total_label.setObjectName("itemquantity_total_label")
        self.gridLayout_2.addWidget(self.itemquantity_total_label, 2, 0, 1, 1)
        self.itemquantity_reset_button = QtWidgets.QPushButton(self.itemquantity_group)
        self.itemquantity_reset_button.setObjectName("itemquantity_reset_button")
        self.gridLayout_2.addWidget(self.itemquantity_reset_button, 2, 1, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem, 1, 0, 1, 4)
        self.itemquantity_description_label = QtWidgets.QLabel(self.itemquantity_group)
        self.itemquantity_description_label.setWordWrap(True)
        self.itemquantity_description_label.setObjectName("itemquantity_description_label")
        self.gridLayout_2.addWidget(self.itemquantity_description_label, 0, 0, 1, 4)
        self.verticalLayout_2.addWidget(self.itemquantity_group)
        self.scroll_area.setWidget(self.scroll_area_widget_contents)
        self.gridLayout.addWidget(self.scroll_area, 0, 0, 1, 4)
        self.seed_number_edit = QtWidgets.QLineEdit(self.centralWidget)
        self.seed_number_edit.setObjectName("seed_number_edit")
        self.gridLayout.addWidget(self.seed_number_edit, 2, 1, 1, 2)
        self.view_details_button = QtWidgets.QPushButton(self.centralWidget)
        self.view_details_button.setEnabled(False)
        self.view_details_button.setObjectName("view_details_button")
        self.gridLayout.addWidget(self.view_details_button, 3, 3, 1, 1)
        self.create_layout_button = QtWidgets.QPushButton(self.centralWidget)
        self.create_layout_button.setObjectName("create_layout_button")
        self.gridLayout.addWidget(self.create_layout_button, 3, 0, 1, 1)
        LayoutGeneratorWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QtWidgets.QMenuBar(LayoutGeneratorWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 802, 21))
        self.menuBar.setObjectName("menuBar")
        LayoutGeneratorWindow.setMenuBar(self.menuBar)

        self.retranslateUi(LayoutGeneratorWindow)
        QtCore.QMetaObject.connectSlotsByName(LayoutGeneratorWindow)

    def retranslateUi(self, LayoutGeneratorWindow):
        _translate = QtCore.QCoreApplication.translate
        LayoutGeneratorWindow.setWindowTitle(_translate("LayoutGeneratorWindow", "Hello, world!"))
        self.seed_number_label.setText(_translate("LayoutGeneratorWindow", "Seed Number"))
        self.display_help_box.setText(_translate("LayoutGeneratorWindow", "Display Help"))
        self.logic_group.setTitle(_translate("LayoutGeneratorWindow", "Logic"))
        self.logic_description_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>There are logic rules in place which prevent you from being locked out of progression and guaranteeing that you’ll be able to finish the game every time regardless of the distribution of items. The different game modes use different logic and assume different levels of game knowledge and ability.</p></body></html>"))
        self.logic_noglitches_radio.setText(_translate("LayoutGeneratorWindow", "No Glitches"))
        self.logic_noglitches_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>This mode requires no advanced knowledge about the game, nor does it require any glitches or sequence breaks to be used, making it ideal for casual players.</p><p>This logic is designed to prevent players from getting stuck in as many locations as possible, but it is still possible to softlock when you enter a room that you\'re unable to leave (ex: vanilla beam rooms without the necessary beam to escape, Dark World without Light Beam/Anihhilator Beam).<br/><br/>Warning: It may be <span style=\" font-style:italic;\">necessary</span> to enter Dark World without a way to escape if that item is located in the Dark World.</p></body></html>"))
        self.logic_trivial_radio.setText(_translate("LayoutGeneratorWindow", "Trivial"))
        self.logic_trivial_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>This mode includes strategies that abuses oversights in the game, such as being able to activate the Hive Dynamo Works portal from the other side of the chasm and bomb jumping in Temple Assembly Site.</p></body></html>"))
        self.logic_easy_radio.setText(_translate("LayoutGeneratorWindow", "Easy"))
        self.logic_easy_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>This mode assumes you can do simple tricks.</p></body></html>"))
        self.logic_normal_radio.setText(_translate("LayoutGeneratorWindow", "Normal"))
        self.logic_normal_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>This mode expands on the Easy mode, including more difficult to execute tricks.</p></body></html>"))
        self.logic_hard_radio.setText(_translate("LayoutGeneratorWindow", "Hard"))
        self.logic_hard_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>This mode expands on Normal with additional tricks, such as Grand Abyss scan dash.</p></body></html>"))
        self.logic_hypermode_radio.setText(_translate("LayoutGeneratorWindow", "Hypermode"))
        self.logic_hypermode_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>This mode considers every single trick and path known to Randovania as valid, such as Polluted Mire without Space Jump. No OOB is included.</p></body></html>"))
        self.logic_minimalrestrictions_radio.setText(_translate("LayoutGeneratorWindow", "Minimal Checking"))
        self.logic_minimalrestrictions_label.setText(_translate("LayoutGeneratorWindow", "This mode only checks that Screw Attack, Dark Visor and Light Suit won\'t all be behind Ing Caches and Dark Water, removing the biggest reasons for a pure random layout to be impossible.\n"
"\n"
"Since there aren\'t many checks, out of bounds tricks will probably be necessary for many items."))
        self.mode_group.setToolTip(_translate("LayoutGeneratorWindow", "<html><head/><body><p>There is a single item pool with all expansions, energy tanks, temple keys, sky temple keys, translators and upgrades.</p></body></html>"))
        self.mode_group.setTitle(_translate("LayoutGeneratorWindow", "Mode"))
        self.mode_standard_radio.setText(_translate("LayoutGeneratorWindow", "Standard"))
        self.mode_standard_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>There is a single item pool with all expansions, energy tanks, temple keys, sky temple keys, translators and upgrades.</p></body></html>"))
        self.mode_major_items_radio.setText(_translate("LayoutGeneratorWindow", "Major Items"))
        self.mode_major_items_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>The are two items pools where items are shuffled between:<br/>Expansions Pool: all Missile, Power Bomb and Beam Ammo expansions<br/>Major Pool: all Keys, Translators, Energy Tanks and Suit Upgrades</p></body></html>"))
        self.elevators_group.setToolTip(_translate("LayoutGeneratorWindow", "<html><head/><body><p>There is a single item pool with all expansions, energy tanks, temple keys, sky temple keys, translators and upgrades.</p></body></html>"))
        self.elevators_group.setTitle(_translate("LayoutGeneratorWindow", "Elevators"))
        self.elevators_description_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>Controls what each elevator connects to.</p></body></html>"))
        self.elevators_vanilla_radio.setText(_translate("LayoutGeneratorWindow", "Vanilla Connections (Not Randomized)"))
        self.elevators_vanilla_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>All elevators connects to the original locations.</p></body></html>"))
        self.elevators_randomized_radio.setText(_translate("LayoutGeneratorWindow", "Randomized"))
        self.elevators_randomized_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>Shuffles what each elevators connects to.</p><p>All connections are two-way: after taking an elevator, the elevator in the room you\'re left brings you to where you where.<br/>All zones are guaranteed to be reachable, and an elevator will never connect to the same area.</p></body></html>"))
        self.itemloss_group.setToolTip(_translate("LayoutGeneratorWindow", "<html><head/><body><p>There is a single item pool with all expansions, energy tanks, temple keys, sky temple keys, translators and upgrades.</p></body></html>"))
        self.itemloss_group.setTitle(_translate("LayoutGeneratorWindow", "Item Loss"))
        self.itemloss_description_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>Control if Samus loses her items when entering Hive Chamber B for the first time.<br/>Going out of bounds to avoid item loss is not recomended, since one item is permantently unacessible.</p></body></html>"))
        self.itemloss_enabled_radio.setText(_translate("LayoutGeneratorWindow", "Enabled (Vanilla)"))
        self.itemloss_enabled_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>Samus loses her items as normal.</p></body></html>"))
        self.itemloss_disabled_radio.setText(_translate("LayoutGeneratorWindow", "Disabled"))
        self.itemloss_disabled_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>Hive Chamber B will be in a post-cutscene state. Randovania assumes you have Missiles, Bombs, Spider Ball, Boost Ball and Space Jump from start when distributing items.</p></body></html>"))
        self.skytemple_group.setToolTip(_translate("LayoutGeneratorWindow", "<html><head/><body><p>There is a single item pool with all expansions, energy tanks, temple keys, sky temple keys, translators and upgrades.</p></body></html>"))
        self.skytemple_group.setTitle(_translate("LayoutGeneratorWindow", "Sky Temple Keys"))
        self.skytemple_description.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>Controls where the Sky Temple Keys will be located.</p></body></html>"))
        self.skytemple_vanilla_radio.setText(_translate("LayoutGeneratorWindow", "Vanilla Locations (Not Randomized)"))
        self.skytemple_vanilla_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>All Sky Temple Keys are inside the Ing Caches they were in originally.<br/><span style=\" font-weight:600;\">WARNING</span>: this option may take too long to finish generating, or not finish at all.</p></body></html>"))
        self.skytemple_randomized_radio.setText(_translate("LayoutGeneratorWindow", "Randomized"))
        self.skytemple_randomized_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>Sky Temple Keys are shuffled along with everything else.</p></body></html>"))
        self.itemquantity_group.setTitle(_translate("LayoutGeneratorWindow", "Item Quantity"))
        self.itemquantity_total_label.setText(_translate("LayoutGeneratorWindow", "Total Pickups: 0/0"))
        self.itemquantity_reset_button.setText(_translate("LayoutGeneratorWindow", "Reset"))
        self.itemquantity_description_label.setText(_translate("LayoutGeneratorWindow", "<html><head/><body><p>Choose how many of each item will appear in the game. Adding more than one for major upgrades makes it more likely you\'ll find that upgrade, but additional copies are useless.</p><p>The total of configured items must be less than how many spots are in the game: trying to add more will fail when generating.</p><p>If removing items, the remaning spots are filled with Energy Transfer Module.</p></body></html>"))
        self.seed_number_edit.setPlaceholderText(_translate("LayoutGeneratorWindow", "Random Seed"))
        self.view_details_button.setText(_translate("LayoutGeneratorWindow", "View details"))
        self.create_layout_button.setText(_translate("LayoutGeneratorWindow", "Randomize"))

